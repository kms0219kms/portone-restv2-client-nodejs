/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/login/api-key': {};
  '/login/api-secret': {
    /**
     * API secret 를 사용한 토큰 발급
     *
     * @description API secret 를 사용한 토큰 발급
     * API secret 를 통해 API 인증에 사용할 토큰을 가져옵니다.
     */
    post: operations['loginViaApiSecret'];
  };
  '/token/refresh': {
    /**
     * 토큰 갱신
     *
     * @description 토큰 갱신
     * 리프레시 토큰을 사용해 유효기간이 연장된 새로운 토큰을 재발급합니다.
     */
    post: operations['refreshToken'];
  };
  '/merchant': {};
  '/platform': {
    /**
     * @description 가맹점의 플랫폼 정보를 조회합니다.
     * 요청된 Authorization header 를 통해 자동으로 요청자의 가맹점을 특정합니다.
     */
    get: operations['getPlatform'];
    /**
     * @description 가맹점의 플랫폼 관련 정보를 업데이트합니다.
     * 요청된 Authorization header 를 통해 자동으로 요청자의 가맹점을 특정합니다.
     */
    patch: operations['updatePlatform'];
  };
  '/platform/discount-share-policy-filter-options': {
    /** @description 할인 분담 정책 다건 조회 시 필요한 필터 옵션을 조회합니다. */
    get: operations['getPlatformDiscountSharePolicyFilterOptions'];
  };
  '/platform/discount-share-policies': {
    /** @description 여러 할인 분담을 조회합니다. */
    get: operations['getPlatformDiscountSharePolicies'];
    /** @description 새로운 할인 분담을 생성합니다. */
    post: operations['createPlatformDiscountSharePolicy'];
  };
  '/platform/discount-share-policies/{id}': {
    /** @description 주어진 아이디에 대응되는 할인 분담을 조회합니다. */
    get: operations['getPlatformDiscountSharePolicy'];
    /** @description 주어진 아이디에 대응되는 할인 분담을 업데이트합니다. */
    patch: operations['updatePlatformDiscountSharePolicy'];
  };
  '/platform/discount-share-policies/{id}/schedule': {
    /** @description 주어진 아이디에 대응되는 할인 분담의 예약 업데이트를 조회합니다. */
    get: operations['getPlatformDiscountSharePolicySchedule'];
    /** @description 주어진 아이디에 대응되는 할인 분담에 예약 업데이트를 재설정합니다. */
    put: operations['rescheduleDiscountSharePolicy'];
    /** @description 주어진 아이디에 대응되는 할인 분담에 업데이트를 예약합니다. */
    post: operations['scheduleDiscountSharePolicy'];
    /** @description 주어진 아이디에 대응되는 할인 분담의 예약 업데이트를 취소합니다. */
    delete: operations['cancelPlatformDiscountSharePolicySchedule'];
  };
  '/platform/discount-share-policies/{id}/archive': {};
  '/platform/discount-share-policies/{id}/recover': {};
  '/platform/additional-fee-policies': {
    /** @description 여러 추가 수수료 정책을 조회합니다. */
    get: operations['getPlatformAdditionalFeePolicies'];
    /** @description 새로운 추가 수수료 정책을 생성합니다. */
    post: operations['createPlatformAdditionalFeePolicy'];
  };
  '/platform/additional-fee-policies/{id}': {
    /** @description 주어진 아이디에 대응되는 추가 수수료 정책을 조회합니다. */
    get: operations['getPlatformAdditionalFeePolicy'];
    /** @description 주어진 아이디에 대응되는 추가 수수료 정책을 업데이트합니다. */
    patch: operations['updatePlatformAdditionalFeePolicy'];
  };
  '/platform/additional-fee-policies/{id}/schedule': {
    /** @description 주어진 아이디에 대응되는 추가 수수료 정책의 예약 업데이트를 조회합니다. */
    get: operations['getPlatformAdditionalFeePolicySchedule'];
    put: operations['rescheduleAdditionalFeePolicy'];
    /** @description 주어진 아이디에 대응되는 추가 수수료 정책에 업데이트를 예약합니다. */
    post: operations['scheduleAdditionalFeePolicy'];
    /** @description 주어진 아이디에 대응되는 추가 수수료 정책의 예약 업데이트를 취소합니다. */
    delete: operations['cancelPlatformAdditionalFeePolicySchedule'];
  };
  '/platform/additional-fee-policies/{id}/archive': {};
  '/platform/additional-fee-policies/{id}/recover': {};
  '/platform/partner-filter-options': {
    /** @description 파트너 다건 조회 시 필요한 필터 옵션을 조회합니다. */
    get: operations['getPlatformPartnerFilterOptions'];
  };
  '/platform/partners': {
    /** @description 여러 파트너를 조회합니다. */
    get: operations['getPlatformPartners'];
    /** @description 새로운 파트너를 생성합니다. */
    post: operations['createPlatformPartner'];
  };
  '/platform/partner-dashboard': {};
  '/platform/partners/{id}': {
    /** @description 파트너 객체를 조회합니다. */
    get: operations['getPlatformPartner'];
    /** @description 주어진 아이디에 대응되는 파트너 정보를 업데이트합니다. */
    patch: operations['updatePlatformPartner'];
  };
  '/platform/partners/batch': {
    /** @description 새로운 파트너를 다건 생성합니다. */
    post: operations['createPlatformPartners'];
  };
  '/platform/partners/{id}/approve': {};
  '/platform/partners/{id}/reject': {};
  '/platform/partners/{id}/schedule': {
    /** @description 주어진 아이디에 대응되는 파트너의 예약 업데이트를 조회합니다. */
    get: operations['getPlatformPartnerSchedule'];
    /** @description 주어진 아이디에 대응되는 파트너에 예약 업데이트를 재설정합니다. */
    put: operations['reschedulePartner'];
    /** @description 주어진 아이디에 대응되는 파트너에 업데이트를 예약합니다. */
    post: operations['schedulePartner'];
    /** @description 주어진 아이디에 대응되는 파트너의 예약 업데이트를 취소합니다. */
    delete: operations['cancelPlatformPartnerSchedule'];
  };
  '/platform/partners/schedule': {
    post: operations['schedulePlatformPartners'];
  };
  '/platform/partners/{id}/archive': {};
  '/platform/partners/{id}/recover': {};
  '/platform/contracts': {
    /** @description 여러 계약을 조회합니다. */
    get: operations['getPlatformContracts'];
    /** @description 새로운 계약을 생성합니다. */
    post: operations['createPlatformContract'];
  };
  '/platform/contracts/{id}': {
    get: operations['getPlatformContract'];
    /** @description 주어진 아이디에 대응되는 계약을 업데이트합니다. */
    patch: operations['updatePlatformContract'];
  };
  '/platform/contracts/{id}/schedule': {
    /** @description 주어진 아이디에 대응되는 계약의 예약 업데이트를 조회합니다. */
    get: operations['getPlatformContractSchedule'];
    /** @description 주어진 아이디에 대응되는 계약에 예약 업데이트를 재설정합니다. */
    put: operations['rescheduleContract'];
    /** @description 주어진 아이디에 대응되는 계약에 업데이트를 예약합니다. */
    post: operations['scheduleContract'];
    /** @description 주어진 아이디에 대응되는 계약의 예약 업데이트를 취소합니다. */
    delete: operations['cancelPlatformContractSchedule'];
  };
  '/platform/contracts/{id}/archive': {};
  '/platform/contracts/{id}/recover': {};
  '/platform/transfers/{id}': {
    get: operations['getPlatformTransfer'];
    delete: operations['deletePlatformTransfer'];
  };
  '/platform/transfer-summaries': {};
  '/platform/transfers/order': {
    post: operations['createPlatformOrderTransfer'];
  };
  '/platform/transfers/order-cancel': {
    post: operations['createPlatformOrderCancelTransfer'];
  };
  '/platform/transfers/manual': {
    post: operations['createPlatformManualTransfer'];
  };
  '/platform/transfer-dashboard': {};
  '/platform/transfer-filter-options': {};
  '/platform/payable-settlement-dates': {};
  '/platform/partner-settlements': {};
  '/platform/partner-settlement-filter-options': {};
  '/platform/payouts/{id}': {};
  '/platform/payouts': {};
  '/platform/payouts/{id}/complete': {};
  '/platform/payouts/{payoutId}/partner-settlements': {};
  '/platform/payout-partner-settlements/{id}': {};
  '/platform/payouts/{id}/sheets': {};
  '/platform/payouts/{id}/sheet-file': {};
  '/platform/bank-accounts/{bank}/{accountNumber}/holder': {
    /**
     * 예금주 조회
     *
     * @description 예금주 조회
     * 계좌의 예금주를 조회합니다.
     */
    get: operations['getPlatformAccountHolder'];
  };
  '/identity-verifications/{identityVerificationId}': {
    /**
     * 본인인증 단건 조회
     *
     * @description 본인인증 단건 조회
     * 주어진 아이디에 대응되는 본인인증 내역을 조회합니다.
     */
    get: operations['getIdentityVerification'];
  };
  '/identity-verifications/{identityVerificationId}/send': {
    /**
     * 본인인증 요청 전송
     *
     * @description 본인인증 요청 전송
     * SMS 또는 APP 방식을 이용하여 본인인증 요청을 전송합니다.
     */
    post: operations['sendIdentityVerification'];
  };
  '/identity-verifications/{identityVerificationId}/confirm': {
    /**
     * 본인인증 확인
     *
     * @description 본인인증 확인
     * 요청된 본인인증에 대한 확인을 진행합니다.
     */
    post: operations['confirmIdentityVerification'];
  };
  '/identity-verifications/{identityVerificationId}/resend': {
    /**
     * SMS 본인인증 요청 재전송
     *
     * @description SMS 본인인증 요청 재전송
     * SMS 본인인증 요청을 재전송합니다.
     */
    post: operations['resendIdentityVerification'];
  };
  '/payments/{paymentId}/pre-register': {
    /**
     * 결제 정보 사전 등록
     *
     * @description 결제 정보 사전 등록
     * 결제 정보를 사전 등록합니다.
     */
    post: operations['preRegisterPayment'];
  };
  '/billing-keys/{billingKey}': {
    /**
     * 빌링키 단건 조회
     *
     * @description 빌링키 단건 조회
     * 주어진 빌링키에 대응되는 빌링키 정보를 조회합니다.
     */
    get: operations['getBillingKeyInfo'];
    /**
     * 빌링키 삭제
     *
     * @description 빌링키 삭제
     * 빌링키를 삭제합니다.
     */
    delete: operations['deleteBillingKey'];
  };
  '/payments/{paymentId}/cash-receipt': {
    /**
     * 현금 영수증 단건 조회
     *
     * @description 현금 영수증 단건 조회
     * 주어진 결제 아이디에 대응되는 현금 영수증 내역을 조회합니다.
     */
    get: operations['getCashReceiptByPaymentId'];
  };
  '/payments/{paymentId}': {
    /**
     * 결제 단건 조회
     *
     * @description 결제 단건 조회
     * 주어진 아이디에 대응되는 결제 건을 조회합니다.
     */
    get: operations['getPayment'];
  };
  '/payments': {
    /**
     * 결제 다건 조회(페이지 기반)
     *
     * @description 결제 다건 조회(페이지 기반)
     * 주어진 조건에 맞는 결제 건들을 페이지 기반으로 조회합니다.
     */
    get: operations['getPayments'];
  };
  '/payments-by-cursor': {
    /**
     * 결제 대용량 다건 조회(커서 기반)
     *
     * @description 결제 대용량 다건 조회(커서 기반)
     * 기간 내 모든 결제 건을 커서 기반으로 조회합니다. 결제 건의 생성일시를 기준으로 주어진 기간 내 존재하는 모든 결제 건이 조회됩니다.
     */
    get: operations['getAllPaymentsByCursor'];
  };
  '/payment-schedules/{paymentScheduleId}': {
    /**
     * 결제 예약 단건 조회
     *
     * @description 결제 예약 단건 조회
     * 주어진 아이디에 대응되는 결제 예약 건을 조회합니다.
     */
    get: operations['getPaymentSchedule'];
  };
  '/payment-schedules': {
    /**
     * 결제 예약 다건 조회
     *
     * @description 결제 예약 다건 조회
     * 주어진 조건에 맞는 결제 예약 건들을 조회합니다.
     */
    get: operations['getPaymentSchedules'];
    /**
     * 결제 예약 취소
     *
     * @description 결제 예약 취소
     * 결제 예약 건을 취소합니다.
     */
    delete: operations['revokePaymentSchedule'];
  };
  '/payments/{paymentId}/schedule': {
    /**
     * 결제 예약
     *
     * @description 결제 예약
     * 결제를 예약합니다.
     */
    post: operations['createPaymentSchedule'];
  };
  '/payments/{paymentId}/cancel': {
    /**
     * 결제 취소
     *
     * @description 결제 취소
     * 결제 취소를 요청합니다.
     */
    post: operations['cancelPayment'];
  };
  '/payments/{paymentId}/billing-key': {
    /**
     * 빌링키 결제
     *
     * @description 빌링키 결제
     * 빌링키로 결제를 진행합니다.
     */
    post: operations['PayWithBillingKey'];
  };
  '/payments/{paymentId}/instant': {
    /**
     * 수기 결제
     *
     * @description 수기 결제
     * 수기 결제를 진행합니다.
     */
    post: operations['PayInstantly'];
  };
  '/billing-keys': {
    /**
     * 빌링키 발급
     *
     * @description 빌링키 발급
     * 빌링키 발급을 요청합니다.
     */
    post: operations['issueBillingKey'];
  };
  '/cash-receipts': {
    /**
     * 현금 영수증 수동 발급
     *
     * @description 현금 영수증 수동 발급
     * 현금 영수증 발급을 요청합니다.
     */
    post: operations['issueCashReceipt'];
  };
  '/payments/{paymentId}/cash-receipt/cancel': {
    /**
     * 현금 영수증 취소
     *
     * @description 현금 영수증 취소
     * 현금 영수증 취소를 요청합니다.
     */
    post: operations['cancelCashReceiptByPaymentId'];
  };
  '/payments/{paymentId}/virtual-account/close': {
    /**
     * 가상계좌 말소
     *
     * @description 가상계좌 말소
     * 발급된 가상계좌를 말소합니다.
     */
    post: operations['closeVirtualAccount'];
  };
  '/payments/{paymentId}/escrow/logistics': {
    /**
     * 에스크로 배송 정보 등록
     *
     * @description 에스크로 배송 정보 등록
     * 에스크로 배송 정보를 등록합니다.
     */
    post: operations['applyEscrowLogistics'];
    /**
     * 에스크로 배송 정보 수정
     *
     * @description 에스크로 배송 정보 수정
     * 에스크로 배송 정보를 수정합니다.
     */
    patch: operations['modifyEscrowLogistics'];
  };
  '/payments/{paymentId}/escrow/complete': {
    /**
     * 에스크로 구매 확정
     *
     * @description 에스크로 구매 확정
     * 에스크로 결제를 구매 확정 처리합니다
     */
    post: operations['confirmEscrow'];
  };
  '/payments/{paymentId}/resend-webhook': {
    /**
     * 웹훅 재발송
     *
     * @description 웹훅 재발송
     * 웹훅을 재발송합니다.
     */
    post: operations['resendWebhook'];
  };
  '/channels': {};
  '/analytics/charts/payment': {
    /** @description 가맹점의 결제 현황을 조회합니다. */
    get: operations['getAnalyticsPaymentChart'];
  };
  '/analytics/charts/payment-insight': {
    /** @description 가맹점의 결제 현황 인사이트를 조회합니다. */
    get: operations['getAnalyticsPaymentChartInsight'];
  };
  '/analytics/charts/average-amount': {
    /** @description 가맹점의 평균 거래액 현황을 조회합니다. */
    get: operations['getAverageAmountChart'];
  };
  '/analytics/charts/payment-method': {
    /** @description 가맹점의 결제수단 현황을 조회합니다. */
    get: operations['getPaymentMethodChart'];
  };
  '/analytics/charts/payment-method-trend': {
    /** @description 가맹점의 결제수단 트렌드를 조회합니다. */
    get: operations['getPaymentMethodTrendChart'];
  };
  '/analytics/charts/card': {
    /** @description 가맹점의 카드결제 현황을 조회합니다. */
    get: operations['getAnalyticsCardChart'];
  };
  '/analytics/charts/card-company': {
    /** @description 가맹점의 카드사별 결제 현황을 조회합니다. */
    get: operations['getAnalyticsCardCompanyChart'];
  };
  '/analytics/charts/easy-pay': {
    /** @description 가맹점의 간편결제 현황을 조회합니다. */
    get: operations['getAnalyticsEasyPayChart'];
  };
  '/analytics/charts/easy-pay-provider': {
    /** @description 가맹점의 간편결제사별 결제 현황을 조회합니다. */
    get: operations['getAnalyticsEasyPayProviderChart'];
  };
  '/analytics/charts/pg-company': {
    /** @description 가맹점의 결제대행사 현황을 조회합니다. */
    get: operations['getPgCompanyChart'];
  };
  '/analytics/charts/pg-company-trend': {
    /** @description 가맹점의 결제대행사별 거래 추이를 조회합니다. */
    get: operations['getPgCompanyTrendChart'];
  };
  '/analytics/overseas-payment-usage': {
    /** @description 가맹점의 해외 결제 사용 여부를 조회합니다. */
    get: operations['getAnalyticsOverseasPaymentUsage'];
  };
  '/analytics/cancellation-rate': {
    /** @description 가맹점의 환불율을 조회합니다. */
    get: operations['getAnalyticsCancellationRate'];
  };
  '/analytics/charts/payment-status': {
    /** @description 가맹점의 결제상태 이력 집계를 조회합니다. */
    get: operations['getPaymentStatusChart'];
  };
  '/analytics/charts/payment-status/by-method': {
    /** @description 가맹점의 결제수단별 결제전환율을 조회합니다. */
    get: operations['getPaymentStatusByPaymentMethodChart'];
  };
  '/analytics/charts/payment-status/by-pg-company': {
    /** @description 가맹점의 PG사별 결제전환율을 조회합니다. */
    get: operations['getPaymentStatusByPgCompanyChart'];
  };
  '/analytics/charts/payment-status/by-payment-client': {
    /** @description 가맹점의 결제환경별 결제전환율을 조회합니다. */
    get: operations['getPaymentStatusByPaymentClientChart'];
  };
  '/b2b-preview/member-companies/{brn}': {
    /**
     * 연동 사업자 조회
     *
     * @description 연동 사업자 조회
     * 포트원 B2B 서비스에 연동된 사업자를 조회합니다.
     */
    get: operations['getB2bMemberCompany'];
  };
  '/b2b-preview/member-companies': {
    /**
     * 사업자 연동
     *
     * @description 사업자 연동
     * 포트원 B2B 서비스에 사업자를 연동합니다.
     */
    post: operations['registerB2bMemberCompany'];
  };
  '/b2b-preview/member-companies/{brn}/contacts/{contactId}': {
    /**
     * 담당자 조회
     *
     * @description 담당자 조회
     * 연동 사업자에 등록된 담당자를 조회합니다.
     */
    get: operations['getB2bMemberCompanyContact'];
  };
  '/b2b-preview/member-companies/{brn}/certificate/registration-url': {
    /**
     * 사업자 인증서 등록 URL 조회
     *
     * @description 사업자 인증서 등록 URL 조회
     * 연동 사업자의 인증서를 등록하기 위한 URL을 조회합니다.
     */
    get: operations['getB2bCertificateRegistrationUrl'];
  };
  '/b2b-preview/member-companies/{brn}/certificate': {
    /**
     * 인증서 조회
     *
     * @description 인증서 조회
     * 연동 사업자의 인증서를 조회합니다.
     */
    get: operations['getB2bCertificate'];
  };
  '/b2b-preview/member-companies/contacts/id-existence': {
    /**
     * 담당자 ID 존재 여부 확인
     *
     * @description 담당자 ID 존재 여부 확인
     * 담당자 ID가 이미 사용중인지 확인합니다.
     */
    get: operations['getB2bContactIdExistence'];
  };
  '/b2b-preview/bank-accounts/{bank}/{accountNumber}/holder': {
    /**
     * 예금주 조회
     *
     * @description 예금주 조회
     * 원하는 계좌의 예금주를 조회합니다.
     */
    get: operations['getB2bBankAccountHolder'];
  };
  '/b2b-preview/company/{brn}/state': {
    /**
     * 사업자 상태 조회
     *
     * @description 사업자 상태 조회
     * 원하는 사업자의 상태를 조회합니다. 포트원 B2B 서비스에 연동 및 등록되지 않은 사업자도 조회 가능합니다.
     */
    get: operations['getB2bCompanyState'];
  };
  '/b2b-preview/tax-invoices/request-reverse-issuance': {
    /**
     * 세금계산서 역발행 요청
     *
     * @description 세금계산서 역발행 요청
     * 공급자에게 세금계산서 역발행을 요청합니다.
     */
    post: operations['requestB2bTaxInvoiceReverseIssuance'];
  };
  '/b2b-preview/tax-invoices/{documentKey}': {
    /**
     * 세금 계산서 조회
     *
     * @description 세금 계산서 조회
     * 등록된 세금 계산서를 공급자 혹은 공급받는자 문서번호로 조회합니다.
     */
    get: operations['getB2bTaxInvoice'];
    /**
     * 세금계산서 삭제
     *
     * @description 세금계산서 삭제
     * 세금계산서를 삭제합니다.
     */
    delete: operations['deleteB2bTaxInvoice'];
  };
  '/b2b-preview/tax-invoices/issue': {
    /**
     * 세금계산서 발행
     *
     * @description 세금계산서 발행
     * 역발행의 경우 역발행요청(REQUESTED) 상태, 정발행의 경우 임시저장(REGISTERED) 상태의 세금계산서를 발행합니다.
     */
    post: operations['issueB2bTaxInvoice'];
  };
  '/b2b-preview/tax-invoices/cancel-request': {
    /**
     * 세금계산서 역발행 요청 취소
     *
     * @description 세금계산서 역발행 요청 취소
     * 공급받는자가 공급자에게 세금계산서 역발행 요청한 것을 취소합니다.
     */
    post: operations['cancelB2bTaxInvoiceRequest'];
  };
  '/b2b-preview/tax-invoices/cancel-issuance': {
    /**
     * 세금계산서 역발행 취소
     *
     * @description 세금계산서 역발행 취소
     * 공급자가 발행 완료한 세금계산서를 국세청 전송 전 취소합니다.
     */
    post: operations['cancelB2bTaxInvoiceIssuance'];
  };
  '/b2b-preview/tax-invoices/refuse-request': {
    /**
     * 세금계산서 역발행 요청 거부
     *
     * @description 세금계산서 역발행 요청 거부
     * 공급자가 공급받는자로부터 요청받은 세금계산서 역발행 건을 거부합니다.
     */
    post: operations['refuseB2bTaxInvoiceRequest'];
  };
  '/b2b-preview/tax-invoices': {
    /**
     * 세금 계산서 다건조회
     *
     * @description 세금 계산서 다건조회
     * 조회 기간 내 등록된 세금 계산서를 다건 조회합니다.
     */
    get: operations['getB2bTaxInvoices'];
  };
  '/b2b-preview/tax-invoices/{documentKey}/popup-url': {
    /**
     * 세금 계산서 팝업 URL 조회
     *
     * @description 세금 계산서 팝업 URL 조회
     * 등록된 세금 계산서 팝업 URL을 공급자 혹은 공급받는자 문서번호로 조회합니다.
     */
    get: operations['getB2bTaxInvoicePopupUrl'];
  };
  '/b2b-preview/tax-invoices/{documentKey}/print-url': {
    /**
     * 세금 계산서 프린트 URL 조회
     *
     * @description 세금 계산서 프린트 URL 조회
     * 등록된 세금 계산서 프린트 URL을 공급자 혹은 공급받는자 문서번호로 조회합니다.
     */
    get: operations['getB2bTaxInvoicePrintUrl'];
  };
  '/b2b-preview/tax-invoices/{documentKey}/pdf-download-url': {
    /**
     * 세금 계산서 PDF 다운로드 URL 조회
     *
     * @description 세금 계산서 PDF 다운로드 URL 조회
     * 등록된 세금 계산서 PDF 다운로드 URL을 공급자 혹은 공급받는자 문서번호로 조회합니다.
     */
    get: operations['getB2bTaxInvoicePdfDownloadUrl'];
  };
  '/b2b-preview/tax-invoices/register': {
    /**
     * 세금계산서 임시 저장
     *
     * @description 세금계산서 임시 저장
     * 세금계산서 임시 저장을 요청합니다.
     */
    post: operations['requestB2bTaxInvoiceRegister'];
  };
  '/b2b-preview/tax-invoices/request': {
    /**
     * 세금계산서 역발행 요청
     *
     * @description 세금계산서 역발행 요청
     * 임시저장(REGISTERED) 상태의 역발행 세금계산서를 공급자에게 발행 요청합니다.
     */
    post: operations['requestB2bTaxInvoice'];
  };
  '/kakaopay/payment/order': {
    /**
     * 카카오페이 주문 조회 API
     *
     * @description 카카오페이 주문 조회 API
     * 주어진 아이디에 대응되는 카카오페이 주문 건을 조회합니다.
     * 해당 API 사용이 필요한 경우 포트원 기술지원팀으로 문의 주시길 바랍니다.
     */
    get: operations['GetKakaopayPaymentOrder'];
  };
  '/payments/{paymentId}/register-store-receipt': {
    /**
     * 영수증 내 하위 상점 거래 등록 API
     *
     * @description 영수증 내 하위 상점 거래 등록 API
     * 결제 내역 매출전표에 하위 상점의 거래를 등록할 수 있는 API입니다.
     * 지원되는 PG사:
     * KG이니시스(이용 전 콘솔 -&gt; 결제연동 탭에서 INIApi Key 등록 필요)
     */
    post: operations['registerStoreReceipt'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * 분리 형식 주소
     * @description 분리 형식 주소
     * oneLine(한 줄 형식 주소) 필드는 항상 존재합니다.
     */
    Address:
      | components['schemas']['OneLineAddress']
      | components['schemas']['SeparatedAddress'];
    /**
     * 결제가 이미 완료된 경우
     * @description 결제가 이미 완료된 경우
     */
    AlreadyPaidError: {
      type: string;
      message?: string;
    };
    /**
     * 결제가 이미 완료되었거나 대기중인 경우
     * @description 결제가 이미 완료되었거나 대기중인 경우
     */
    AlreadyPaidOrWaitingError: {
      type: string;
      message?: string;
    };
    Analytics: Record<string, never>;
    /**
     * 고객사의 평균 거래액 현황 조회 응답
     * @description 고객사의 평균 거래액 현황 조회 응답
     */
    AnalyticsAverageAmountChart: {
      stats: components['schemas']['AnalyticsAverageAmountChartStat'][];
      summary: components['schemas']['AnalyticsAverageAmountChartSummary'];
    };
    /** @description 특정 시점의 건별 평균 거래액, 고객 당 평균 거래액을 나타냅니다. */
    AnalyticsAverageAmountChartStat: {
      /**
       * 시점
       * Format: date-time
       */
      timestamp: string;
      /**
       * 건별 평균 거래액
       * Format: int64
       */
      paymentAverageAmount: number;
      /**
       * 고객 당 평균 거래액
       * Format: int64
       */
      customerAverageAmount: number;
    };
    /** @description 전체 구간의 건별 평균 거래액, 고객 당 평균 거래액을 나타냅니다. */
    AnalyticsAverageAmountChartSummary: {
      /**
       * 건별 평균 거래액
       * Format: int64
       */
      paymentAverageAmount: number;
      /**
       * 고객 당 평균 거래액
       * Format: int64
       */
      customerAverageAmount: number;
    };
    /**
     * 고객사의 환불율 정보
     * @description 고객사의 환불율 정보
     */
    AnalyticsCancellationRate: {
      /** Format: double */
      cancellationRate: number;
    };
    /**
     * 고객사의 카드결제 현황 차트 정보
     * @description 고객사의 카드결제 현황 차트 정보
     */
    AnalyticsCardChart: {
      stats: components['schemas']['AnalyticsCardChartStat'][];
    };
    /** @description 특정 시점의 카드결제 거래 건 수와 금액을 나타냅니다. */
    AnalyticsCardChartStat: {
      /**
       * 시점
       * Format: date-time
       */
      timestamp: string;
      /**
       * 거래액
       * Format: int64
       */
      amount: number;
      /**
       * 거래 건수
       * Format: int64
       */
      count: number;
    };
    /**
     * 고객사의 카드사별 결제 현황 조회 응답
     * @description 고객사의 카드사별 결제 현황 조회 응답
     */
    AnalyticsCardCompanyChart: {
      stats: components['schemas']['AnalyticsCardCompanyChartStat'][];
      remainderStats: components['schemas']['AnalyticsCardCompanyChartRemainderStat'][];
      summary: components['schemas']['AnalyticsCardCompanyChartSummary'];
    };
    /** @description 특정 시점의 나머지 카드사들의 결제금액, 결제 건수를 나타냅니다. */
    AnalyticsCardCompanyChartRemainderStat: {
      /**
       * 시점
       * Format: date-time
       */
      timestamp: string;
      /**
       * 결제금액
       * Format: int64
       */
      amount: number;
      /**
       * 결제 건수
       * Format: int64
       */
      count: number;
    };
    /** @description 특정 시점의 카드사 별 결제금액, 결제 건수를 나타냅니다. */
    AnalyticsCardCompanyChartStat: {
      /**
       * 시점
       * Format: date-time
       */
      timestamp: string;
      /** 카드사 */
      cardCompany: components['schemas']['CardCompany'];
      /**
       * 결제금액
       * Format: int64
       */
      amount: number;
      /**
       * 결제 건수
       * Format: int64
       */
      count: number;
    };
    /** @description 결제금액, 결제 건수의 총합을 나타냅니다. */
    AnalyticsCardCompanyChartSummary: {
      /**
       * 결제금액 합
       * Format: int64
       */
      totalAmount: number;
      /**
       * 결제 건수 합
       * Format: int64
       */
      totalCount: number;
    };
    /**
     * 고객사의 간편결제 현황 차트 정보
     * @description 고객사의 간편결제 현황 차트 정보
     */
    AnalyticsEasyPayChart: {
      stats: components['schemas']['AnalyticsEasyPayChartStat'][];
    };
    /** @description 특정 시점의 간편결제 거래 건수와 금액을 나타냅니다. */
    AnalyticsEasyPayChartStat: {
      /**
       * 시점
       * Format: date-time
       */
      timestamp: string;
      /**
       * 거래액
       * Format: int64
       */
      amount: number;
      /**
       * 거래 건수
       * Format: int64
       */
      count: number;
    };
    /**
     * 고객사의 간편결제사별 결제 현황 차트 정보
     * @description 고객사의 간편결제사별 결제 현황 차트 정보
     */
    AnalyticsEasyPayProviderChart: {
      stats: components['schemas']['AnalyticsEasyPayProviderChartStat'][];
      remainderStats: components['schemas']['AnalyticsEasyPayProviderChartRemainderStat'][];
      summary: components['schemas']['AnalyticsEasyPayProviderChartSummary'];
    };
    /** @description 특정 시점의 나머지 간편결제사들의 결제금액, 결제 건수를 나타냅니다. */
    AnalyticsEasyPayProviderChartRemainderStat: {
      /**
       * 시점
       * Format: date-time
       */
      timestamp: string;
      /**
       * 결제금액
       * Format: int64
       */
      amount: number;
      /**
       * 결제 건수
       * Format: int64
       */
      count: number;
    };
    /** @description 특정 시점의 간편결제사별 결제금액, 결제 건수를 나타냅니다. */
    AnalyticsEasyPayProviderChartStat: {
      /**
       * 시점
       * Format: date-time
       */
      timestamp: string;
      /** 간편결제사 */
      easyPayProvider: components['schemas']['EasyPayProvider'];
      /**
       * 결제금액
       * Format: int64
       */
      amount: number;
      /**
       * 결제 건수
       * Format: int64
       */
      count: number;
    };
    /** @description 결제금액, 결제 건수의 총합을 나타냅니다. */
    AnalyticsEasyPayProviderChartSummary: {
      /**
       * 결제금액의 합
       * Format: int64
       */
      totalAmount: number;
      /**
       * 결제 건수의 합
       * Format: int64
       */
      totalCount: number;
    };
    /**
     * 고객사의 해외 결제 사용 여부
     * @description 고객사의 해외 결제 사용 여부
     */
    AnalyticsOverseasPaymentUsage: {
      isUsing: boolean;
    };
    /**
     * 고객사의 결제 현황 차트 정보
     * @description 고객사의 결제 현황 차트 정보
     */
    AnalyticsPaymentChart: {
      stats: components['schemas']['AnalyticsPaymentChartStat'][];
    };
    /**
     * 고객사의 결제 현황 인사이트 정보
     * @description 고객사의 결제 현황 인사이트 정보
     */
    AnalyticsPaymentChartInsight: {
      /**
       * 월간 최고 거래액 발생일
       * Format: int64
       */
      highestDateInMonth?: number;
      /**
       * 월간 최저 거래액 발생일
       * Format: int64
       */
      lowestDateInMonth?: number;
      /** 주간 최고 거래액 발생 요일 */
      highestDayInWeek?: components['schemas']['DayOfWeek'];
      /** 주간 최저 거래액 발생 요일 */
      lowestDayInWeek?: components['schemas']['DayOfWeek'];
      /**
       * 일간 최고 거래액 발생 시간
       * Format: int64
       */
      highestHourInDay: number;
      /**
       * 일간 최저 거래액 발생 시간
       * Format: int64
       */
      lowestHourInDay: number;
    };
    /** @description 특정 시점의 거래 건 수와 금액을 나타냅니다. */
    AnalyticsPaymentChartStat: {
      /**
       * 시점
       * Format: date-time
       */
      timestamp: string;
      /**
       * 거래액
       * Format: int64
       */
      amount: number;
      /**
       * 거래 건수
       * Format: int64
       */
      count: number;
    };
    /**
     * 고객사의 결제수단 현황 차트 정보
     * @description 고객사의 결제수단 현황 차트 정보
     */
    AnalyticsPaymentMethodChart: {
      stats: components['schemas']['AnalyticsPaymentMethodChartStat'][];
    };
    /** @description 결제수단별 결제금액, 결제 건수를 나타냅니다. */
    AnalyticsPaymentMethodChartStat: {
      /** 결제수단 */
      paymentMethod?: components['schemas']['PaymentMethodType'];
      /**
       * 결제수단별 결제금액
       * Format: int64
       */
      amount: number;
      /**
       * 결제수단별 결제 건수
       * Format: int64
       */
      count: number;
    };
    /**
     * 고객사의 결제수단 트렌드 차트 정보
     * @description 고객사의 결제수단 트렌드 차트 정보
     */
    AnalyticsPaymentMethodTrendChart: {
      /**
       * 결제수단별 결제금액, 결제 건수 데이터
       * @description (timestamp, paymentMethod) 를 기준으로 오름차순 정렬되어 주어집니다.
       */
      stats: components['schemas']['AnalyticsPaymentMethodTrendChartStat'][];
    };
    /** @description 특정 시점의 결제수단별 결제금액, 결제 건수를 나타냅니다. */
    AnalyticsPaymentMethodTrendChartStat: {
      /**
       * 시점
       * Format: date-time
       */
      timestamp: string;
      /** 결제수단 */
      paymentMethod?: components['schemas']['PaymentMethodType'];
      /**
       * 결제금액
       * Format: int64
       */
      amount: number;
      /**
       * 결제 건수
       * Format: int64
       */
      count: number;
    };
    /**
     * 고객사의 결제 환경 별 결제 상태 차트 정보
     * @description 고객사의 결제 환경 별 결제 상태 차트 정보
     */
    AnalyticsPaymentStatusByPaymentClientChart: {
      stats: components['schemas']['AnalyticsPaymentStatusByPaymentClientChartStat'][];
    };
    /** @description 고객사의 결제 환경 별 결제 상태 차트 정보 */
    AnalyticsPaymentStatusByPaymentClientChartStat: {
      /** 결제가 발생한 클라이언트 환경 */
      paymentClientType: components['schemas']['PaymentClientType'];
      /** 결제 건 상태 */
      paymentStatus: components['schemas']['PaymentStatus'];
      /**
       * 거래액
       * Format: int64
       */
      amount: number;
      /**
       * 거래 건수
       * Format: int64
       */
      count: number;
    };
    /**
     * 고객사의 결제 수단 별 결제 상태 차트 정보
     * @description 고객사의 결제 수단 별 결제 상태 차트 정보
     */
    AnalyticsPaymentStatusByPaymentMethodChart: {
      stats: components['schemas']['AnalyticsPaymentStatusByPaymentMethodChartStat'][];
    };
    /** @description 각 결제수단, 상태 별 건수와 금액을 나타냅니다. */
    AnalyticsPaymentStatusByPaymentMethodChartStat: {
      /** 결제수단 */
      paymentMethod?: components['schemas']['PaymentMethodType'];
      /** 결제 건 상태 */
      paymentStatus: components['schemas']['PaymentStatus'];
      /**
       * 거래액
       * Format: int64
       */
      amount: number;
      /**
       * 거래 건수
       * Format: int64
       */
      count: number;
    };
    /**
     * 고객사의 PG사 별 결제 상태 차트 정보
     * @description 고객사의 PG사 별 결제 상태 차트 정보
     */
    AnalyticsPaymentStatusByPgCompanyChart: {
      stats: components['schemas']['AnalyticsPaymentStatusByPgCompanyChartStat'][];
    };
    /** @description 각 상태의 건수와 금액, 사분위수를 나타냅니다. */
    AnalyticsPaymentStatusByPgCompanyChartStat: {
      /** PG사 */
      pgCompany: components['schemas']['PgCompany'];
      /** 결제 건 상태 */
      paymentStatus: components['schemas']['PaymentStatus'];
      /**
       * 거래액
       * Format: int64
       */
      amount: number;
      /**
       * 거래 건수
       * Format: int64
       */
      count: number;
    };
    /**
     * 고객사의 결제 상태 차트 정보
     * @description 고객사의 결제 상태 차트 정보
     */
    AnalyticsPaymentStatusChart: {
      stats: components['schemas']['AnalyticsPaymentStatusChartStat'][];
    };
    /** @description 각 상태의 건수와 금액, 사분위수를 나타냅니다. */
    AnalyticsPaymentStatusChartStat: {
      /** 결제 건 상태 */
      paymentStatus: components['schemas']['PaymentStatus'];
      /**
       * 거래액
       * Format: int64
       */
      amount: number;
      /**
       * 거래 건수
       * Format: int64
       */
      count: number;
      /**
       * 해당 상태 비율
       * Format: int64
       */
      averageRatio: number;
      /**
       * 1 사분위수
       * Format: int64
       */
      firstQuantile: number;
      /**
       * 중앙값
       * Format: int64
       */
      median: number;
      /**
       * 3 사분위수
       * Format: int64
       */
      thirdQuantile: number;
    };
    /**
     * 가맹점의 결제대행사 현황 차트 정보
     * @description 가맹점의 결제대행사 현황 차트 정보
     */
    AnalyticsPgCompanyChart: {
      stats: components['schemas']['AnalyticsPgCompanyChartStat'][];
    };
    /** @description 결제대행사별 결제금액, 결제 건수를 나타냅니다. */
    AnalyticsPgCompanyChartStat: {
      /** 결제대행사 */
      pgCompany: components['schemas']['PgCompany'];
      /**
       * 결제대행사별 결제금액
       * Format: int64
       */
      amount: number;
      /**
       * 결제대행사별 결제 건수
       * Format: int64
       */
      count: number;
    };
    /**
     * 가맹점의 결제대행사별 거래 추이 차트 정보
     * @description 가맹점의 결제대행사별 거래 추이 차트 정보
     */
    AnalyticsPgCompanyTrendChart: {
      stats: components['schemas']['AnalyticsPgCompanyTrendChartStat'][];
    };
    /** @description 특정 시점의 결제대행사 별 결제금액, 결제 건수를 나타냅니다. */
    AnalyticsPgCompanyTrendChartStat: {
      /**
       * 시점
       * Format: date-time
       */
      timestamp: string;
      /** 결제대행사 */
      pgCompany: components['schemas']['PgCompany'];
      /**
       * 결제금액
       * Format: int64
       */
      amount: number;
      /**
       * 결제 건수
       * Format: int64
       */
      count: number;
    };
    /**
     * 조회 시간 단위
     * @description 조회 시간 단위
     * 하나의 단위 필드만 선택하여 입력합니다.
     */
    AnalyticsTimeGranularity: {
      minute?: components['schemas']['AnalyticsTimeGranularityMinute'];
      hour?: components['schemas']['AnalyticsTimeGranularityHour'];
      day?: components['schemas']['AnalyticsTimeGranularityDay'];
      week?: components['schemas']['AnalyticsTimeGranularityWeek'];
      month?: components['schemas']['AnalyticsTimeGranularityMonth'];
    };
    /**
     * 일
     * @description 일
     */
    AnalyticsTimeGranularityDay: {
      /** Format: int32 */
      timezoneHourOffset: number;
    };
    /**
     * 시간
     * @description 시간
     */
    AnalyticsTimeGranularityHour: Record<string, never>;
    /**
     * 분
     * @description 분
     */
    AnalyticsTimeGranularityMinute: Record<string, never>;
    /**
     * 월
     * @description 월
     */
    AnalyticsTimeGranularityMonth: {
      /** Format: int32 */
      timezoneHourOffset: number;
    };
    /**
     * 주
     * @description 주
     */
    AnalyticsTimeGranularityWeek: {
      /** Format: int32 */
      timezoneHourOffset: number;
    };
    ApplyEscrowLogisticsError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PaymentNotFoundError']
      | components['schemas']['PaymentNotPaidError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 에스크로 배송 정보 등록 성공 응답
     * @description 에스크로 배송 정보 등록 성공 응답
     */
    ApplyEscrowLogisticsResponse: {
      /** 송장 번호 */
      invoiceNumber: string;
      /**
       * 발송 시점
       * Format: date-time
       */
      sentAt: string;
      /**
       * 에스크로 정보 등록 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    /**
     * 파트너 상태를 승인 완료로 변경하기 위한 입력 정보
     * @description 파트너 상태를 승인 완료로 변경하기 위한 입력 정보
     */
    ApprovePlatformPartnerBody: {
      /** 파트너 메모. 값이 명시되지 않은 경우 업데이트하지 않습니다. */
      memo?: string;
    };
    ApprovePlatformPartnerError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformArchivedPartnerError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 승인 성공 응답
     * @description 파트너 승인 성공 응답
     */
    ApprovePlatformPartnerResponse: {
      /** 승인된 파트너 */
      partner: components['schemas']['PlatformPartner'];
    };
    ArchivePlatformAdditionalFeePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformAdditionalFeePolicyNotFoundError']
      | components['schemas']['PlatformCannotArchiveScheduledAdditionalFeePolicyError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 추가 수수료 정책 보관 성공 응답
     * @description 추가 수수료 정책 보관 성공 응답
     */
    ArchivePlatformAdditionalFeePolicyResponse: {
      /** 보관된 추가 수수료 정책 */
      additionalFeePolicy: components['schemas']['PlatformAdditionalFeePolicy'];
    };
    ArchivePlatformContractError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformCannotArchiveScheduledContractError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 계약 보관 성공 응답
     * @description 계약 보관 성공 응답
     */
    ArchivePlatformContractResponse: {
      /** 보관된 계약 */
      contract: components['schemas']['PlatformContract'];
    };
    ArchivePlatformDiscountSharePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformCannotArchiveScheduledDiscountSharePolicyError']
      | components['schemas']['PlatformDiscountSharePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 할인 분담 보관 성공 응답
     * @description 할인 분담 보관 성공 응답
     */
    ArchivePlatformDiscountSharePolicyResponse: {
      /** 보관된 할인 분담 */
      discountSharePolicy: components['schemas']['PlatformDiscountSharePolicy'];
    };
    ArchivePlatformPartnerError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformCannotArchiveScheduledPartnerError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 보관 성공 응답
     * @description 파트너 보관 성공 응답
     */
    ArchivePlatformPartnerResponse: {
      /** 보관된 파트너 */
      partner: components['schemas']['PlatformPartner'];
    };
    /**
     * 계좌가 존재하지 않는 경우
     * @description 계좌가 존재하지 않는 경우
     */
    B2bBankAccountNotFoundError: {
      type: string;
      message?: string;
    };
    B2bCertificate: {
      /**
       * 등록일시
       * Format: date-time
       */
      registeredAt: string;
      /**
       * 만료일시
       * Format: date-time
       */
      expiredAt: string;
      /** 발행자명 */
      issuerDn: string;
      /** 본인명 */
      subjectDn: string;
      /** 인증서 타입 */
      certificateType: components['schemas']['B2bCertificateType'];
      /** OID */
      oid: string;
      /** 등록 담당자 성명 */
      registrantContactName: string;
      /** 등록 담당자 ID */
      registrantContactId: string;
    };
    /**
     * 인증서 타입
     * @description 인증서 타입
     *
     * @enum {string}
     */
    B2bCertificateType: 'ETC' | 'E_TAX' | 'POP_BILL';
    /**
     * 인증서가 등록되어 있지 않은 경우
     * @description 인증서가 등록되어 있지 않은 경우
     */
    B2bCertificateUnregisteredError: {
      type: string;
      message?: string;
    };
    B2bCompanyContact: {
      /**
       * 담당자 ID
       * @description 팝빌 로그인 계정으로 사용됩니다.
       */
      id: string;
      /** 담당자 성명 */
      name: string;
      /** 담당자 핸드폰 번호 */
      phoneNumber: string;
      /** 담당자 이메일 */
      email: string;
      /**
       * 등록 일시
       * Format: date-time
       */
      registeredAt: string;
      /**
       * 관리자 여부
       * @description true일 경우 관리자, false일 경우 담당자입니다.
       */
      isManager: boolean;
    };
    B2bCompanyContactInput: {
      /**
       * 담당자 ID
       * @description 팝빌 로그인 계정으로 사용됩니다.
       */
      id: string;
      /** 비밀번호 */
      password: string;
      /** 담당자 성명 */
      name: string;
      /** 담당자 핸드폰 번호 */
      phoneNumber: string;
      /** 담당자 이메일 */
      email: string;
    };
    /**
     * 사업자가 존재하지 않는 경우
     * @description 사업자가 존재하지 않는 경우
     */
    B2bCompanyNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * 사업자 상태
     * @description 사업자 상태
     */
    B2bCompanyState: {
      /** 사업자 과세 유형 */
      taxationType?: components['schemas']['B2bCompanyStateTaxationType'];
      /**
       * 과세 유형 변경 일자
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      taxationTypeDate?: string;
      /** 사업자 영업 상태 */
      businessStatus?: components['schemas']['B2bCompanyStateBusinessStatus'];
      /**
       * 휴폐업 일자
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      closedSuspendedDate?: string;
    };
    /**
     * 영업 상태
     * @description 영업 상태
     *
     * @enum {string}
     */
    B2bCompanyStateBusinessStatus: 'CLOSED' | 'IN_BUSINESS' | 'SUSPENDED';
    /**
     * 사업자 과세 유형
     * @description 사업자 과세 유형
     *
     * @enum {string}
     */
    B2bCompanyStateTaxationType:
      | 'ASSIGNED_ID_NUMBER'
      | 'NORMAL'
      | 'SIMPLE'
      | 'SIMPLE_TAX_INVOICE_ISSUER'
      | 'TAX_FREE';
    /**
     * 담당자가 존재하지 않는 경우
     * @description 담당자가 존재하지 않는 경우
     */
    B2bContactNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * 외부 서비스에서 에러가 발생한 경우
     * @description 외부 서비스에서 에러가 발생한 경우
     */
    B2bExternalServiceError: {
      type: string;
      message: string;
    };
    /**
     * 금융기관과의 통신에 실패한 경우
     * @description 금융기관과의 통신에 실패한 경우
     */
    B2bFinancialSystemCommunicationError: {
      type: string;
      message?: string;
    };
    /**
     * 금융기관 장애
     * @description 금융기관 장애
     */
    B2bFinancialSystemFailureError: {
      type: string;
      message?: string;
    };
    /**
     * 금융기관 시스템이 점검 중인 경우
     * @description 금융기관 시스템이 점검 중인 경우
     */
    B2bFinancialSystemUnderMaintenanceError: {
      type: string;
      message?: string;
    };
    /**
     * 계좌 정보 조회가 불가능한 외화 계좌인 경우
     * @description 계좌 정보 조회가 불가능한 외화 계좌인 경우
     */
    B2bForeignExchangeAccountError: {
      type: string;
      message?: string;
    };
    B2bMemberCompany: {
      /**
       * 사업자등록번호
       * @description <ul>
       * <li>없이 숫자로만 구성됩니다.</li>
       * </ul>
       */
      brn: string;
      /** 회사명 */
      name: string;
      /** 대표자 성명 */
      ceoName: string;
      /** 회사 주소 */
      address: string;
      /** 업태 */
      businessType: string;
      /** 업종 */
      businessClass: string;
    };
    /**
     * 연동 사업자가 존재하지 않는 경우
     * @description 연동 사업자가 존재하지 않는 경우
     */
    B2bMemberCompanyNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * 세금 계산서 수정
     * @description 세금 계산서 수정
     */
    B2bModification: {
      /** 수정 사유 */
      type: components['schemas']['B2bTaxInvoiceModificationType'];
      /** 수정 대상 원본 세금계산서 국세청 승인 번호 */
      originalNtsApproveNumber: string;
    };
    /**
     * B2B 기능이 활성화되지 않은 경우
     * @description B2B 기능이 활성화되지 않은 경우
     */
    B2bNotEnabledError: {
      type: string;
      message?: string;
    };
    /**
     * 공급받는자가 존재하지 않은 경우
     * @description 공급받는자가 존재하지 않은 경우
     */
    B2bRecipientNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * 금융기관 시스템이 정기 점검 중인 경우
     * @description 금융기관 시스템이 정기 점검 중인 경우
     */
    B2bRegularMaintenanceTimeError: {
      type: string;
      message?: string;
    };
    /**
     * 조회 기준
     * @description 조회 기준
     *
     * @enum {string}
     */
    B2bSearchDateType: 'ISSUE' | 'REGISTER' | 'WRITE';
    /**
     * 공급자가 존재하지 않은 경우
     * @description 공급자가 존재하지 않은 경우
     */
    B2bSupplierNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * 정지 계좌인 경우
     * @description 정지 계좌인 경우
     */
    B2bSuspendedAccountError: {
      type: string;
      message?: string;
    };
    B2bTaxInvoice:
      | components['schemas']['B2bTaxInvoiceBeforeSending']
      | components['schemas']['B2bTaxInvoiceIssuanceCancelled']
      | components['schemas']['B2bTaxInvoiceIssued']
      | components['schemas']['B2bTaxInvoiceRegistered']
      | components['schemas']['B2bTaxInvoiceRequestCancelled']
      | components['schemas']['B2bTaxInvoiceRequestRefused']
      | components['schemas']['B2bTaxInvoiceRequested']
      | components['schemas']['B2bTaxInvoiceSending']
      | components['schemas']['B2bTaxInvoiceSendingCompleted']
      | components['schemas']['B2bTaxInvoiceSendingFailed']
      | components['schemas']['B2bTaxInvoiceWaitingSending'];
    /**
     * 추가 담당자
     * @description 추가 담당자
     */
    B2bTaxInvoiceAdditionalContact: {
      /**
       * 성명
       * @description 최대 100자
       */
      name?: string;
      /** 이메일 */
      email: string;
    };
    B2bTaxInvoiceBeforeSending: {
      /** 세금계산서 상태 */
      status: string;
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 책번호 - 권
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookVolume?: number;
      /**
       * 책번호 - 호
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks: string[];
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /** 문자 전송 여부 */
      sendSms: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
      /**
       * 발행 일시
       * Format: date-time
       */
      issuedAt: string;
      /**
       * 국세청 승인번호
       * @description 세금계산서 발행(전자서명) 시점에 자동으로 부여
       */
      ntsApproveNumber: string;
    };
    B2bTaxInvoiceCompany: {
      /**
       * 사업자등록번호
       * @description <ul>
       * <li>를 제외한 10자리</li>
       * </ul>
       */
      brn: string;
      /**
       * 종사업자 식별 번호
       * @description 4자리 고정
       */
      taxRegistrationId?: string;
      /**
       * 상호명
       * @description 최대 200자
       */
      name?: string;
      /**
       * 대표자 성명
       * @description 최대 100자
       */
      ceoName?: string;
      /**
       * 주소
       * @description 최대 300자
       */
      address?: string;
      /**
       * 업태
       * @description 최대 100자
       */
      businessType?: string;
      /**
       * 종목
       * @description 최대 100자
       */
      businessClass?: string;
      /** 담당자 */
      contact?: components['schemas']['B2bTaxInvoiceContact'];
    };
    /**
     * 세금계산서 담당자
     * @description 세금계산서 담당자
     */
    B2bTaxInvoiceContact: {
      /** 성명 */
      name?: string;
      /** 부서 */
      department?: string;
      /** 전화번호 */
      phoneNumber?: string;
      /** 휴대전화번호 */
      mobilePhoneNumber?: string;
      /** 이메일 */
      email?: string;
    };
    /**
     * 문서번호 유형
     * @description 문서번호 유형
     *
     * @enum {string}
     */
    B2bTaxInvoiceDocumentKeyType: 'RECIPIENT' | 'SUPPLIER';
    /**
     * 세금계산서 생성 요청 정보
     * @description 세금계산서 생성 요청 정보
     */
    B2bTaxInvoiceInput: {
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 권
       * Format: int32
       */
      bookVolume?: number;
      /**
       * 호
       * Format: int32
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks?: string[];
      /**
       * 공급자 문서번호
       * @description 영문 대소문자, 숫자, 특수문자('-','_')만 이용 가능
       */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /**
       * 공급받는자 문서번호
       * @description 영문 대소문자, 숫자, 특수문자('-','_')만 이용 가능
       */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /**
       * 문자 전송 여부
       * @description 공급자 담당자 휴대폰번호 {supplier.contact.mobile_phone_number} 값으로 문자 전송 전송시 포인트 차감되며, 실패시 환불 처리 기본값은 false
       */
      sendSms?: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items?: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts?: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
    };
    B2bTaxInvoiceIssuanceCancelled: {
      /** 세금계산서 상태 */
      status: string;
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 책번호 - 권
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookVolume?: number;
      /**
       * 책번호 - 호
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks: string[];
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /** 문자 전송 여부 */
      sendSms: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
      /**
       * 발행 일시
       * Format: date-time
       */
      issuedAt: string;
      /**
       * 국세청 승인번호
       * @description 세금계산서 발행(전자서명) 시점에 자동으로 부여
       */
      ntsApproveNumber: string;
      /** 공급받는자 영업 상태 */
      recipientBusinessStatus?: components['schemas']['B2bCompanyStateBusinessStatus'];
      /**
       * 공급받는자 휴폐업일자
       * @description 상태가 CLOSED, SUSPENDED 상태인 경우에만 결과값 반환
       */
      recipientClosedSuspendedDate?: string;
    };
    B2bTaxInvoiceIssued: {
      /** 세금계산서 상태 */
      status: string;
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 책번호 - 권
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookVolume?: number;
      /**
       * 책번호 - 호
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks: string[];
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /** 문자 전송 여부 */
      sendSms: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
      /**
       * 발행 일시
       * Format: date-time
       */
      issuedAt: string;
      /**
       * 국세청 승인번호
       * @description 세금계산서 발행(전자서명) 시점에 자동으로 부여
       */
      ntsApproveNumber: string;
    };
    /**
     * 품목
     * @description 품목
     */
    B2bTaxInvoiceItem: {
      /**
       * 결제일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      purchaseDate?: string;
      /**
       * 품명
       * @description 최대 100자
       */
      name?: string;
      /**
       * 규격
       * @description 최대 100자
       */
      spec?: string;
      /**
       * 수량
       * Format: int64
       * @description 입력 범위 : -99999999.99 ~ 999999999.99, 10^-quantityScale 단위로 치환됨
       */
      quantity?: number;
      /**
       * 수량 단위
       * Format: int32
       * @description 입력 범위 : 0 ~ 2, 기본값: 0
       */
      quantityScale?: number;
      /**
       * 단가
       * Format: int64
       * @description 입력 범위 : -99999999999999.99 ~ 999999999999999.99
       */
      unitCostAmount?: number;
      /**
       * 단가 단위
       * Format: int32
       * @description 입력 범위 : 0 ~ 2, 기본값: 0
       */
      unitCostAmountScale?: number;
      /**
       * 공급가액
       * Format: int64
       */
      supplyCostAmount?: number;
      /**
       * 세액
       * Format: int64
       */
      taxAmount?: number;
      /** 비고 */
      remark?: string;
    };
    /**
     * 수정 사유
     * @description 수정 사유
     *
     * @enum {string}
     */
    B2bTaxInvoiceModificationType:
      | 'CANCELLATION_OF_CONTRACT'
      | 'CHANGE_IN_SUPPLY_COST'
      | 'CORRECTION_OF_ENTRY_ERRORS'
      | 'DUPLICATE_ISSUANCE_DUE_TO_ERROR'
      | 'POST_ISSUANCE_LOCAL_LETTER_OF_CREDIT'
      | 'RETURN';
    /**
     * 세금계산서에 공급받는자 문서 번호가 기입되지 않은 경우
     * @description 세금계산서에 공급받는자 문서 번호가 기입되지 않은 경우
     */
    B2bTaxInvoiceNoRecipientDocumentKeyError: {
      type: string;
      message?: string;
    };
    /**
     * 세금계산서에 공급자 문서 번호가 기입되지 않은 경우
     * @description 세금계산서에 공급자 문서 번호가 기입되지 않은 경우
     */
    B2bTaxInvoiceNoSupplierDocumentKeyError: {
      type: string;
      message?: string;
    };
    /**
     * 세금계산서가 삭제 가능한 상태가 아닌 경우
     * @description 세금계산서가 삭제 가능한 상태가 아닌 경우
     * 삭제 가능한 상태는 <code>REGISTERED</code>, <code>ISSUE_REFUSED</code>, <code>REQUEST_CANCELLED_BY_RECIPIENT</code>, <code>ISSUE_CANCELLED_BY_SUPPLIER</code>, <code>SENDING_FAILED</code> 입니다.
     */
    B2bTaxInvoiceNonDeletableStatusError: {
      type: string;
      message?: string;
    };
    /**
     * 세금계산서가 존재하지 않은 경우
     * @description 세금계산서가 존재하지 않은 경우
     */
    B2bTaxInvoiceNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * 세금계산서가 발행된(ISSUED) 상태가 아닌 경우
     * @description 세금계산서가 발행된(ISSUED) 상태가 아닌 경우
     */
    B2bTaxInvoiceNotIssuedStatusError: {
      type: string;
      message?: string;
    };
    /**
     * 세금계산서가 임시저장 상태가 아닌 경우
     * @description 세금계산서가 임시저장 상태가 아닌 경우
     */
    B2bTaxInvoiceNotRegisteredStatusError: {
      type: string;
      message?: string;
    };
    /**
     * 세금계산서가 역발행 대기 상태가 아닌 경우
     * @description 세금계산서가 역발행 대기 상태가 아닌 경우
     */
    B2bTaxInvoiceNotRequestedStatusError: {
      type: string;
      message?: string;
    };
    /**
     * 영수/청구
     * @description 영수/청구
     *
     * @enum {string}
     */
    B2bTaxInvoicePurposeType: 'INVOICE' | 'NONE' | 'RECEIPT';
    B2bTaxInvoiceRegistered: {
      /** 세금계산서 상태 */
      status: string;
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 책번호 - 권
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookVolume?: number;
      /**
       * 책번호 - 호
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks: string[];
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /** 문자 전송 여부 */
      sendSms: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
    };
    B2bTaxInvoiceRequestCancelled: {
      /** 세금계산서 상태 */
      status: string;
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 책번호 - 권
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookVolume?: number;
      /**
       * 책번호 - 호
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks: string[];
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /** 문자 전송 여부 */
      sendSms: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
    };
    B2bTaxInvoiceRequestRefused: {
      /** 세금계산서 상태 */
      status: string;
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 책번호 - 권
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookVolume?: number;
      /**
       * 책번호 - 호
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks: string[];
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /** 문자 전송 여부 */
      sendSms: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
    };
    B2bTaxInvoiceRequested: {
      /** 세금계산서 상태 */
      status: string;
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 책번호 - 권
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookVolume?: number;
      /**
       * 책번호 - 호
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks: string[];
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /** 문자 전송 여부 */
      sendSms: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
    };
    B2bTaxInvoiceSending: {
      /** 세금계산서 상태 */
      status: string;
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 책번호 - 권
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookVolume?: number;
      /**
       * 책번호 - 호
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks: string[];
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /** 문자 전송 여부 */
      sendSms: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
      /**
       * 발행 일시
       * Format: date-time
       */
      issuedAt: string;
      /**
       * 국세청 승인번호
       * @description 세금계산서 발행(전자서명) 시점에 자동으로 부여
       */
      ntsApproveNumber: string;
      /**
       * 국세청 전송 일시
       * Format: date-time
       */
      ntsSentAt: string;
    };
    B2bTaxInvoiceSendingCompleted: {
      /** 세금계산서 상태 */
      status: string;
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 책번호 - 권
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookVolume?: number;
      /**
       * 책번호 - 호
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks: string[];
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /** 문자 전송 여부 */
      sendSms: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
      /**
       * 발행 일시
       * Format: date-time
       */
      issuedAt: string;
      /**
       * 국세청 승인번호
       * @description 세금계산서 발행(전자서명) 시점에 자동으로 부여
       */
      ntsApproveNumber: string;
      /**
       * 국세청 전송 일시
       * Format: date-time
       */
      ntsSentAt: string;
      /** 국세청 전송 결과 */
      ntsResult?: string;
      /**
       * 국세청 결과 코드
       * @description 국세청 발급 결과 코드로 영문 3자리 + 숫자 3자리로 구성됨
       */
      ntsResultCode?: string;
      /**
       * 국세청 결과 수신 일시
       * Format: date-time
       */
      ntsResultReceivedAt: string;
    };
    B2bTaxInvoiceSendingFailed: {
      /** 세금계산서 상태 */
      status: string;
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 책번호 - 권
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookVolume?: number;
      /**
       * 책번호 - 호
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks: string[];
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /** 문자 전송 여부 */
      sendSms: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
      /**
       * 발행 일시
       * Format: date-time
       */
      issuedAt: string;
      /**
       * 국세청 승인번호
       * @description 세금계산서 발행(전자서명) 시점에 자동으로 부여
       */
      ntsApproveNumber: string;
      /**
       * 국세청 전송 일시
       * Format: date-time
       */
      ntsSentAt: string;
      /** 국세청 전송 결과 */
      ntsResult?: string;
      /**
       * 국세청 결과 코드
       * @description 국세청 발급 결과 코드로 영문 3자리 + 숫자 3자리로 구성됨
       */
      ntsResultCode?: string;
      /**
       * 국세청 결과 수신 일시
       * Format: date-time
       */
      ntsResultReceivedAt: string;
    };
    /** @enum {string} */
    B2bTaxInvoiceStatus:
      | 'BEFORE_SENDING'
      | 'ISSUANCE_CANCELLED_BY_SUPPLIER'
      | 'ISSUED'
      | 'REGISTERED'
      | 'REQUESTED'
      | 'REQUEST_CANCELLED_BY_RECIPIENT'
      | 'REQUEST_REFUSED'
      | 'SENDING'
      | 'SENDING_COMPLETED'
      | 'SENDING_FAILED'
      | 'WAITING_SENDING';
    /**
     * 세금계산서 요약
     * @description 세금계산서 요약
     */
    B2bTaxInvoiceSummary: {
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /** 공급자 사업자등록번호 */
      supplierBrn: string;
      /** 공급자 상호 */
      supplierName: string;
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급받는자 사업자등록번호 */
      recipientBrn: string;
      /** 공급받는자 상호 */
      recipientName: string;
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 영업 상태 */
      recipientBusinessStatus?: components['schemas']['B2bCompanyStateBusinessStatus'];
      /**
       * 공급받는자 휴폐업일자
       * @description 상태가 CLOSED, SUSPENDED 상태인 경우에만 결과값 반환
       */
      recipientClosedSuspendedDate?: string;
      /**
       * 발행 일시
       * Format: date-time
       */
      issuedAt?: string;
      /**
       * 개봉 일시
       * Format: date-time
       */
      openedAt?: string;
      /** 상태 */
      status: components['schemas']['B2bTaxInvoiceStatus'];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
      /**
       * 국세청 승인번호
       * @description 세금계산서 발행(전자서명) 시점에 자동으로 부여
       */
      ntsApproveNumber?: string;
      /** 국세청 전송 결과 */
      ntsResult?: string;
      /**
       * 국세청 전송 일시
       * Format: date-time
       */
      ntsSentAt?: string;
      /**
       * 국세청 결과 수신 일시
       * Format: date-time
       */
      ntsResultReceivedAt?: string;
      /**
       * 국세청 결과 코드
       * @description 국세청 발급 결과 코드로 영문 3자리 + 숫자 3자리로 구성됨
       */
      ntsResultCode?: string;
    };
    B2bTaxInvoiceWaitingSending: {
      /** 세금계산서 상태 */
      status: string;
      /** 과세 유형 */
      taxType: components['schemas']['B2bTaxType'];
      /** 일련번호 */
      serialNum?: string;
      /**
       * 책번호 - 권
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookVolume?: number;
      /**
       * 책번호 - 호
       * Format: int32
       * @description 입력 범위(4자리) : 0 ~ 9999
       */
      bookIssue?: number;
      /**
       * 작성일
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      writeDate: string;
      /** 영수/청구 */
      purposeType: components['schemas']['B2bTaxInvoicePurposeType'];
      /**
       * 공급가액 합계
       * Format: int64
       */
      supplyCostTotalAmount: number;
      /**
       * 세액 합계
       * Format: int64
       */
      taxTotalAmount: number;
      /**
       * 합계 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 현금
       * Format: int64
       */
      cashAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      checkAmount?: number;
      /**
       * 외상
       * Format: int64
       */
      creditAmount?: number;
      /**
       * 수표
       * Format: int64
       */
      noteAmount?: number;
      /**
       * 비고
       * @description 최대 3개
       */
      remarks: string[];
      /** 공급자 문서번호 */
      supplierDocumentKey?: string;
      /** 공급자 */
      supplier: components['schemas']['B2bTaxInvoiceCompany'];
      /** 공급받는자 문서번호 */
      recipientDocumentKey?: string;
      /** 공급받는자 */
      recipient: components['schemas']['B2bTaxInvoiceCompany'];
      /** 문자 전송 여부 */
      sendSms: boolean;
      /** 수정 사유 기재 */
      modification?: components['schemas']['B2bModification'];
      /**
       * 품목
       * @description 최대 99개
       */
      items: components['schemas']['B2bTaxInvoiceItem'][];
      /**
       * 추가 담당자
       * @description 최대 3개
       */
      contacts: components['schemas']['B2bTaxInvoiceAdditionalContact'][];
      /**
       * 상태 변경 일시
       * Format: date-time
       */
      statusUpdatedAt: string;
      /**
       * 발행 일시
       * Format: date-time
       */
      issuedAt: string;
      /**
       * 국세청 승인번호
       * @description 세금계산서 발행(전자서명) 시점에 자동으로 부여
       */
      ntsApproveNumber: string;
    };
    /**
     * 과세 유형
     * @description 과세 유형
     *
     * @enum {string}
     */
    B2bTaxType: 'FREE' | 'TAXABLE' | 'ZERO_RATED';
    /**
     * 은행
     * @description 은행
     *
     * @enum {string}
     */
    Bank:
      | 'BANK_OF_AMERICA'
      | 'BANK_OF_CHINA'
      | 'BANK_OF_KOREA'
      | 'BNP_PARIBAS'
      | 'BOCOM'
      | 'BOOKOOK_SECURITIES'
      | 'BUSAN'
      | 'CAPE_SECURITIES'
      | 'CCB'
      | 'CITI'
      | 'DAEGU'
      | 'DAISHIN_SECURITIES'
      | 'DAOL_SECURITIES'
      | 'DB_SECURITIES'
      | 'DEUTSCHE'
      | 'EBEST_SECURITIES'
      | 'EUGENE_SECURITIES'
      | 'HANA'
      | 'HANA_SECURITIES'
      | 'HANHWA_SECURITIES'
      | 'HI_SECURITIES'
      | 'HSBC'
      | 'HYUNDAI_MOTOR_SECURITIES'
      | 'IBK'
      | 'ICBC'
      | 'JEJU'
      | 'JEONBUK'
      | 'JPMC'
      | 'KAKAO'
      | 'KAKAO_PAY_SECURITIES'
      | 'KB_SECURITIES'
      | 'KCIS'
      | 'KDB'
      | 'KEXIM'
      | 'KFCC'
      | 'KIBO'
      | 'KIWOOM_SECURITIES'
      | 'KODIT'
      | 'KOOKMIN'
      | 'KOREA_FOSS_SECURITIES'
      | 'KOREA_SECURITIES'
      | 'KWANGJU'
      | 'KYOBO_SECURITIES'
      | 'KYONGNAM'
      | 'K_BANK'
      | 'LOCAL_NONGHYUP'
      | 'MERITZ_SECURITIES'
      | 'MIRAE_ASSET_SECURITIES'
      | 'MISC_FOREIGN'
      | 'MIZUHO'
      | 'MORGAN_STANLEY'
      | 'MUFG'
      | 'NFCF'
      | 'NH_SECURITIES'
      | 'NONGHYUP'
      | 'POST'
      | 'SAMSUNG_SECURITIES'
      | 'SAVINGS_BANK'
      | 'SGI'
      | 'SHINHAN'
      | 'SHINHAN_SECURITIES'
      | 'SHINHYUP'
      | 'SHINYOUNG_SECURITIES'
      | 'SK_SECURITIES'
      | 'STANDARD_CHARTERED'
      | 'SUHYUP'
      | 'TOSS'
      | 'TOSS_SECURITIES'
      | 'UOB'
      | 'WOORI'
      | 'YUANTA_SECURITIES';
    /**
     * 배송 정보 등록 전
     * @description 배송 정보 등록 전
     */
    BeforeRegisteredPaymentEscrow: {
      /** 에스크로 상태 */
      status: string;
    };
    /**
     * 빌링키가 이미 삭제된 경우
     * @description 빌링키가 이미 삭제된 경우
     */
    BillingKeyAlreadyDeletedError: {
      type: string;
      message?: string;
    };
    /**
     * 빌링키 정보
     * @description 빌링키 정보
     */
    BillingKeyInfo: {
      /** 빌링키 */
      billingKey: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /**
       * 빌링키 결제수단 상세 정보
       * @description 추후 슈퍼빌링키 기능 제공 시 여러 결제수단 정보가 담길 수 있습니다.
       */
      methods?: components['schemas']['BillingKeyPaymentMethod'][];
      /**
       * 빌링키 발급 시 사용된 채널
       * @description 추후 슈퍼빌링키 기능 제공 시 여러 채널 정보가 담길 수 있습니다.
       */
      channels: components['schemas']['SelectedChannel'][];
      /** 고객 정보 */
      customer: components['schemas']['Customer'];
      /** 사용자 지정 데이터 */
      customData?: string;
      /** 가맹점이 채번하는 빌링키 발급 건 고유 아이디 */
      issueId?: string;
      /** 빌링키 발급 건 이름 */
      issueName?: string;
      /**
       * 발급 시점
       * Format: date-time
       */
      issuedAt: string;
    };
    BillingKeyInfoSummary: {
      /** 발급된 빌링키 */
      billingKey: string;
      /**
       * 빌링크 발급 완료 시점
       * Format: date-time
       */
      issuedAt: string;
    };
    /**
     * 빌링키가 존재하지 않는 경우
     * @description 빌링키가 존재하지 않는 경우
     */
    BillingKeyNotFoundError: {
      type: string;
      message?: string;
    };
    BillingKeyNotIssuedError: {
      type: string;
      message?: string;
    };
    /**
     * 빌링키 결제 요청 입력 정보
     * @description 빌링키 결제 요청 입력 정보
     */
    BillingKeyPaymentInput: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /** 빌링키 결제에 사용할 빌링키 */
      billingKey: string;
      /** 주문명 */
      orderName: string;
      /** 고객 정보 */
      customer?: components['schemas']['CustomerInput'];
      /** 사용자 지정 데이터 */
      customData?: string;
      /** 결제 금액 세부 입력 정보 */
      amount: components['schemas']['PaymentAmountInput'];
      /** 통화 */
      currency: components['schemas']['Currency'];
      /**
       * 할부 개월 수
       * Format: int32
       */
      installmentMonth?: number;
      /** 무이자 할부 이자를 가맹점이 부담할지 여부 */
      useFreeInterestFromMerchant?: boolean;
      /** 카드 포인트 사용 여부 */
      useCardPoint?: boolean;
      /** 현금영수증 정보 */
      cashReceipt?: components['schemas']['CashReceiptInput'];
      /** 결제 국가 */
      country?: components['schemas']['Country'];
      /**
       * 웹훅 주소
       * @description 결제 승인/실패 시 요청을 받을 웹훅 주소입니다.
       * 상점에 설정되어 있는 값보다 우선적으로 적용됩니다.
       * 입력된 값이 없을 경우에는 빈 배열로 해석됩니다.
       */
      noticeUrls?: string[];
      /**
       * 상품 정보
       * @description 입력된 값이 없을 경우에는 빈 배열로 해석됩니다.
       */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 상품 개수
       * Format: int32
       */
      productCount?: number;
      /** 상품 유형 */
      productType?: components['schemas']['PaymentProductType'];
      /** 배송지 주소 */
      shippingAddress?: components['schemas']['SeparatedAddressInput'];
      /** PG사별 추가 파라미터 ("PG사별 연동 가이드" 참고) */
      bypass?: Record<string, never>;
    };
    /**
     * 빌링키 발급 수단 정보
     * @description 빌링키 발급 수단 정보
     */
    BillingKeyPaymentMethod:
      | components['schemas']['BillingKeyPaymentMethodCard']
      | components['schemas']['BillingKeyPaymentMethodEasyPay']
      | components['schemas']['BillingKeyPaymentMethodMobile']
      | components['schemas']['BillingKeyPaymentMethodPaypal']
      | components['schemas']['BillingKeyPaymentMethodTransfer'];
    /**
     * 카드 정보
     * @description 카드 정보
     */
    BillingKeyPaymentMethodCard: {
      type: string;
      /** 카드 상세 정보 */
      card?: components['schemas']['Card'];
    };
    /**
     * 간편 결제 정보
     * @description 간편 결제 정보
     */
    BillingKeyPaymentMethodEasyPay: {
      type: string;
      /** 간편 결제 PG사 */
      provider?: components['schemas']['EasyPayProvider'];
      /** 간편 결제 수단 */
      method?: components['schemas']['BillingKeyPaymentMethodEasyPayMethod'];
    };
    /**
     * 충전식 포인트 결제 정보
     * @description 충전식 포인트 결제 정보
     */
    BillingKeyPaymentMethodEasyPayCharge: {
      type: string;
    };
    /**
     * 간편 결제 수단
     * @description 간편 결제 수단
     */
    BillingKeyPaymentMethodEasyPayMethod:
      | components['schemas']['BillingKeyPaymentMethodCard']
      | components['schemas']['BillingKeyPaymentMethodEasyPayCharge']
      | components['schemas']['BillingKeyPaymentMethodTransfer'];
    /**
     * 모바일 정보
     * @description 모바일 정보
     */
    BillingKeyPaymentMethodMobile: {
      type: string;
      /** 전화번호 */
      phoneNumber?: string;
    };
    /**
     * 페이팔 정보
     * @description 페이팔 정보
     */
    BillingKeyPaymentMethodPaypal: {
      type: string;
    };
    /**
     * 계좌이체 정보
     * @description 계좌이체 정보
     */
    BillingKeyPaymentMethodTransfer: {
      type: string;
      /** 표준 은행 코드 */
      bank?: string;
      /** 계좌번호 */
      accountNumber?: string;
    };
    /**
     * 빌링키 결제 완료된 결제 건 요약 정보
     * @description 빌링키 결제 완료된 결제 건 요약 정보
     */
    BillingKeyPaymentSummary: {
      /** PG사 결제 아이디 */
      pgTxId: string;
      /**
       * 결제 완료 시점
       * Format: date-time
       */
      paidAt: string;
    };
    /**
     * 결제 취소 금액이 취소 가능 금액을 초과한 경우
     * @description 결제 취소 금액이 취소 가능 금액을 초과한 경우
     */
    CancelAmountExceedsCancellableAmountError: {
      type: string;
      message?: string;
    };
    /**
     * 세금계산서 역발행 취소 정보
     * @description 세금계산서 역발행 취소 정보
     */
    CancelB2bTaxInvoiceIssuanceBody: {
      /** 사업자등록번호 */
      brn: string;
      /** 세금계산서 문서 번호 */
      documentKey: string;
      /**
       * 문서 번호 유형
       * @description 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.
       */
      documentKeyType?: components['schemas']['B2bTaxInvoiceDocumentKeyType'];
      /** 메모 */
      memo?: string;
    };
    CancelB2bTaxInvoiceIssuanceError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bTaxInvoiceNotIssuedStatusError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 세금계산서 역발행 요청 취소 정보
     * @description 세금계산서 역발행 요청 취소 정보
     */
    CancelB2bTaxInvoiceRequestBody: {
      /** 사업자등록번호 */
      brn: string;
      /** 세금계산서 문서 번호 */
      documentKey: string;
      /**
       * 문서 번호 유형
       * @description 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.
       */
      documentKeyType?: components['schemas']['B2bTaxInvoiceDocumentKeyType'];
      /** 메모 */
      memo?: string;
    };
    CancelB2bTaxInvoiceRequestError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bTaxInvoiceNoRecipientDocumentKeyError']
      | components['schemas']['B2bTaxInvoiceNotFoundError']
      | components['schemas']['B2bTaxInvoiceNotRequestedStatusError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    CancelCashReceiptError:
      | components['schemas']['CashReceiptNotFoundError']
      | components['schemas']['CashReceiptNotIssuedError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 현금 영수증 취소 성공 응답
     * @description 현금 영수증 취소 성공 응답
     */
    CancelCashReceiptResponse: {
      /**
       * 취소 금액
       * Format: int64
       */
      cancelledAmount: number;
      /**
       * 현금 영수증 취소 완료 시점
       * Format: date-time
       */
      cancelledAt: string;
    };
    /**
     * 결제 취소 요청 입력 정보
     * @description 결제 취소 요청 입력 정보
     */
    CancelPaymentBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /**
       * 취소 총 금액
       * Format: int64
       * @description 값을 입력하지 않으면 전액 취소됩니다.
       */
      amount?: number;
      /**
       * 취소 금액 중 면세 금액
       * Format: int64
       * @description 값을 입력하지 않으면 전액 과세 취소됩니다.
       */
      taxFreeAmount?: number;
      /**
       * 취소 금액 중 부가세액
       * Format: int64
       * @description 값을 입력하지 않으면 자동 계산됩니다.
       */
      vatAmount?: number;
      /** 취소 사유 */
      reason: string;
      /**
       * 결제 건의 취소 가능 잔액
       * Format: int64
       * @description 본 취소 요청 이전의 취소 가능 잔액으로써, 값을 입력하면 잔액이 일치하는 경우에만 취소가 진행됩니다. 값을 입력하지 않으면 별도의 검증 처리를 수행하지 않습니다.
       */
      currentCancellableAmount?: number;
      /**
       * 환불 계좌
       * @description 계좌 환불일 경우 입력합니다. 계좌 환불이 필요한 경우는 가상계좌 환불, 휴대폰 익월 환불 등이 있습니다.
       */
      refundAccount?: components['schemas']['CancelPaymentBodyRefundAccount'];
    };
    /**
     * 고객 정보 입력 형식
     * @description 고객 정보 입력 형식
     */
    CancelPaymentBodyRefundAccount: {
      /** 은행 */
      bank: components['schemas']['Bank'];
      /** 계좌번호 */
      number: string;
      /** 예금주 */
      holderName: string;
      /** 예금주 연락처 - 스마트로 가상계좌 결제인 경우에 필요합니다. */
      holderPhoneNumber?: string;
    };
    CancelPaymentError:
      | components['schemas']['CancelAmountExceedsCancellableAmountError']
      | components['schemas']['CancelTaxAmountExceedsCancellableTaxAmountError']
      | components['schemas']['CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError']
      | components['schemas']['CancellableAmountConsistencyBrokenError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PaymentAlreadyCancelledError']
      | components['schemas']['PaymentNotFoundError']
      | components['schemas']['PaymentNotPaidError']
      | components['schemas']['PgProviderError']
      | components['schemas']['SumOfPartsExceedsCancelAmountError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 결제 취소 성공 응답
     * @description 결제 취소 성공 응답
     */
    CancelPaymentResponse: {
      /** 결체 취소 내역 */
      cancellation: components['schemas']['PaymentCancellation'];
    };
    CancelPlatformAdditionalFeePolicyScheduleError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformAdditionalFeePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 추가 수수료 정책 예약 업데이트 취소 성공 응답
     * @description 추가 수수료 정책 예약 업데이트 취소 성공 응답
     */
    CancelPlatformAdditionalFeePolicyScheduleResponse: Record<string, never>;
    CancelPlatformContractScheduleError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 계약 예약 업데이트 취소 성공 응답
     * @description 계약 예약 업데이트 취소 성공 응답
     */
    CancelPlatformContractScheduleResponse: Record<string, never>;
    CancelPlatformDiscountSharePolicyScheduleError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformDiscountSharePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 할인 분담 정책 예약 업데이트 취소 성공 응답
     * @description 할인 분담 정책 예약 업데이트 취소 성공 응답
     */
    CancelPlatformDiscountSharePolicyScheduleResponse: Record<string, never>;
    CancelPlatformPartnerScheduleError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 예약 업데이트 취소 성공 응답
     * @description 파트너 예약 업데이트 취소 성공 응답
     */
    CancelPlatformPartnerScheduleResponse: Record<string, never>;
    /**
     * 취소 과세 금액이 취소 가능한 과세 금액을 초과한 경우
     * @description 취소 과세 금액이 취소 가능한 과세 금액을 초과한 경우
     */
    CancelTaxAmountExceedsCancellableTaxAmountError: {
      type: string;
      message?: string;
    };
    /**
     * 취소 면세 금액이 취소 가능한 면세 금액을 초과한 경우
     * @description 취소 면세 금액이 취소 가능한 면세 금액을 초과한 경우
     */
    CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError: {
      type: string;
      message?: string;
    };
    /**
     * 취소 가능 잔액 검증에 실패한 경우
     * @description 취소 가능 잔액 검증에 실패한 경우
     */
    CancellableAmountConsistencyBrokenError: {
      type: string;
      message?: string;
    };
    /**
     * 발급 취소
     * @description 발급 취소
     */
    CancelledCashReceipt: {
      /** 현금영수증 상태 */
      status: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제 건 아이디 */
      paymentId: string;
      /** 현금영수증 발급에 사용된 채널 */
      channel: components['schemas']['SelectedChannel'];
      /**
       * 결제 금액
       * Format: int64
       */
      amount: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFreeAmount?: number;
      /**
       * 부가세액
       * Format: int64
       */
      vatAmount?: number;
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 주문명 */
      orderName: string;
      /** 수동 발급 여부 */
      isManual: boolean;
      /** 현금영수증 유형 */
      type?: components['schemas']['CashReceiptType'];
      /** PG사 현금영수증 아이디 */
      pgReceiptId?: string;
      /** 승인번호 */
      issueNumber: string;
      /** 현금영수증 URL */
      url?: string;
      /**
       * 발급 시점
       * Format: date-time
       */
      issuedAt: string;
      /**
       * 취소 시점
       * Format: date-time
       */
      cancelledAt: string;
    };
    /**
     * 결제 취소 상태 건
     * @description 결제 취소 상태 건
     */
    CancelledPayment: {
      /** 결제 건 상태 */
      status: string;
      /** 결제 건 아이디 */
      id: string;
      /**
       * 결제 건 포트원 채번 아이디
       * @description V1 결제 건의 경우 imp_uid에 해당합니다.
       */
      transactionId: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제수단 정보 */
      method?: components['schemas']['PaymentMethod'];
      /** 결제 채널 */
      channel: components['schemas']['SelectedChannel'];
      /** 포트원 버전 */
      version: components['schemas']['PortOneVersion'];
      /**
       * 결제 예약 건 아이디
       * @description 결제 예약을 이용한 경우에만 존재
       */
      scheduleId?: string;
      /**
       * 결제 시 사용된 빌링키
       * @description 빌링키 결제인 경우에만 존재
       */
      billingKey?: string;
      /** 웹훅 발송 내역 */
      webhooks?: components['schemas']['PaymentWebhook'][];
      /**
       * 결제 요청 시점
       * Format: date-time
       */
      requestedAt: string;
      /**
       * 업데이트 시점
       * Format: date-time
       */
      updatedAt: string;
      /**
       * 상태 업데이트 시점
       * Format: date-time
       */
      statusChangedAt: string;
      /** 주문명 */
      orderName: string;
      /** 결제 금액 관련 세부 정보 */
      amount: components['schemas']['PaymentAmount'];
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 구매자 정보 */
      customer: components['schemas']['Customer'];
      /** 프로모션 아이디 */
      promotionId?: string;
      /** 문화비 지출 여부 */
      isCulturalExpense?: boolean;
      /**
       * 에스크로 결제 정보
       * @description 에스크로 결제인 경우 존재합니다.
       */
      escrow?: components['schemas']['PaymentEscrow'];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 상품 갯수
       * Format: int32
       */
      productCount?: number;
      /** 사용자 지정 데이터 */
      customData?: string;
      /** 국가 코드 */
      country?: components['schemas']['Country'];
      /**
       * 결제 완료 시점
       * Format: date-time
       */
      paidAt?: string;
      /** 현금영수증 */
      cashReceipt?: components['schemas']['PaymentCashReceipt'];
      /** 거래 영수증 URL */
      receiptUrl?: string;
      /** 결제 취소 내역 */
      cancellations: components['schemas']['PaymentCancellation'][];
      /**
       * 결제 취소 시점
       * Format: date-time
       */
      cancelledAt: string;
    };
    /**
     * 취소된 현금영수증
     * @description 취소된 현금영수증
     */
    CancelledPaymentCashReceipt: {
      /** 결제 건 내 현금영수증 상태 */
      status: string;
      /** 현금영수증 유형 */
      type?: components['schemas']['CashReceiptType'];
      /** PG사 영수증 발급 아이디 */
      pgReceiptId?: string;
      /** 승인 번호 */
      issueNumber: string;
      /**
       * 총 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFreeAmount?: number;
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 현금영수증 URL */
      url?: string;
      /**
       * 발급 시점
       * Format: date-time
       */
      issuedAt: string;
      /**
       * 취소 시점
       * Format: date-time
       */
      cancelledAt: string;
    };
    /**
     * 거래 취소
     * @description 거래 취소
     */
    CancelledPaymentEscrow: {
      /** 에스크로 상태 */
      status: string;
      /** 택배사 */
      company: string;
      /** 송장번호 */
      invoiceNumber: string;
      /**
       * 발송 일시
       * Format: date-time
       */
      sentAt?: string;
      /**
       * 배송등록 처리 일자
       * Format: date-time
       */
      appliedAt?: string;
    };
    /**
     * 카드 상세 정보
     * @description 카드 상세 정보
     */
    Card: {
      /** 발행사 코드 */
      publisher?: string;
      /** 발급사 코드 */
      issuer?: string;
      /** 카드 브랜드 */
      brand?: components['schemas']['CardBrand'];
      /** 카드 유형 */
      type?: components['schemas']['CardType'];
      /** 카드 소유주 유형 */
      ownerType?: components['schemas']['CardOwnerType'];
      /** 카드 번호 앞 6자리 또는 8자리의 BIN (Bank Identification Number) */
      bin?: string;
      /** 카드 상품명 */
      name?: string;
      /** 마스킹된 카드 번호 */
      number?: string;
    };
    /**
     * 카드 브랜드
     * @description 카드 브랜드
     *
     * @enum {string}
     */
    CardBrand:
      | 'AMEX'
      | 'DINERS'
      | 'JCB'
      | 'LOCAL'
      | 'MASTER'
      | 'UNIONPAY'
      | 'VISA';
    /**
     * 카드사
     * @description 카드사
     *
     * @enum {string}
     */
    CardCompany:
      | 'BC_CARD'
      | 'CITI_CARD'
      | 'EPOST'
      | 'GWANGJU_CARD'
      | 'HANA_CARD'
      | 'HYUNDAI_CARD'
      | 'JEJU_CARD'
      | 'JEONBUK_CARD'
      | 'KAKAO_BANK'
      | 'KFCC'
      | 'KOOKMIN_CARD'
      | 'KOREA_DEVELOPMENT_BANK'
      | 'K_BANK'
      | 'LOTTE_CARD'
      | 'NH_CARD'
      | 'SAMSUNG_CARD'
      | 'SAVINGS_BANK_KOREA'
      | 'SHINHAN_CARD'
      | 'SHINHYUP'
      | 'SUHYUP_CARD'
      | 'TOSS_BANK'
      | 'UNIDENTIFIED_GLOBAL_CARD'
      | 'WOORI_CARD';
    /**
     * 카드 인증 관련 정보
     * @description 카드 인증 관련 정보
     */
    CardCredential: {
      /** 카드 번호 */
      number: string;
      /** 유효 기간 만료 연도 */
      expiryYear: string;
      /** 유효 기간 만료 월 */
      expiryMonth: string;
      /** 생년월일 또는 사업자 등록 번호 */
      birthOrBusinessRegistrationNumber?: string;
      /** 비밀번호 앞 두자리 */
      passwordTwoDigits?: string;
    };
    /**
     * 카드 소유주 유형
     * @description 카드 소유주 유형
     *
     * @enum {string}
     */
    CardOwnerType: 'CORPORATE' | 'PERSONAL';
    /**
     * 카드 유형
     * @description 카드 유형
     *
     * @enum {string}
     */
    CardType: 'CREDIT' | 'DEBIT' | 'GIFT';
    /**
     * 현금영수증 내역
     * @description 현금영수증 내역
     */
    CashReceipt:
      | components['schemas']['CancelledCashReceipt']
      | components['schemas']['IssueFailedCashReceipt']
      | components['schemas']['IssuedCashReceipt'];
    /**
     * 현금영수증이 이미 발급된 경우
     * @description 현금영수증이 이미 발급된 경우
     */
    CashReceiptAlreadyIssuedError: {
      type: string;
      message?: string;
    };
    /**
     * 현금영수증 입력 정보
     * @description 현금영수증 입력 정보
     */
    CashReceiptInput: {
      /** 현금영수증 유형 */
      type: components['schemas']['CashReceiptInputType'];
      /**
       * 사용자 식별 번호
       * @description 미발행 유형 선택 시 입력하지 않습니다.
       */
      customerIdentityNumber?: string;
    };
    /**
     * 입력 시 발급 유형
     * @description 입력 시 발급 유형
     *
     * @enum {string}
     */
    CashReceiptInputType: 'CORPORATE' | 'NO_RECEIPT' | 'PERSONAL';
    /**
     * 현금영수증이 존재하지 않는 경우
     * @description 현금영수증이 존재하지 않는 경우
     */
    CashReceiptNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * 현금영수증이 발급되지 않은 경우
     * @description 현금영수증이 발급되지 않은 경우
     */
    CashReceiptNotIssuedError: {
      type: string;
      message?: string;
    };
    /**
     * 현금영수증 내역
     * @description 현금영수증 내역
     */
    CashReceiptSummary: {
      /** 발행 번호 */
      issueNumber: string;
      /** 현금 영수증 URL */
      url: string;
      /** PG사 현금영수증 아이디 */
      pgReceiptId: string;
    };
    /**
     * 발급 유형
     * @description 발급 유형
     *
     * @enum {string}
     */
    CashReceiptType: 'CORPORATE' | 'PERSONAL';
    /**
     * 채널 정보
     * @description 채널 정보
     */
    Channel: {
      /** 채널 아이디 */
      channelId: string;
      /** 채널명 */
      channelName: string;
      /** V2 결제가 가능한 PG사 */
      pgProvider: components['schemas']['PgProvider'];
      /** 채널 유형 */
      channelType: components['schemas']['ChannelType'];
      /** PG사 상점 아이디 */
      pgMerchantId: string;
      /** 결제용 채널 여부 */
      isForPayment: boolean;
      /** 본인인증용 채널 여부 */
      isForIdentityCertification: boolean;
      /** 채널키 */
      channelKey: string;
      /** PG사 인증 정보 */
      pgCredential?: components['schemas']['ChannelPgCredential'];
    };
    /**
     * 다날 인증 정보
     * @description 다날 인증 정보
     */
    ChannelDanalCredential: {
      type: string;
      cppwd?: string;
      itemCode?: string;
    };
    /**
     * KSNET 인증 정보
     * @description KSNET 인증 정보
     */
    ChannelKsnetCredential: {
      type: string;
      apiKey?: string;
    };
    /**
     * 네이버페이 인증 정보
     * @description 네이버페이 인증 정보
     */
    ChannelNaverPayCredential: {
      type: string;
      clientId?: string;
      clientSecret?: string;
      chainId?: string;
    };
    /**
     * 요청된 채널이 존재하지 않는 경우
     * @description 요청된 채널이 존재하지 않는 경우
     */
    ChannelNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * PG사 인증 정보
     * @description PG사 인증 정보
     */
    ChannelPgCredential:
      | components['schemas']['ChannelDanalCredential']
      | components['schemas']['ChannelKsnetCredential']
      | components['schemas']['ChannelNaverPayCredential']
      | components['schemas']['ChannelSmartroV2Credential']
      | components['schemas']['ChannelTossPaymentsCredential'];
    /**
     * 스마트로V2 인증 정보
     * @description 스마트로V2 인증 정보
     */
    ChannelSmartroV2Credential: {
      type: string;
      merchantKey?: string;
      cancelPassword?: string;
      sspMallId?: string;
      apiKey?: string;
    };
    /**
     * 토스페이먼츠 인증 정보
     * @description 토스페이먼츠 인증 정보
     */
    ChannelTossPaymentsCredential: {
      type: string;
      secretKey?: string;
      clientKey?: string;
    };
    /**
     * 채널 유형
     * @description 채널 유형
     *
     * @enum {string}
     */
    ChannelType: 'LIVE' | 'MERCHANT_TEST' | 'SHARED_TEST';
    CloseVirtualAccountError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PaymentNotFoundError']
      | components['schemas']['PaymentNotWaitingForDepositError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 가상계좌 말소 성공 응답
     * @description 가상계좌 말소 성공 응답
     */
    CloseVirtualAccountResponse: {
      /**
       * 가상계좌 말소 시점
       * Format: date-time
       */
      closedAt: string;
    };
    CompletePlatformPayoutError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPayoutAlreadyCompletedError']
      | components['schemas']['PlatformPayoutCreatorMismatchedError']
      | components['schemas']['PlatformPayoutNotFoundError']
      | components['schemas']['UnauthorizedError'];
    CompletePlatformPayoutResponse: {
      payout: components['schemas']['PlatformPayout'];
    };
    /**
     * 에스크로 구매 확정 입력 정보
     * @description 에스크로 구매 확정 입력 정보
     */
    ConfirmEscrowBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /**
       * 확인 주체가 상점인지 여부
       * @description 구매확정요청 주체가 가맹점 관리자인지 구매자인지 구분하기 위한 필드입니다.
       * 네이버페이 전용 파라미터이며, 구분이 모호한 경우 가맹점 관리자(true)로 입력합니다.
       */
      fromStore?: boolean;
    };
    ConfirmEscrowError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PaymentNotFoundError']
      | components['schemas']['PaymentNotPaidError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 에스크로 구매 확정 성공 응답
     * @description 에스크로 구매 확정 성공 응답
     */
    ConfirmEscrowResponse: {
      /**
       * 에스크로 구매 확정 시점
       * Format: date-time
       */
      completedAt: string;
    };
    /**
     * 본인인증 확인을 위한 입력 정보
     * @description 본인인증 확인을 위한 입력 정보
     */
    ConfirmIdentityVerificationBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /**
       * OTP (One-Time Password)
       * @description SMS 방식에서만 사용됩니다.
       */
      otp?: string;
    };
    ConfirmIdentityVerificationError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['IdentityVerificationAlreadyVerifiedError']
      | components['schemas']['IdentityVerificationNotFoundError']
      | components['schemas']['IdentityVerificationNotSentError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 본인인증 확인 성공 응답
     * @description 본인인증 확인 성공 응답
     */
    ConfirmIdentityVerificationResponse: {
      /** 완료된 본인인증 내역 */
      identityVerification: components['schemas']['VerifiedIdentityVerification'];
    };
    /**
     * 구매 확정
     * @description 구매 확정
     */
    ConfirmedPaymentEscrow: {
      /** 에스크로 상태 */
      status: string;
      /** 택배사 */
      company: string;
      /** 송장번호 */
      invoiceNumber: string;
      /**
       * 발송 일시
       * Format: date-time
       */
      sentAt?: string;
      /**
       * 배송등록 처리 일자
       * Format: date-time
       */
      appliedAt?: string;
      /** 자동 구매 확정 처리 여부 */
      isAutomaticallyConfirmed: boolean;
    };
    /**
     * 국가
     * @description 국가
     *
     * @enum {string}
     */
    Country:
      | 'AD'
      | 'AE'
      | 'AF'
      | 'AG'
      | 'AI'
      | 'AL'
      | 'AM'
      | 'AO'
      | 'AQ'
      | 'AR'
      | 'AS'
      | 'AT'
      | 'AU'
      | 'AW'
      | 'AX'
      | 'AZ'
      | 'BA'
      | 'BB'
      | 'BD'
      | 'BE'
      | 'BF'
      | 'BG'
      | 'BH'
      | 'BI'
      | 'BJ'
      | 'BL'
      | 'BM'
      | 'BN'
      | 'BO'
      | 'BQ'
      | 'BR'
      | 'BS'
      | 'BT'
      | 'BV'
      | 'BW'
      | 'BY'
      | 'BZ'
      | 'CA'
      | 'CC'
      | 'CD'
      | 'CF'
      | 'CG'
      | 'CH'
      | 'CI'
      | 'CK'
      | 'CL'
      | 'CM'
      | 'CN'
      | 'CO'
      | 'CR'
      | 'CU'
      | 'CV'
      | 'CW'
      | 'CX'
      | 'CY'
      | 'CZ'
      | 'DE'
      | 'DJ'
      | 'DK'
      | 'DM'
      | 'DO'
      | 'DZ'
      | 'EC'
      | 'EE'
      | 'EG'
      | 'EH'
      | 'ER'
      | 'ES'
      | 'ET'
      | 'FI'
      | 'FJ'
      | 'FK'
      | 'FM'
      | 'FO'
      | 'FR'
      | 'GA'
      | 'GB'
      | 'GD'
      | 'GE'
      | 'GF'
      | 'GG'
      | 'GH'
      | 'GI'
      | 'GL'
      | 'GM'
      | 'GN'
      | 'GP'
      | 'GQ'
      | 'GR'
      | 'GS'
      | 'GT'
      | 'GU'
      | 'GW'
      | 'GY'
      | 'HK'
      | 'HM'
      | 'HN'
      | 'HR'
      | 'HT'
      | 'HU'
      | 'ID'
      | 'IE'
      | 'IL'
      | 'IM'
      | 'IN'
      | 'IO'
      | 'IQ'
      | 'IR'
      | 'IS'
      | 'IT'
      | 'JE'
      | 'JM'
      | 'JO'
      | 'JP'
      | 'KE'
      | 'KG'
      | 'KH'
      | 'KI'
      | 'KM'
      | 'KN'
      | 'KP'
      | 'KR'
      | 'KW'
      | 'KY'
      | 'KZ'
      | 'LA'
      | 'LB'
      | 'LC'
      | 'LI'
      | 'LK'
      | 'LR'
      | 'LS'
      | 'LT'
      | 'LU'
      | 'LV'
      | 'LY'
      | 'MA'
      | 'MC'
      | 'MD'
      | 'ME'
      | 'MF'
      | 'MG'
      | 'MH'
      | 'MK'
      | 'ML'
      | 'MM'
      | 'MN'
      | 'MO'
      | 'MP'
      | 'MQ'
      | 'MR'
      | 'MS'
      | 'MT'
      | 'MU'
      | 'MV'
      | 'MW'
      | 'MX'
      | 'MY'
      | 'MZ'
      | 'NA'
      | 'NC'
      | 'NE'
      | 'NF'
      | 'NG'
      | 'NI'
      | 'NL'
      | 'NO'
      | 'NP'
      | 'NR'
      | 'NU'
      | 'NZ'
      | 'OM'
      | 'PA'
      | 'PE'
      | 'PF'
      | 'PG'
      | 'PH'
      | 'PK'
      | 'PL'
      | 'PM'
      | 'PN'
      | 'PR'
      | 'PS'
      | 'PT'
      | 'PW'
      | 'PY'
      | 'QA'
      | 'RE'
      | 'RO'
      | 'RS'
      | 'RU'
      | 'RW'
      | 'SA'
      | 'SB'
      | 'SC'
      | 'SD'
      | 'SE'
      | 'SG'
      | 'SH'
      | 'SI'
      | 'SJ'
      | 'SK'
      | 'SL'
      | 'SM'
      | 'SN'
      | 'SO'
      | 'SR'
      | 'SS'
      | 'ST'
      | 'SV'
      | 'SX'
      | 'SY'
      | 'SZ'
      | 'TC'
      | 'TD'
      | 'TF'
      | 'TG'
      | 'TH'
      | 'TJ'
      | 'TK'
      | 'TL'
      | 'TM'
      | 'TN'
      | 'TO'
      | 'TR'
      | 'TT'
      | 'TV'
      | 'TW'
      | 'TZ'
      | 'UA'
      | 'UG'
      | 'UM'
      | 'US'
      | 'UY'
      | 'UZ'
      | 'VA'
      | 'VC'
      | 'VE'
      | 'VG'
      | 'VI'
      | 'VN'
      | 'VU'
      | 'WF'
      | 'WS'
      | 'YE'
      | 'YT'
      | 'ZA'
      | 'ZM'
      | 'ZW';
    CreateManualTransferResponse: {
      transfer: components['schemas']['PlatformManualTransfer'];
    };
    CreateOrderCancelTransferResponse: {
      transfer: components['schemas']['PlatformOrderCancelTransfer'];
    };
    CreateOrderTransferResponse: {
      transfer: components['schemas']['PlatformOrderTransfer'];
    };
    /**
     * 결제 예약 요청 입력 정보
     * @description 결제 예약 요청 입력 정보
     */
    CreatePaymentScheduleBody: {
      /** 빌링키 결제 입력 정보 */
      payment: components['schemas']['BillingKeyPaymentInput'];
      /**
       * 결제 예정 시점
       * Format: date-time
       */
      timeToPay: string;
    };
    CreatePaymentScheduleError:
      | components['schemas']['AlreadyPaidOrWaitingError']
      | components['schemas']['BillingKeyAlreadyDeletedError']
      | components['schemas']['BillingKeyNotFoundError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PastPaymentScheduleError']
      | components['schemas']['PaymentScheduleAlreadyExistsError']
      | components['schemas']['SumOfPartsExceedsTotalAmountError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 결제 예약 성공 응답
     * @description 결제 예약 성공 응답
     */
    CreatePaymentScheduleResponse: {
      /** 결제 예약 건 */
      schedule: components['schemas']['PaymentScheduleSummary'];
    };
    /**
     * 추가 수수료 정책 생성을 위한 입력 정보
     * @description 추가 수수료 정책 생성을 위한 입력 정보
     */
    CreatePlatformAdditionalFeePolicyBody: {
      /**
       * 생성할 추가 수수료 정책 아이디
       * @description 명시하지 않으면 id 가 임의로 생성됩니다.
       */
      id?: string;
      /** 이름 */
      name: string;
      /** 수수료 정보 */
      fee: components['schemas']['PlatformFeeInput'];
      /** 메모 */
      memo?: string;
      /** 부가세 부담 주체 */
      vatPayer: components['schemas']['PlatformPayer'];
    };
    CreatePlatformAdditionalFeePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformAdditionalFeePolicyAlreadyExistsError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 플랫폼 생성 성공 응답 정보
     * @description 플랫폼 생성 성공 응답 정보
     */
    CreatePlatformAdditionalFeePolicyResponse: {
      /** 생성된 추가 수수료 정책 */
      additionalFeePolicy: components['schemas']['PlatformAdditionalFeePolicy'];
    };
    /**
     * 계약 객체 생성을 위한 입력 정보
     * @description 계약 객체 생성을 위한 입력 정보
     */
    CreatePlatformContractBody: {
      /**
       * 계약에 부여할 고유 아이디
       * @description 명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.
       */
      id?: string;
      /** 계약 이름 */
      name: string;
      /** 계약 내부 표기를 위한 메모 */
      memo?: string;
      /** 중개수수료 */
      platformFee: components['schemas']['PlatformFeeInput'];
      /** 정산 주기 */
      settlementCycle: components['schemas']['PlatformSettlementCycleInput'];
      /** 중개수수료에 대한 부가세 부담 주체 */
      platformFeeVatPayer: components['schemas']['PlatformPayer'];
      /** 정산 시 결제금액 부가세 감액 여부 */
      subtractPaymentVatAmount: boolean;
    };
    CreatePlatformContractError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformContractAlreadyExistsError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 계약 객체 생성 성공 응답
     * @description 계약 객체 생성 성공 응답
     */
    CreatePlatformContractResponse: {
      /** 생성된 계약 객체 */
      contract: components['schemas']['PlatformContract'];
    };
    /**
     * 할인 분담 정책 생성을 위한 입력 정보
     * @description 할인 분담 정책 생성을 위한 입력 정보
     */
    CreatePlatformDiscountSharePolicyBody: {
      /**
       * 할인 분담에 부여할 고유 아이디
       * @description 명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.
       */
      id?: string;
      /** 할인 분담에 부여할 이름 */
      name: string;
      /**
       * 파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 `할인금액 * partnerShareRate * 10^5` 로 책정합니다.
       * Format: int32
       */
      partnerShareRate: number;
      /** 해당 할인 분담에 대한 메모 ex) 파트너 브랜드 쿠폰 */
      memo?: string;
    };
    CreatePlatformDiscountSharePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformDiscountSharePolicyAlreadyExistsError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 할인 분담 정책 생성 성공 응답
     * @description 할인 분담 정책 생성 성공 응답
     */
    CreatePlatformDiscountSharePolicyResponse: {
      /** 생성된 할인 분담 정책 */
      discountSharePolicy: components['schemas']['PlatformDiscountSharePolicy'];
    };
    CreatePlatformManualTransferBody: {
      partnerId: string;
      memo?: string;
      /** Format: int64 */
      settlementAmount: number;
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      isForTest?: boolean;
    };
    CreatePlatformManualTransferError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['PlatformUnavailableSettlementDateError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 취소 정산 등록을 위한 입력 정보
     * @description 취소 정산 등록을 위한 입력 정보
     * 하나의 payment에 하나의 정산 건만 존재하는 경우에는 (partnerId, paymentId)로 취소 정산을 등록하실 수 있습니다.
     * 하나의 payment에 여러 개의 정산 건이 존재하는 경우에는 transferId를 필수로 입력해야 합니다.
     * transferId를 입력한 경우 (partnerId, paymentId)는 생략 가능합니다.
     */
    CreatePlatformOrderCancelTransferBody: {
      partnerId?: string;
      paymentId?: string;
      transferId?: string;
      cancellationId: string;
      memo?: string;
      orderDetail?: components['schemas']['CreatePlatformOrderCancelTransferBodyOrderDetail'];
      discounts: components['schemas']['CreatePlatformOrderCancelTransferBodyDiscount'][];
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementStartDate?: string;
      externalCancellationDetail?: components['schemas']['CreatePlatformOrderCancelTransferBodyExternalCancellationDetail'];
      isForTest?: boolean;
    };
    CreatePlatformOrderCancelTransferBodyDiscount: {
      sharePolicyId: string;
      /** Format: int64 */
      amount: number;
    };
    CreatePlatformOrderCancelTransferBodyExternalCancellationDetail: {
      /** Format: date-time */
      cancelledAt?: string;
    };
    CreatePlatformOrderCancelTransferBodyOrderDetail: {
      /** Format: int64 */
      orderAmount?: number;
      orderLines?: components['schemas']['CreatePlatformOrderCancelTransferBodyOrderLine'][];
      all?: components['schemas']['CreatePlatformOrderCancelTransferBodyOrderDetailAll'];
    };
    CreatePlatformOrderCancelTransferBodyOrderDetailAll: Record<string, never>;
    CreatePlatformOrderCancelTransferBodyOrderLine: {
      productId: string;
      /** Format: int32 */
      quantity: number;
      discounts: components['schemas']['CreatePlatformOrderCancelTransferBodyDiscount'][];
    };
    CreatePlatformOrderCancelTransferError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformCancellableAmountExceededError']
      | components['schemas']['PlatformCancellableDiscountAmountExceededError']
      | components['schemas']['PlatformCancellableProductQuantityExceededError']
      | components['schemas']['PlatformCancellationAndPaymentTypeMismatchedError']
      | components['schemas']['PlatformCancellationNotFoundError']
      | components['schemas']['PlatformDiscountCancelExceededOrderCancelAmountError']
      | components['schemas']['PlatformDiscountSharePolicyIdDuplicatedError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformOrderDetailMismatchedError']
      | components['schemas']['PlatformOrderTransferAlreadyCancelledError']
      | components['schemas']['PlatformPaymentNotFoundError']
      | components['schemas']['PlatformProductIdDuplicatedError']
      | components['schemas']['PlatformProductIdNotFoundError']
      | components['schemas']['PlatformSettlementCancelAmountExceededPortOneCancelError']
      | components['schemas']['PlatformTransferAlreadyExistsError']
      | components['schemas']['PlatformTransferDiscountSharePolicyNotFoundError']
      | components['schemas']['PlatformTransferNotFoundError']
      | components['schemas']['UnauthorizedError'];
    CreatePlatformOrderTransferBody: {
      partnerId: string;
      contractId?: string;
      memo?: string;
      paymentId: string;
      orderDetail: components['schemas']['CreatePlatformOrderTransferBodyOrderDetail'];
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementStartDate?: string;
      discounts: components['schemas']['CreatePlatformOrderTransferBodyDiscount'][];
      additionalFees: components['schemas']['CreatePlatformOrderTransferBodyAdditionalFee'][];
      externalPaymentDetail?: components['schemas']['CreatePlatformOrderTransferBodyExternalPaymentDetail'];
      isForTest?: boolean;
    };
    CreatePlatformOrderTransferBodyAdditionalFee: {
      policyId: string;
    };
    CreatePlatformOrderTransferBodyDiscount: {
      sharePolicyId: string;
      /** Format: int64 */
      amount: number;
    };
    CreatePlatformOrderTransferBodyExternalPaymentDetail: {
      currency: components['schemas']['Currency'];
      orderName?: string;
      /** Format: date-time */
      paidAt?: string;
      method?: components['schemas']['PlatformPaymentMethodInput'];
    };
    CreatePlatformOrderTransferBodyOrderDetail: {
      /** Format: int64 */
      orderAmount?: number;
      orderLines?: components['schemas']['CreatePlatformOrderTransferBodyOrderLine'][];
    };
    CreatePlatformOrderTransferBodyOrderLine: {
      product: components['schemas']['CreatePlatformOrderTransferBodyProduct'];
      /** Format: int32 */
      quantity: number;
      discounts: components['schemas']['CreatePlatformOrderTransferBodyDiscount'][];
      additionalFees: components['schemas']['CreatePlatformOrderTransferBodyAdditionalFee'][];
    };
    CreatePlatformOrderTransferBodyProduct: {
      id: string;
      name: string;
      /** Format: int64 */
      amount: number;
      tag?: string;
    };
    CreatePlatformOrderTransferError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformAdditionalFeePoliciesNotFoundError']
      | components['schemas']['PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError']
      | components['schemas']['PlatformDiscountExceededOrderAmountError']
      | components['schemas']['PlatformDiscountSharePoliciesNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['PlatformPaymentNotFoundError']
      | components['schemas']['PlatformProductIdDuplicatedError']
      | components['schemas']['PlatformSettlementPaymentAmountExceededPortOnePaymentError']
      | components['schemas']['PlatformTransferAlreadyExistsError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 생성을 위한 입력 정보
     * @description 파트너 생성을 위한 입력 정보
     */
    CreatePlatformPartnerBody: {
      /**
       * 파트너에 부여할 고유 아이디
       * @description 가맹점 서버에 등록된 파트너 지칭 아이디와 동일하게 설정하는 것을 권장합니다. 명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.
       */
      id?: string;
      /** 파트너 법인명 혹은 이름 */
      name: string;
      /** 파트너 담당자 연락 정보 */
      contact: components['schemas']['CreatePlatformPartnerBodyContact'];
      /**
       * 정산 계좌
       * @description 파트너의 사업자등록번호가 존재하는 경우 명시합니다. 별도로 검증하지는 않으며, 번호와 기호 모두 입력 가능합니다.
       */
      account: components['schemas']['CreatePlatformPartnerBodyAccount'];
      /**
       * 기본 계약 아이디
       * @description 이미 존재하는 계약 아이디를 등록해야 합니다.
       */
      defaultContractId: string;
      /**
       * 파트너에 대한 메모
       * @description 총 256자까지 입력할 수 있습니다.
       */
      memo?: string;
      /**
       * 파트너에 부여할 태그 리스트
       * @description 최대 10개까지 입력할 수 있습니다.
       */
      tags: string[];
      /**
       * 파트너 유형별 추가 정보
       * @description 사업자/원천징수대상자 중 추가할 파트너의 유형에 따른 정보를 입력해야 합니다.
       */
      type?: components['schemas']['CreatePlatformPartnerBodyType'];
    };
    /**
     * 파트너 계좌 등록을 위한 정보
     * @description 파트너 계좌 등록을 위한 정보
     */
    CreatePlatformPartnerBodyAccount: {
      /** 은행 */
      bank: components['schemas']['Bank'];
      /** 정산에 사용할 통화 */
      currency: components['schemas']['Currency'];
      /** 계좌번호 */
      number: string;
      /** 예금주명 */
      holder: string;
    };
    /**
     * 파트너 담당자 정보
     * @description 파트너 담당자 정보
     */
    CreatePlatformPartnerBodyContact: {
      /** 담당자 이름 */
      name: string;
      /** 담당자 휴대폰 번호 */
      phoneNumber: string;
      /** 담당자 이메일 */
      email: string;
    };
    /**
     * 파트너 생성을 위한 유형별 추가 정보
     * @description 파트너 생성을 위한 유형별 추가 정보
     */
    CreatePlatformPartnerBodyType: {
      /** 사업자 추가 정보 */
      business?: components['schemas']['CreatePlatformPartnerBodyTypeBusiness'];
      /** 원천징수대상자 추가 정보 */
      whtPayer?: components['schemas']['CreatePlatformPartnerBodyTypeWhtPayer'];
    };
    CreatePlatformPartnerBodyTypeBusiness: {
      /** 상호명 */
      companyName: string;
      /** 사업자등록번호 */
      businessRegistrationNumber: string;
      /** 대표자 이름 */
      representativeName: string;
      /** 사업장 주소 */
      companyAddress?: string;
      /** 업태 */
      businessType?: string;
      /** 업종 */
      businessClass?: string;
    };
    CreatePlatformPartnerBodyTypeWhtPayer: {
      /** 생년월일 */
      birthdate: string;
    };
    CreatePlatformPartnerError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerIdAlreadyExistsError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 생성 성공 응답
     * @description 파트너 생성 성공 응답
     */
    CreatePlatformPartnerResponse: {
      /** 생성된 파트너 */
      partner: components['schemas']['PlatformPartner'];
    };
    /**
     * 파트너 다건 생성을 위한 입력 정보
     * @description 파트너 다건 생성을 위한 입력 정보
     */
    CreatePlatformPartnersBody: {
      /** 생성할 파트너 리스트 정보 */
      partners: components['schemas']['CreatePlatformPartnerBody'][];
    };
    CreatePlatformPartnersError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformContractsNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerIdsAlreadyExistError']
      | components['schemas']['PlatformPartnerIdsDuplicatedError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 다건 생성 성공 응답
     * @description 파트너 다건 생성 성공 응답
     */
    CreatePlatformPartnersResponse: {
      /** 생성된 파트너 리스트 */
      partners: components['schemas']['PlatformPartner'][];
    };
    CreatePlatformPayoutBody: {
      filter: components['schemas']['PlatformPartnerSettlementFilterInput'];
    };
    CreatePlatformPayoutError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNoPayablePartnerSettlementsError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformOngoingPayoutExistsError']
      | components['schemas']['UnauthorizedError'];
    CreatePlatformPayoutResponse: {
      payout: components['schemas']['PlatformPayout'];
    };
    /**
     * 통화 단위
     * @description 통화 단위
     *
     * @enum {string}
     */
    Currency:
      | 'AED'
      | 'AFN'
      | 'ALL'
      | 'AMD'
      | 'ANG'
      | 'AOA'
      | 'ARS'
      | 'AUD'
      | 'AWG'
      | 'AZN'
      | 'BAM'
      | 'BBD'
      | 'BDT'
      | 'BGN'
      | 'BHD'
      | 'BIF'
      | 'BMD'
      | 'BND'
      | 'BOB'
      | 'BOV'
      | 'BRL'
      | 'BSD'
      | 'BTN'
      | 'BWP'
      | 'BYN'
      | 'BZD'
      | 'CAD'
      | 'CDF'
      | 'CHE'
      | 'CHF'
      | 'CHW'
      | 'CLF'
      | 'CLP'
      | 'CNY'
      | 'COP'
      | 'COU'
      | 'CRC'
      | 'CUC'
      | 'CUP'
      | 'CVE'
      | 'CZK'
      | 'DJF'
      | 'DKK'
      | 'DOP'
      | 'DZD'
      | 'EGP'
      | 'ERN'
      | 'ETB'
      | 'EUR'
      | 'FJD'
      | 'FKP'
      | 'GBP'
      | 'GEL'
      | 'GHS'
      | 'GIP'
      | 'GMD'
      | 'GNF'
      | 'GTQ'
      | 'GYD'
      | 'HKD'
      | 'HNL'
      | 'HRK'
      | 'HTG'
      | 'HUF'
      | 'IDR'
      | 'ILS'
      | 'INR'
      | 'IQD'
      | 'IRR'
      | 'ISK'
      | 'JMD'
      | 'JOD'
      | 'JPY'
      | 'KES'
      | 'KGS'
      | 'KHR'
      | 'KMF'
      | 'KPW'
      | 'KRW'
      | 'KWD'
      | 'KYD'
      | 'KZT'
      | 'LAK'
      | 'LBP'
      | 'LKR'
      | 'LRD'
      | 'LSL'
      | 'LYD'
      | 'MAD'
      | 'MDL'
      | 'MGA'
      | 'MKD'
      | 'MMK'
      | 'MNT'
      | 'MOP'
      | 'MRU'
      | 'MUR'
      | 'MVR'
      | 'MWK'
      | 'MXN'
      | 'MXV'
      | 'MYR'
      | 'MZN'
      | 'NAD'
      | 'NGN'
      | 'NIO'
      | 'NOK'
      | 'NPR'
      | 'NZD'
      | 'OMR'
      | 'PAB'
      | 'PEN'
      | 'PGK'
      | 'PHP'
      | 'PKR'
      | 'PLN'
      | 'PYG'
      | 'QAR'
      | 'RON'
      | 'RSD'
      | 'RUB'
      | 'RWF'
      | 'SAR'
      | 'SBD'
      | 'SCR'
      | 'SDG'
      | 'SEK'
      | 'SGD'
      | 'SHP'
      | 'SLE'
      | 'SLL'
      | 'SOS'
      | 'SRD'
      | 'SSP'
      | 'STN'
      | 'SVC'
      | 'SYP'
      | 'SZL'
      | 'THB'
      | 'TJS'
      | 'TMT'
      | 'TND'
      | 'TOP'
      | 'TRY'
      | 'TTD'
      | 'TWD'
      | 'TZS'
      | 'UAH'
      | 'UGX'
      | 'USD'
      | 'USN'
      | 'UYI'
      | 'UYU'
      | 'UYW'
      | 'UZS'
      | 'VED'
      | 'VES'
      | 'VND'
      | 'VUV'
      | 'WST'
      | 'XAF'
      | 'XAG'
      | 'XAU'
      | 'XBA'
      | 'XBB'
      | 'XBC'
      | 'XBD'
      | 'XCD'
      | 'XDR'
      | 'XOF'
      | 'XPD'
      | 'XPF'
      | 'XPT'
      | 'XSU'
      | 'XTS'
      | 'XUA'
      | 'XXX'
      | 'YER'
      | 'ZAR'
      | 'ZMW'
      | 'ZWL';
    /**
     * 고객 정보
     * @description 고객 정보
     */
    Customer: {
      /**
       * 고객 아이디
       * @description 가맹점이 지정한 고객의 고유 식별자입니다.
       */
      id?: string;
      /** 이름 */
      name?: string;
      /** 출생 연도 */
      birthYear?: string;
      /** 성별 */
      gender?: components['schemas']['Gender'];
      /** 이메일 */
      email?: string;
      /** 전화번호 */
      phoneNumber?: string;
      /** 주소 */
      address?: components['schemas']['Address'];
      /** 우편번호 */
      zipcode?: string;
    };
    /**
     * 고객 정보 입력 정보
     * @description 고객 정보 입력 정보
     */
    CustomerInput: {
      /**
       * 고객 아이디
       * @description 가맹점이 지정한 고객의 고유 식별자입니다.
       */
      id?: string;
      /** 이름 */
      name?: components['schemas']['CustomerNameInput'];
      /** 출생 연도 */
      birthYear?: string;
      /** 출생월 */
      birthMonth?: string;
      /** 출생일 */
      birthDay?: string;
      /** 국가 */
      country?: components['schemas']['Country'];
      /** 성별 */
      gender?: components['schemas']['Gender'];
      /** 이메일 */
      email?: string;
      /** 전화번호 */
      phoneNumber?: string;
      /** 주소 */
      address?: components['schemas']['SeparatedAddressInput'];
      /** 우편번호 */
      zipcode?: string;
      /** 사업자 등록 번호 */
      businessRegistrationNumber?: string;
    };
    /**
     * 고객 이름 입력 정보
     * @description 고객 이름 입력 정보
     * 두 개의 이름 형식 중 한 가지만 선택하여 입력해주세요.
     */
    CustomerNameInput: {
      /** 한 줄 이름 형식 */
      full?: string;
      /** 분리형 이름 형식 */
      separated?: components['schemas']['CustomerSeparatedName'];
    };
    /**
     * 고객 분리형 이름
     * @description 고객 분리형 이름
     */
    CustomerSeparatedName: {
      /** 이름 */
      first: string;
      /** 성 */
      last: string;
    };
    DateRange: {
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      from: string;
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      until: string;
    };
    /**
     * 시간 범위
     * @description 시간 범위
     */
    DateTimeRange: {
      /** Format: date-time */
      from: string;
      /** Format: date-time */
      until: string;
    };
    /**
     * 요일
     * @description 요일
     *
     * @enum {string}
     */
    DayOfWeek: 'FRI' | 'MON' | 'SAT' | 'SUN' | 'THU' | 'TUE' | 'WED';
    DeleteB2bTaxInvoiceError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bTaxInvoiceNonDeletableStatusError']
      | components['schemas']['B2bTaxInvoiceNotFoundError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    DeleteBillingKeyError:
      | components['schemas']['BillingKeyAlreadyDeletedError']
      | components['schemas']['BillingKeyNotFoundError']
      | components['schemas']['BillingKeyNotIssuedError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PaymentScheduleAlreadyExistsError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 빌링키 삭제 성공 응답
     * @description 빌링키 삭제 성공 응답
     */
    DeleteBillingKeyResponse: {
      /**
       * 빌링키 삭제 완료 시점
       * Format: date-time
       */
      deletedAt: string;
    };
    DeletePlatformPayoutError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPayoutAlreadyCompletedError']
      | components['schemas']['PlatformPayoutCreatorMismatchedError']
      | components['schemas']['PlatformPayoutNotFoundError']
      | components['schemas']['UnauthorizedError'];
    DeletePlatformPayoutResponse: Record<string, never>;
    DeletePlatformTransferError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformCancelOrderTransfersExistsError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformTransferNonDeletableStatusError']
      | components['schemas']['PlatformTransferNotFoundError']
      | components['schemas']['UnauthorizedError'];
    DeletePlatformTransferResponse: Record<string, never>;
    /**
     * 배송 완료
     * @description 배송 완료
     */
    DeliveredPaymentEscrow: {
      /** 에스크로 상태 */
      status: string;
      /** 택배사 */
      company: string;
      /** 송장번호 */
      invoiceNumber: string;
      /**
       * 발송 일시
       * Format: date-time
       */
      sentAt?: string;
      /**
       * 배송등록 처리 일자
       * Format: date-time
       */
      appliedAt?: string;
    };
    DownloadPlatformPayoutSheetError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPayoutNotFoundError']
      | components['schemas']['PlatformPayoutSheetNotFoundError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 간편 결제 수단
     * @description 간편 결제 수단
     *
     * @enum {string}
     */
    EasyPayMethodType: 'CARD' | 'CHARGE' | 'TRANSFER';
    /**
     * 간편 결제사
     * @description 간편 결제사
     *
     * @enum {string}
     */
    EasyPayProvider:
      | 'ALIPAY'
      | 'APPLEPAY'
      | 'CHAI'
      | 'KAKAOPAY'
      | 'KB_APP'
      | 'KPAY'
      | 'LGPAY'
      | 'LPAY'
      | 'NAVERPAY'
      | 'PAYCO'
      | 'PINPAY'
      | 'SAMSUNGPAY'
      | 'SKPAY'
      | 'SSGPAY'
      | 'TOSSPAY'
      | 'TOSS_BRANDPAY';
    /**
     * 실패한 본인인증 내역
     * @description 실패한 본인인증 내역
     */
    FailedIdentityVerification: {
      /** 본인인증 상태 */
      status: string;
      /** 본인인증 내역 아이디 */
      id: string;
      /** 사용된 본인인증 채널 */
      channel?: components['schemas']['SelectedChannel'];
      /** 요청 시 고객 정보 */
      requestedCustomer: components['schemas']['IdentityVerificationRequestedCustomer'];
      /** 사용자 지정 데이터 */
      customData?: string;
      /**
       * 본인인증 요청 시점
       * Format: date-time
       */
      requestedAt: string;
      /**
       * 업데이트 시점
       * Format: date-time
       */
      updatedAt: string;
      /**
       * 상태 업데이트 시점
       * Format: date-time
       */
      statusChangedAt: string;
    };
    /**
     * 결제 실패 상태 건
     * @description 결제 실패 상태 건
     */
    FailedPayment: {
      /** 결제 건 상태 */
      status: string;
      /** 결제 건 아이디 */
      id: string;
      /**
       * 결제 건 포트원 채번 아이디
       * @description V1 결제 건의 경우 imp_uid에 해당합니다.
       */
      transactionId: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제수단 정보 */
      method?: components['schemas']['PaymentMethod'];
      /** 결제 채널 */
      channel?: components['schemas']['SelectedChannel'];
      /** 포트원 버전 */
      version: components['schemas']['PortOneVersion'];
      /**
       * 결제 예약 건 아이디
       * @description 결제 예약을 이용한 경우에만 존재
       */
      scheduleId?: string;
      /**
       * 결제 시 사용된 빌링키
       * @description 빌링키 결제인 경우에만 존재
       */
      billingKey?: string;
      /** 웹훅 발송 내역 */
      webhooks?: components['schemas']['PaymentWebhook'][];
      /**
       * 결제 요청 시점
       * Format: date-time
       */
      requestedAt: string;
      /**
       * 업데이트 시점
       * Format: date-time
       */
      updatedAt: string;
      /**
       * 상태 업데이트 시점
       * Format: date-time
       */
      statusChangedAt: string;
      /** 주문명 */
      orderName: string;
      /** 결제 금액 관련 세부 정보 */
      amount: components['schemas']['PaymentAmount'];
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 구매자 정보 */
      customer: components['schemas']['Customer'];
      /** 프로모션 아이디 */
      promotionId?: string;
      /** 문화비 지출 여부 */
      isCulturalExpense?: boolean;
      /**
       * 에스크로 결제 정보
       * @description 에스크로 결제인 경우 존재합니다.
       */
      escrow?: components['schemas']['PaymentEscrow'];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 상품 갯수
       * Format: int32
       */
      productCount?: number;
      /** 사용자 지정 데이터 */
      customData?: string;
      /** 국가 코드 */
      country?: components['schemas']['Country'];
      /**
       * 결제 실패 시점
       * Format: date-time
       */
      failedAt: string;
    };
    /**
     * 취소 실패 상태
     * @description 취소 실패 상태
     */
    FailedPaymentCancellation: {
      /** 결제 취소 내역 상태 */
      status: string;
      /** 취소 내역 아이디 */
      id: string;
      /** PG사 결제 취소 내역 아이디 */
      pgCancellationId?: string;
      /**
       * 취소 총 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 취소 금액 중 면세 금액
       * Format: int64
       */
      taxFreeAmount: number;
      /**
       * 취소 금액 중 부가세액
       * Format: int64
       */
      vatAmount: number;
      /**
       * 적립형 포인트의 환불 금액
       * Format: int64
       */
      easyPayDiscountAmount?: number;
      /** 취소 사유 */
      reason: string;
      /**
       * 취소 시점
       * Format: date-time
       */
      cancelledAt?: string;
      /**
       * 취소 요청 시점
       * Format: date-time
       */
      requestedAt: string;
    };
    /**
     * 결제 실패 상태
     * @description 결제 실패 상태
     */
    FailedPaymentSchedule: {
      /** 결제 예약 건 상태 */
      status: string;
      /** 결제 예약건 아이디 */
      id: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제 건 아이디 */
      paymentId: string;
      /** 빌링키 */
      billingKey: string;
      /** 주문명 */
      orderName: string;
      /** 문화비 지출 여부 */
      isCulturalExpense: boolean;
      /** 에스크로 결제 여부 */
      isEscrow: boolean;
      /** 고객 정보 */
      customer: components['schemas']['Customer'];
      /** 사용자 지정 데이터 */
      customData: string;
      /**
       * 결제 총 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFreeAmount?: number;
      /** 통화 */
      currency: components['schemas']['Currency'];
      /**
       * 할부 개월 수
       * Format: int32
       */
      installmentMonth?: number;
      /** 웹훅 주소 */
      noticeUrls?: string[];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 결제 예정 시점
       * Format: date-time
       */
      timeToPay: string;
      /**
       * 결제 시작 시점
       * Format: date-time
       */
      startedAt: string;
      /**
       * 결제 완료 시점
       * Format: date-time
       */
      completedAt: string;
    };
    /**
     * 요청이 거절된 경우
     * @description 요청이 거절된 경우
     */
    ForbiddenError: {
      type: string;
      message?: string;
    };
    /**
     * 성별
     * @description 성별
     *
     * @enum {string}
     */
    Gender: 'FEMALE' | 'MALE' | 'OTHER';
    /** @description 결제 건 커서 기반 대용량 다건 조회를 위한 입력 정보 */
    GetAllPaymentsByCursorBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /**
       * 결제 건 생성시점 범위 조건의 시작
       * Format: date-time
       * @description 값을 입력하지 않으면 end의 90일 전으로 설정됩니다.
       */
      from?: string;
      /**
       * 결제 건 생성시점 범위 조건의 끝
       * Format: date-time
       * @description 값을 입력하지 않으면 현재 시점으로 설정됩니다.
       */
      until?: string;
      /**
       * 커서
       * @description 결제 건 리스트 중 어디서부터 읽어야 할지 가리키는 값입니다. 최초 요청일 경우 값을 입력하지 마시되, 두번째 요청 부터는 이전 요청 응답값의 cursor를 입력해주시면 됩니다.
       */
      cursor?: string;
      /**
       * 페이지 크기
       * Format: int32
       * @description 미입력 시 기본값은 10 이며 최대 1000까지 허용
       */
      size?: number;
    };
    /**
     * 결제 건 커서 기반 대용량 다건 조회 성공 응답 정보
     * @description 결제 건 커서 기반 대용량 다건 조회 성공 응답 정보
     */
    GetAllPaymentsByCursorResponse: {
      /** 조회된 결제 건 및 커서 정보 리스트 */
      items: components['schemas']['PaymentWithCursor'][];
    };
    GetAllPaymentsError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 가맹점의 평균 거래액 현황 조회를 위한 입력 정보
     * @description 가맹점의 평균 거래액 현황 조회를 위한 입력 정보
     */
    GetAnalyticsAverageAmountChartBody: {
      /**
       * 조회할 평균 거래액 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 평균 거래액 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
      /**
       * 결제취소건 제외 여부
       * @description true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.
       */
      excludeCancelled: boolean;
      /**
       * 평균 거래액 현황 조회 단위
       * @description 시간별, 월별 단위만 지원됩니다.
       */
      timeGranularity: components['schemas']['AnalyticsTimeGranularity'];
    };
    /**
     * 가맹점의 환불율 조회를 위한 입력 정보
     * @description 가맹점의 환불율 조회를 위한 입력 정보
     */
    GetAnalyticsCancellationRateBody: {
      /**
       * 환불율 조회 기간의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 환불율 조회 기간의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
    };
    GetAnalyticsCancellationRateError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 가맹점의 카드결제 현황 조회를 위한 입력 정보
     * @description 가맹점의 카드결제 현황 조회를 위한 입력 정보
     */
    GetAnalyticsCardChartBody: {
      /**
       * 조회할 카드결제 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 카드결제 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
      /**
       * 결제취소건 제외 여부
       * @description true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.
       */
      excludeCancelled: boolean;
      /**
       * 카드결제 현황 조회 단위
       * @description 시간별, 월별 단위만 지원됩니다.
       */
      timeGranularity: components['schemas']['AnalyticsTimeGranularity'];
    };
    GetAnalyticsCardChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 가맹점의 카드사별 결제 현황 조회를 위한 입력 정보
     * @description 가맹점의 카드사별 결제 현황 조회를 위한 입력 정보
     */
    GetAnalyticsCardCompanyChartBody: {
      /**
       * 조회할 카드사별 결제 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 카드사별 결제 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
      /**
       * 결제취소건 제외 여부
       * @description true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.
       */
      excludeCancelled: boolean;
      /**
       * 카드사별 결제 현황 조회 단위
       * @description 시간별, 월별 단위만 지원됩니다.
       */
      timeGranularity: components['schemas']['AnalyticsTimeGranularity'];
      /** 조회할 카드사 */
      cardCompanies: components['schemas']['CardCompany'][];
      /** 나머지 집계에 포함되지 않을 카드사 */
      excludesFromRemainders: components['schemas']['CardCompany'][];
    };
    GetAnalyticsCardCompanyChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 가맹점의 간편결제 현황 조회를 위한 입력 정보
     * @description 가맹점의 간편결제 현황 조회를 위한 입력 정보
     */
    GetAnalyticsEasyPayChartBody: {
      /**
       * 조회할 간편결제 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 간편결제 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
      /**
       * 결제취소건 제외 여부
       * @description true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.
       */
      excludeCancelled: boolean;
      /**
       * 간편결제 현황 조회 단위
       * @description 시간별, 월별 단위만 지원됩니다.
       */
      timeGranularity: components['schemas']['AnalyticsTimeGranularity'];
    };
    GetAnalyticsEasyPayChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 가맹점의 간편결제사별 결제 현황 조회를 위한 입력 정보
     * @description 가맹점의 간편결제사별 결제 현황 조회를 위한 입력 정보
     */
    GetAnalyticsEasyPayProviderChartBody: {
      /**
       * 조회할 간편결제사별 결제 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 간편결제사별 결제 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
      /**
       * 결제취소건 제외 여부
       * @description true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.
       */
      excludeCancelled: boolean;
      /**
       * 간편결제사별 결제 현황 조회 단위
       * @description 시간별, 월별 단위만 지원됩니다.
       */
      timeGranularity: components['schemas']['AnalyticsTimeGranularity'];
      /** 조회할 간편결제사 */
      easyPayProviders: components['schemas']['EasyPayProvider'][];
      /** 나머지 집계에 포함되지 않을 간편결제사 */
      excludesFromRemainders: components['schemas']['EasyPayProvider'][];
    };
    GetAnalyticsEasyPayProviderChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetAnalyticsOverseasPaymentUsageError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 가맹점의 결제 현황 조회를 위한 입력 정보
     * @description 가맹점의 결제 현황 조회를 위한 입력 정보
     */
    GetAnalyticsPaymentChartBody: {
      /**
       * 조회할 결제 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 결제 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
      /**
       * 결제취소건 제외 여부
       * @description true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.
       */
      excludeCancelled?: boolean;
      /**
       * 결제 현황 조회 단위
       * @description 시간별, 월별 단위만 지원됩니다.
       */
      timeGranularity: components['schemas']['AnalyticsTimeGranularity'];
    };
    GetAnalyticsPaymentChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 가맹점의 결제 현황 인사이트 조회를 위한 입력 정보
     * @description 가맹점의 결제 현황 인사이트 조회를 위한 입력 정보
     */
    GetAnalyticsPaymentChartInsightBody: {
      /**
       * 조회할 결제 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 결제 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
      /**
       * 결제취소건 제외 여부
       * @description true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.
       */
      excludeCancelled?: boolean;
      /**
       * 타임존 시간 오프셋
       * Format: int32
       * @description 입력된 시간 오프셋 기준으로 일, 주, 월이 집계 됩니다.
       */
      timezoneHourOffset: number;
    };
    GetAnalyticsPaymentChartInsightError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 가맹점의 결제수단 현황 조회를 위한 입력 정보
     * @description 가맹점의 결제수단 현황 조회를 위한 입력 정보
     */
    GetAnalyticsPaymentMethodChartBody: {
      /**
       * 조회할 결제수단 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 결제수단 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
      /**
       * 결제취소건 제외 여부
       * @description true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.
       */
      excludeCancelled: boolean;
    };
    /**
     * 가맹점의 결제수단 트렌드 조회를 위한 입력 정보
     * @description 가맹점의 결제수단 트렌드 조회를 위한 입력 정보
     */
    GetAnalyticsPaymentMethodTrendChartBody: {
      /**
       * 조회할 결제수단 트렌드의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 결제수단 트렌드의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
      /**
       * 결제취소건 제외 여부
       * @description true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.
       */
      excludeCancelled: boolean;
      /**
       * 결제 결제수단 트렌드 조회 단위
       * @description 시간별, 월별 단위만 지원됩니다.
       */
      timeGranularity: components['schemas']['AnalyticsTimeGranularity'];
    };
    /**
     * 가맹점의 결제환경별 결제전환율 조회를 위한 입력 정보
     * @description 가맹점의 결제환경별 결제전환율 조회를 위한 입력 정보
     */
    GetAnalyticsPaymentStatusByPaymentClientChartBody: {
      /**
       * 조회할 결제 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 결제 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
    };
    /**
     * 가맹점의 결제수단별 결제전환율 조회를 위한 입력 정보
     * @description 가맹점의 결제수단별 결제전환율 조회를 위한 입력 정보
     */
    GetAnalyticsPaymentStatusByPaymentMethodChartBody: {
      /**
       * 조회할 결제 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 결제 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
    };
    /**
     * 가맹점의 PG사별 결제전환율 조회를 위한 입력 정보
     * @description 가맹점의 PG사별 결제전환율 조회를 위한 입력 정보
     */
    GetAnalyticsPaymentStatusByPgCompanyChartBody: {
      /**
       * 조회할 결제 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 결제 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
    };
    /**
     * 가맹점의 결제상태 이력 집계 조회를 위한 입력 정보
     * @description 가맹점의 결제상태 이력 집계 조회를 위한 입력 정보
     */
    GetAnalyticsPaymentStatusChartBody: {
      /**
       * 조회할 결제 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 결제 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
    };
    /**
     * 가맹점의 결제대행사 현황 조회를 위한 입력 정보
     * @description 가맹점의 결제대행사 현황 조회를 위한 입력 정보
     */
    GetAnalyticsPgCompanyChartBody: {
      /**
       * 조회할 결제대행사 현황의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 결제대행사 현황의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
      /**
       * 결제취소건 제외 여부
       * @description true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.
       */
      excludeCancelled: boolean;
    };
    /**
     * 가맹점의 결제대행사별 거래 추이 조회를 위한 입력 정보
     * @description 가맹점의 결제대행사별 거래 추이 조회를 위한 입력 정보
     */
    GetAnalyticsPgCompanyTrendChartBody: {
      /**
       * 조회할 결제대행사별 거래 추이의 시작 시간
       * Format: date-time
       */
      from: string;
      /**
       * 조회할 결제대행사별 거래 추이의 끝 시간
       * Format: date-time
       */
      until: string;
      /**
       * 조회할 결제 통화
       * @description 입력된 통화로 발생한 결제내역만 응답에 포함됩니다.
       */
      currency: components['schemas']['Currency'];
      /**
       * 결제취소건 제외 여부
       * @description true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.
       */
      excludeCancelled: boolean;
      /**
       * 결제 결제대행사별 거래 추이 조회 단위
       * @description 시간별, 월별 단위만 지원됩니다.
       */
      timeGranularity: components['schemas']['AnalyticsTimeGranularity'];
      /** 조회할 결제대행사 */
      pgCompanies: components['schemas']['PgCompany'][];
    };
    GetAverageAmountChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetB2bAccountHolderError:
      | components['schemas']['B2bBankAccountNotFoundError']
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bFinancialSystemCommunicationError']
      | components['schemas']['B2bFinancialSystemFailureError']
      | components['schemas']['B2bFinancialSystemUnderMaintenanceError']
      | components['schemas']['B2bForeignExchangeAccountError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bRegularMaintenanceTimeError']
      | components['schemas']['B2bSuspendedAccountError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 예금주 조회 응답 정보
     * @description 예금주 조회 응답 정보
     */
    GetB2bBankAccountHolderResponse: {
      /** 예금주 */
      accountHolder: string;
    };
    GetB2bCertificateError:
      | components['schemas']['B2bCertificateUnregisteredError']
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bMemberCompanyNotFoundError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetB2bCertificateRegistrationUrlError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bMemberCompanyNotFoundError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 인증서 등록 URL 조회 응답 정보
     * @description 인증서 등록 URL 조회 응답 정보
     */
    GetB2bCertificateRegistrationUrlResponse: {
      /** 인증서 등록 URL */
      url: string;
    };
    GetB2bCompanyStateError:
      | components['schemas']['B2bCompanyNotFoundError']
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 담당자 ID 존재 여부 응답 정보
     * @description 담당자 ID 존재 여부 응답 정보
     */
    GetB2bContactIdExistenceResponse: {
      /** 존재 여부 */
      exists: boolean;
    };
    GetB2bMemberCompanyContactError:
      | components['schemas']['B2bContactNotFoundError']
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bMemberCompanyNotFoundError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetB2bMemberCompanyError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bMemberCompanyNotFoundError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetB2bTaxInvoiceError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bTaxInvoiceNotFoundError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetB2bTaxInvoicePdfDownloadUrlError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bTaxInvoiceNotFoundError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 세금계산서 PDF 다운로드 URL 성공 응답
     * @description 세금계산서 PDF 다운로드 URL 성공 응답
     */
    GetB2bTaxInvoicePdfDownloadUrlResponse: {
      /** 세금계산서 PDF 다운로드 URL */
      url: string;
    };
    GetB2bTaxInvoicePopupUrlError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bTaxInvoiceNotFoundError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 세금계산서 팝업 URL 성공 응답
     * @description 세금계산서 팝업 URL 성공 응답
     */
    GetB2bTaxInvoicePopupUrlResponse: {
      /** 세금계산서 팝업 URL */
      url: string;
    };
    GetB2bTaxInvoicePrintUrlError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bTaxInvoiceNotFoundError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 세금계산서 프린트 URL 성공 응답
     * @description 세금계산서 프린트 URL 성공 응답
     */
    GetB2bTaxInvoicePrintUrlResponse: {
      /** 세금계산서 프린트 URL */
      url: string;
    };
    GetB2bTaxInvoicesError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 세금계산서 다건 조회 성공 응답
     * @description 세금계산서 다건 조회 성공 응답
     */
    GetB2bTaxInvoicesResponse: {
      /** 조회된 세금계산서 목록 */
      items: components['schemas']['B2bTaxInvoiceSummary'][];
      /** 조회된 페이지 정보 */
      page: components['schemas']['PageInfo'];
    };
    GetBillingKeyInfoError:
      | components['schemas']['BillingKeyNotFoundError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetCashReceiptError:
      | components['schemas']['CashReceiptNotFoundError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetChannelsError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 채널 다건 조회 성공 응답 정보
     * @description 채널 다건 조회 성공 응답 정보
     */
    GetChannelsResponse: {
      /** 조회된 채널 리스트 */
      items: components['schemas']['Channel'][];
    };
    GetIdentityVerificationError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['IdentityVerificationNotFoundError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetKakaopayPaymentOrderError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 카카오페이 주문 조회 응답
     * @description 카카오페이 주문 조회 응답
     */
    GetKakaopayPaymentOrderResponse: {
      /**
       * HTTP 상태 코드
       * Format: int32
       */
      statusCode: number;
      /** HTTP 응답 본문 (JSON) */
      body: string;
    };
    GetMerchantError: components['schemas']['UnauthorizedError'];
    GetPaymentError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PaymentNotFoundError']
      | components['schemas']['UnauthorizedError'];
    GetPaymentMethodChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetPaymentMethodTrendChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetPaymentScheduleError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PaymentScheduleNotFoundError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 결제 예약 다건 조회를 위한 입력 정보
     * @description 결제 예약 다건 조회를 위한 입력 정보
     * 조회 결과는 결제 예정 시점(timeToPay) 기준 최신 순으로 정렬됩니다.
     */
    GetPaymentSchedulesBody: {
      /**
       * 요청할 페이지 정보
       * @description 미 입력 시 number: 0, size: 10 으로 기본값이 적용됩니다.
       */
      page?: components['schemas']['PageInput'];
      /** 조회할 결제 예약 건의 조건 필터 */
      filter?: components['schemas']['PaymentScheduleFilterInput'];
    };
    GetPaymentSchedulesError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 결제 예약 다건 조회 성공 응답 정보
     * @description 결제 예약 다건 조회 성공 응답 정보
     */
    GetPaymentSchedulesResponse: {
      /** 조회된 결제 예약 건 리스트 */
      items: components['schemas']['PaymentSchedule'][];
      /** 조회된 페이지 정보 */
      page: components['schemas']['PageInfo'];
    };
    GetPaymentStatusByPaymentClientChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetPaymentStatusByPaymentMethodChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetPaymentStatusByPgCompanyChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetPaymentStatusChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /** @description 결제 건 다건 조회를 위한 입력 정보 */
    GetPaymentsBody: {
      /**
       * 요청할 페이지 정보
       * @description 미 입력 시 number: 0, size: 10 으로 기본값이 적용됩니다.
       */
      page?: components['schemas']['PageInput'];
      /**
       * 조회할 결제 건 조건 필터
       * @description V1 결제 건의 경우 일부 필드에 대해 필터가 적용되지 않을 수 있습니다.
       */
      filter?: components['schemas']['PaymentFilterInput'];
    };
    GetPaymentsError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 결제 건 다건 조회 성공 응답 정보
     * @description 결제 건 다건 조회 성공 응답 정보
     */
    GetPaymentsResponse: {
      /** 조회된 결제 건 리스트 */
      items: components['schemas']['Payment'][];
      /** 조회된 페이지 정보 */
      page: components['schemas']['PageInfo'];
    };
    GetPgCompanyChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetPgCompanyTrendChartError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformAccountHolderError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformExternalApiFailedError']
      | components['schemas']['PlatformExternalApiTemporarilyFailedError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 추가 수수료 정책 다건 조회를 위한 입력 정보
     * @description 추가 수수료 정책 다건 조회를 위한 입력 정보
     */
    GetPlatformAdditionalFeePoliciesBody: {
      /** 요청할 페이지 정보 */
      page: components['schemas']['PageInput'];
      /** 조회할 추가 수수료 정책 조건 필터 */
      filter?: components['schemas']['PlatformAdditionalFeePolicyFilterInput'];
    };
    GetPlatformAdditionalFeePoliciesError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 추가 수수료 정책 다건 조회 성공 응답 정보
     * @description 추가 수수료 정책 다건 조회 성공 응답 정보
     */
    GetPlatformAdditionalFeePoliciesResponse: {
      /** 조회된 추가 수수료 정책 리스트 */
      items: components['schemas']['PlatformAdditionalFeePolicy'][];
      /** 조회된 페이지 정보 */
      page: components['schemas']['PageInfo'];
    };
    GetPlatformAdditionalFeePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformAdditionalFeePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformAdditionalFeePolicyScheduleError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformAdditionalFeePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformContractError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformContractScheduleError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 계약 다건 조회를 위한 입력 정보
     * @description 계약 다건 조회를 위한 입력 정보
     */
    GetPlatformContractsBody: {
      /** 요청할 페이지 정보 */
      page?: components['schemas']['PageInput'];
      /** 조회할 계약 조건 필터 */
      filter?: components['schemas']['PlatformContractFilterInput'];
    };
    GetPlatformContractsError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 계약 다건 조회 성공 응답
     * @description 계약 다건 조회 성공 응답
     */
    GetPlatformContractsResponse: {
      /** 조회된 계약 리스트 */
      items: components['schemas']['PlatformContract'][];
      /** 조회된 페이지 정보 */
      page: components['schemas']['PageInfo'];
    };
    /**
     * 할인 분담 정책 다건 조회를 위한 입력 정보
     * @description 할인 분담 정책 다건 조회를 위한 입력 정보
     */
    GetPlatformDiscountSharePoliciesBody: {
      /** 요청할 페이지 정보 */
      page?: components['schemas']['PageInput'];
      /** 조회할 할인 분담 정책 조건 필터 */
      filter?: components['schemas']['PlatformDiscountSharePolicyFilterInput'];
    };
    GetPlatformDiscountSharePoliciesError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 할인 분담 정책 다건 조회 성공 응답 정보
     * @description 할인 분담 정책 다건 조회 성공 응답 정보
     */
    GetPlatformDiscountSharePoliciesResponse: {
      /** 조회된 할인 분담 정책 리스트 */
      items: components['schemas']['PlatformDiscountSharePolicy'][];
      /** 조회된 페이지 정보 */
      page: components['schemas']['PageInfo'];
    };
    GetPlatformDiscountSharePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformDiscountSharePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformDiscountSharePolicyFilterOptionsError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformDiscountSharePolicyScheduleError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformDiscountSharePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 현황 조회를 위한 입력 정보
     * @description 파트너 현황 조회를 위한 입력 정보
     */
    GetPlatformPartnerDashboardBody: {
      /**
       * 테스트 조회 여부
       * @description true 이면 isForTest 가 true 인 파트너들을 조회하고, false 이면 isForTest 가 false 인 파트너들을 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.
       */
      isForTest?: boolean;
    };
    GetPlatformPartnerDashboardError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformPartnerError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformPartnerFilterOptionsError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformPartnerScheduleError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformPartnerSettlementFilterOptionsError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 정산내역 다건 조회를 위한 입력 정보
     * @description 정산내역 다건 조회를 위한 입력 정보
     */
    GetPlatformPartnerSettlementsBody: {
      /** 요청할 페이지 정보 */
      page?: components['schemas']['PageInput'];
      /** 조회할 정산내역 조건 필터 */
      filter: components['schemas']['PlatformPartnerSettlementFilterInput'];
    };
    GetPlatformPartnerSettlementsError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 정산내역 다건 조회 성공 응답 정보
     * @description 정산내역 다건 조회 성공 응답 정보
     */
    GetPlatformPartnerSettlementsResponse: {
      /** 조회된 정산내역 리스트 */
      items: components['schemas']['PlatformPartnerSettlement'][];
      /** 조회된 페이지 정보 */
      page: components['schemas']['PageInfo'];
    };
    /**
     * 파트너 다건 조회를 위한 입력 정보
     * @description 파트너 다건 조회를 위한 입력 정보
     */
    GetPlatformPartnersBody: {
      /** 요청할 페이지 정보 */
      page?: components['schemas']['PageInput'];
      /** 조회할 파트너 조건 필터 */
      filter?: components['schemas']['PlatformPartnerFilterInput'];
    };
    GetPlatformPartnersError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 다건 조회 성공 응답 정보
     * @description 파트너 다건 조회 성공 응답 정보
     */
    GetPlatformPartnersResponse: {
      /** 조회된 파트너 리스트 */
      items: components['schemas']['PlatformPartner'][];
      /** 조회된 페이지 정보 */
      page: components['schemas']['PageInfo'];
    };
    GetPlatformPayableSettlementDatesError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 지급 가능한 정산일 리스트 조회 성공 응답 정보
     * @description 지급 가능한 정산일 리스트 조회 성공 응답 정보
     */
    GetPlatformPayableSettlementDatesResponse: {
      /** IN_PROCESS, SETTLED 상태의 Transfer가 등록되어 있는 정산일 리스트 */
      settlementDates: string[];
    };
    GetPlatformPayoutError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPayoutNotFoundError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformPayoutPartnerSettlementsBody: {
      page?: components['schemas']['PageInput'];
    };
    GetPlatformPayoutPartnerSettlementsError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPayoutNotFoundError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformPayoutSheetsError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPayoutNotFoundError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformPayoutSheetsResponse: {
      items: components['schemas']['PayoutSheet'][];
    };
    GetPlatformPayoutsBody: {
      page?: components['schemas']['PageInput'];
      filter?: components['schemas']['PlatformPayoutFilterInput'];
    };
    GetPlatformPayoutsError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformPayoutsResponse: {
      items: components['schemas']['PlatformPayout'][];
      page: components['schemas']['PageInfo'];
    };
    GetPlatformTransferDashboardBody: {
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      isForTest?: boolean;
    };
    GetPlatformTransferDashboardError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformTransferError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformTransferNotFoundError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformTransferFilterOptionsError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformTransferSummariesBody: {
      page?: components['schemas']['PageInput'];
      filter?: components['schemas']['PlatformTransferFilterInput'];
    };
    GetPlatformTransferSummariesError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    GetPlatformTransferSummariesResponse: {
      transferSummaries: components['schemas']['PlatformTransferSummary'][];
      page: components['schemas']['PageInfo'];
    };
    /**
     * 본인인증 내역
     * @description 본인인증 내역
     */
    IdentityVerification:
      | components['schemas']['FailedIdentityVerification']
      | components['schemas']['ReadyIdentityVerification']
      | components['schemas']['VerifiedIdentityVerification'];
    /**
     * 본인인증 건이 이미 API로 요청된 상태인 경우
     * @description 본인인증 건이 이미 API로 요청된 상태인 경우
     */
    IdentityVerificationAlreadySentError: {
      type: string;
      message?: string;
    };
    /**
     * 본인인증 건이 이미 인증 완료된 상태인 경우
     * @description 본인인증 건이 이미 인증 완료된 상태인 경우
     */
    IdentityVerificationAlreadyVerifiedError: {
      type: string;
      message?: string;
    };
    /**
     * 본인인증 방식
     * @description 본인인증 방식
     *
     * @enum {string}
     */
    IdentityVerificationMethod: 'APP' | 'SMS';
    /**
     * 요청된 본인인증 건이 존재하지 않는 경우
     * @description 요청된 본인인증 건이 존재하지 않는 경우
     */
    IdentityVerificationNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * 본인인증 건이 API로 요청된 상태가 아닌 경우
     * @description 본인인증 건이 API로 요청된 상태가 아닌 경우
     */
    IdentityVerificationNotSentError: {
      type: string;
      message?: string;
    };
    /**
     * 본인인증 통신사
     * @description 본인인증 통신사
     *
     * @enum {string}
     */
    IdentityVerificationOperator:
      | 'KT'
      | 'KT_MVNO'
      | 'LGU'
      | 'LGU_MVNO'
      | 'SKT'
      | 'SKT_MVNO';
    /**
     * 요청 시 고객 정보
     * @description 요청 시 고객 정보
     */
    IdentityVerificationRequestedCustomer: {
      /** 식별 아이디 */
      id?: string;
      /** 이름 */
      name?: string;
      /**
       * 전화번호
       * @description 특수 문자(-) 없이 숫자로만 이루어진 번호 형식입니다.
       */
      phoneNumber?: string;
    };
    /**
     * 인증된 고객 정보
     * @description 인증된 고객 정보
     */
    IdentityVerificationVerifiedCustomer: {
      /** 식별 아이디 */
      id?: string;
      /** 이름 */
      name: string;
      /**
       * 전화번호
       * @description 특수 문자(-) 없이 숫자로만 이루어진 번호 형식입니다.
       */
      phoneNumber?: string;
      /**
       * 생년월일 (yyyy-MM-dd)
       * @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.
       */
      birthDate: string;
      /** 성별 */
      gender: components['schemas']['Gender'];
      /** 외국인 여부 */
      isForeigner?: boolean;
      /** CI (개인 고유 식별키) */
      ci: string;
      /** DI (사이트별 개인 고유 식별키) */
      di: string;
    };
    /**
     * 빌링키 발급 시 결제 수단 입력 양식
     * @description 빌링키 발급 시 결제 수단 입력 양식
     */
    InstantBillingKeyPaymentMethodInput: {
      card?: components['schemas']['InstantBillingKeyPaymentMethodInputCard'];
    };
    /**
     * 카드 수단 정보 입력 양식
     * @description 카드 수단 정보 입력 양식
     */
    InstantBillingKeyPaymentMethodInputCard: {
      credential: components['schemas']['CardCredential'];
    };
    /**
     * 수기 결제 요청 정보
     * @description 수기 결제 요청 정보
     */
    InstantPaymentInput: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /** 채널키 */
      channelKey: string;
      /** 결제수단 정보 */
      method: components['schemas']['InstantPaymentMethodInput'];
      /** 주문명 */
      orderName: string;
      /**
       * 문화비 지출 여부
       * @description 기본값은 false 입니다.
       */
      isCulturalExpense?: boolean;
      /**
       * 에스크로 결제 여부
       * @description 기본값은 false 입니다.
       */
      isEscrow?: boolean;
      /** 고객 정보 */
      customer?: components['schemas']['CustomerInput'];
      /** 사용자 지정 데이터 */
      customData?: string;
      /** 결제 금액 세부 입력 정보 */
      amount: components['schemas']['PaymentAmountInput'];
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 결제 국가 */
      country?: components['schemas']['Country'];
      /**
       * 웹훅 주소
       * @description 결제 승인/실패 시 요청을 받을 웹훅 주소입니다.
       * 상점에 설정되어 있는 값보다 우선적으로 적용됩니다.
       * 입력된 값이 없을 경우에는 빈 배열로 해석됩니다.
       */
      noticeUrls?: string[];
      /**
       * 상품 정보
       * @description 입력된 값이 없을 경우에는 빈 배열로 해석됩니다.
       */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 상품 개수
       * Format: int32
       */
      productCount?: number;
      /** 상품 유형 */
      productType?: components['schemas']['PaymentProductType'];
      /** 배송지 주소 */
      shippingAddress?: components['schemas']['SeparatedAddressInput'];
    };
    /**
     * 수기 결제 수단 입력 정보
     * @description 수기 결제 수단 입력 정보
     * 하나의 필드만 입력합니다.
     */
    InstantPaymentMethodInput: {
      /** 카드 */
      card?: components['schemas']['InstantPaymentMethodInputCard'];
      /** 가상계좌 */
      virtualAccount?: components['schemas']['InstantPaymentMethodInputVirtualAccount'];
    };
    /**
     * 카드 수단 정보 입력 정보
     * @description 카드 수단 정보 입력 정보
     */
    InstantPaymentMethodInputCard: {
      /** 카드 인증 관련 정보 */
      credential: components['schemas']['CardCredential'];
      /**
       * 카드 할부 개월 수
       * Format: int32
       */
      installmentMonth?: number;
      /** 무이자 할부 적용 여부 */
      useFreeInstallmentPlan?: boolean;
      /** 무이자 할부 이자를 가맹점이 부담할지 여부 */
      useFreeInterestFromMerchant?: boolean;
      /** 카드 포인트 사용 여부 */
      useCardPoint?: boolean;
    };
    /**
     * 가상계좌 수단 정보 입력 정보
     * @description 가상계좌 수단 정보 입력 정보
     */
    InstantPaymentMethodInputVirtualAccount: {
      /** 은행 */
      bank: components['schemas']['Bank'];
      /** 입금 만료 기한 */
      expiry: components['schemas']['InstantPaymentMethodInputVirtualAccountExpiry'];
      /** 가상계좌 유형 */
      option: components['schemas']['InstantPaymentMethodInputVirtualAccountOption'];
      /** 현금영수증 정보 */
      cashReceipt: components['schemas']['InstantPaymentMethodInputVirtualAccountCashReceiptInfo'];
      /** 예금주명 */
      remitteeName?: string;
    };
    /**
     * 가상계좌 결제 시 현금영수증 정보
     * @description 가상계좌 결제 시 현금영수증 정보
     */
    InstantPaymentMethodInputVirtualAccountCashReceiptInfo: {
      /** 현금영수증 유형 */
      type: components['schemas']['CashReceiptInputType'];
      /** 사용자 식별 번호 */
      customerIdentityNumber: string;
    };
    /**
     * 입금 만료 기한
     * @description 입금 만료 기한
     * validHours와 dueDate 둘 중 하나의 필드만 입력합니다.
     */
    InstantPaymentMethodInputVirtualAccountExpiry: {
      /**
       * 유효 시간
       * Format: int32
       * @description 시간 단위로 입력합니다.
       */
      validHours?: number;
      /**
       * 만료 시점
       * Format: date-time
       */
      dueDate?: string;
    };
    /**
     * 가상계좌 발급 방식
     * @description 가상계좌 발급 방식
     */
    InstantPaymentMethodInputVirtualAccountOption: {
      /** 발급 유형 */
      type: components['schemas']['InstantPaymentMethodInputVirtualAccountOptionType'];
      /**
       * 고정식 가상계좌 발급 방식
       * @description 발급 유형을 FIXED 로 선택했을 시에만 입력합니다.
       */
      fixed?: components['schemas']['InstantPaymentMethodInputVirtualAccountOptionFixed'];
    };
    /**
     * 고정식 가상계좌 발급 유형
     * @description 고정식 가상계좌 발급 유형
     * pgAccountId, accountNumber 유형 중 한 개의 필드만 입력합니다.
     */
    InstantPaymentMethodInputVirtualAccountOptionFixed: {
      /**
       * Account ID 고정식 가상계좌
       * @description 가맹점이 가상계좌번호를 직접 관리하지 않고 PG사가 pgAccountId에 매핑되는 가상계좌번호를 내려주는 방식입니다.
       * 동일한 pgAccountId로 가상계좌 발급 요청시에는 항상 같은 가상계좌번호가 내려옵니다.
       */
      pgAccountId?: string;
      /**
       * Account Number 고정식 가상계좌
       * @description PG사가 일정 개수만큼의 가상계좌번호를 발급하여 가맹점에게 미리 전달하고 가맹점이 그 중 하나를 선택하여 사용하는 방식입니다.
       */
      accountNumber?: string;
    };
    /**
     * 가상계좌 발급 유형
     * @description 가상계좌 발급 유형
     *
     * @enum {string}
     */
    InstantPaymentMethodInputVirtualAccountOptionType: 'FIXED' | 'NORMAL';
    /**
     * 수기 결제가 완료된 결제 건 요약 정보
     * @description 수기 결제가 완료된 결제 건 요약 정보
     */
    InstantPaymentSummary: {
      /** PG사 결제 아이디 */
      pgTxId: string;
      /**
       * 결제 완료 시점
       * Format: date-time
       */
      paidAt: string;
    };
    /**
     * 요청된 입력 정보가 유효하지 않은 경우
     * @description 요청된 입력 정보가 유효하지 않은 경우
     * 허가되지 않은 값, 올바르지 않은 형식의 요청 등이 모두 해당됩니다.
     */
    InvalidRequestError: {
      type: string;
      message?: string;
    };
    IssueB2bTaxInvoiceError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bTaxInvoiceNotFoundError']
      | components['schemas']['B2bTaxInvoiceNotRequestedStatusError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 세금계산서 발행 정보
     * @description 세금계산서 발행 정보
     */
    IssueB2bTaxInvoiceRequestBody: {
      /** 사업자등록번호 */
      brn: string;
      /** 세금계산서 문서 번호 */
      documentKey: string;
      /**
       * 문서 번호 유형
       * @description 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.
       */
      documentKeyType?: components['schemas']['B2bTaxInvoiceDocumentKeyType'];
      /** 메모 */
      memo?: string;
      /** 이메일 제목 */
      emailSubject?: string;
    };
    /**
     * 빌링키 발급 요청 양식
     * @description 빌링키 발급 요청 양식
     */
    IssueBillingKeyBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /** 빌링키 결제 수단 정보 */
      method: components['schemas']['InstantBillingKeyPaymentMethodInput'];
      /** 채널키 */
      channelKey: string;
      /** 고객 정보 */
      customer?: components['schemas']['CustomerInput'];
      /** 사용자 지정 데이터 */
      customData?: string;
      /** PG사별 추가 파라미터 ("PG사별 연동 가이드" 참고) */
      bypass?: Record<string, never>;
      /**
       * 웹훅 주소
       * @description 빌링키 발급 시 요청을 받을 웹훅 주소입니다.
       * 상점에 설정되어 있는 값보다 우선적으로 적용됩니다.
       * 입력된 값이 없을 경우에는 빈 배열로 해석됩니다.
       */
      noticeUrls?: string[];
    };
    IssueBillingKeyError:
      | components['schemas']['ChannelNotFoundError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 빌링키 발급 성공 응답
     * @description 빌링키 발급 성공 응답
     */
    IssueBillingKeyResponse: {
      /** 빌링키 정보 */
      billingKeyInfo: components['schemas']['BillingKeyInfoSummary'];
    };
    /**
     * 현금영수증 발급 요청 양식
     * @description 현금영수증 발급 요청 양식
     */
    IssueCashReceiptBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /**
       * 결제 건 아이디
       * @description 외부 결제 건에 대한 수동 발급의 경우, 아이디를 직접 채번하여 입력합니다.
       */
      paymentId: string;
      /** 채널키 */
      channelKey: string;
      /** 현금 영수증 유형 */
      type: components['schemas']['CashReceiptType'];
      /** 주문명 */
      orderName: string;
      /** 화폐 */
      currency: components['schemas']['Currency'];
      /** 금액 세부 입력 정보 */
      amount: components['schemas']['PaymentAmountInput'];
      /** 상품 유형 */
      productType?: components['schemas']['PaymentProductType'];
      /** 고객 정보 */
      customer: components['schemas']['IssueCashReceiptCustomerInput'];
    };
    /**
     * 현금영수증 발급 시 고객 관련 입력 정보
     * @description 현금영수증 발급 시 고객 관련 입력 정보
     */
    IssueCashReceiptCustomerInput: {
      /** 고객 식별값 */
      identityNumber: string;
      /** 이름 */
      name?: string;
      /** 이메일 */
      email?: string;
      /** 전화번호 */
      phoneNumber?: string;
    };
    IssueCashReceiptError:
      | components['schemas']['CashReceiptAlreadyIssuedError']
      | components['schemas']['ChannelNotFoundError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 현금 영수증 발급 성공 응답
     * @description 현금 영수증 발급 성공 응답
     */
    IssueCashReceiptResponse: {
      cashReceipt: components['schemas']['CashReceiptSummary'];
    };
    /**
     * 발급 실패
     * @description 발급 실패
     */
    IssueFailedCashReceipt: {
      /** 현금영수증 상태 */
      status: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제 건 아이디 */
      paymentId: string;
      /** 현금영수증 발급에 사용된 채널 */
      channel?: components['schemas']['SelectedChannel'];
      /** 주문명 */
      orderName: string;
      /** 수동 발급 여부 */
      isManual: boolean;
    };
    /**
     * 발급 완료
     * @description 발급 완료
     */
    IssuedCashReceipt: {
      /** 현금영수증 상태 */
      status: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제 건 아이디 */
      paymentId: string;
      /** 현금영수증 발급에 사용된 채널 */
      channel: components['schemas']['SelectedChannel'];
      /**
       * 결제 금액
       * Format: int64
       */
      amount: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFreeAmount?: number;
      /**
       * 부가세액
       * Format: int64
       */
      vatAmount?: number;
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 주문명 */
      orderName: string;
      /** 수동 발급 여부 */
      isManual: boolean;
      /** 현금영수증 유형 */
      type?: components['schemas']['CashReceiptType'];
      /** PG사 현금영수증 아이디 */
      pgReceiptId?: string;
      /** 승인 번호 */
      issueNumber: string;
      /** 현금영수증 URL */
      url?: string;
      /**
       * 발급 시점
       * Format: date-time
       */
      issuedAt: string;
    };
    /**
     * 발급 완료된 현금영수증
     * @description 발급 완료된 현금영수증
     */
    IssuedPaymentCashReceipt: {
      /** 결제 건 내 현금영수증 상태 */
      status: string;
      /** 현금영수증 유형 */
      type?: components['schemas']['CashReceiptType'];
      /** PG사 영수증 발급 아이디 */
      pgReceiptId?: string;
      /** 승인 번호 */
      issueNumber: string;
      /**
       * 총 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFreeAmount?: number;
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 현금영수증 URL */
      url?: string;
      /**
       * 발급 시점
       * Format: date-time
       */
      issuedAt: string;
    };
    /**
     * API key 로그인을 위한 입력 정보
     * @description API key 로그인을 위한 입력 정보
     */
    LoginViaApiKeyBody: {
      /** 발급받은 API key */
      apiKey: string;
    };
    LoginViaApiKeyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * API key 로그인 성공 응답
     * @description API key 로그인 성공 응답
     */
    LoginViaApiKeyResponse: {
      /**
       * 인증에 사용하는 엑세스 토큰
       * @description 하루의 유효기간을 가지고 있습니다.
       */
      accessToken: string;
      /**
       * 토큰 재발급 및 유효기간 연장을 위해 사용하는 리프레시 토큰
       * @description 일주일의 유효기간을 가지고 있으며, 리프레시 토큰을 통해 유효기간이 연장된 새로운 엑세스 토큰을 발급받을 수 있습니다.
       */
      refreshToken: string;
    };
    /**
     * API Secret 로그인을 위한 입력 정보
     * @description API Secret 로그인을 위한 입력 정보
     */
    LoginViaApiSecretBody: {
      /** 발급받은 API secret */
      apiSecret: string;
    };
    LoginViaApiSecretError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * API key 로그인 성공 응답
     * @description API key 로그인 성공 응답
     */
    LoginViaApiSecretResponse: {
      /**
       * 인증에 사용하는 엑세스 토큰
       * @description 하루의 유효기간을 가지고 있습니다.
       */
      accessToken: string;
      /**
       * 토큰 재발급 및 유효기간 연장을 위해 사용하는 리프레시 토큰
       * @description 일주일의 유효기간을 가지고 있으며, 리프레시 토큰을 통해 유효기간이 연장된 새로운 엑세스 토큰을 발급받을 수 있습니다.
       */
      refreshToken: string;
    };
    /**
     * 가맹점 정보
     * @description 가맹점 정보
     */
    Merchant: {
      /** 가맹점 아이디 */
      id: string;
      graphqlId: string;
      /** 리포트 정보 */
      analytics: components['schemas']['Analytics'];
    };
    /**
     * 에스크로 배송 정보 수정 입력 정보
     * @description 에스크로 배송 정보 수정 입력 정보
     */
    ModifyEscrowLogisticsBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /** 에스크로 발송자 정보 */
      sender?: components['schemas']['PaymentEscrowSenderInput'];
      /** 에스크로 수취인 정보 */
      receiver?: components['schemas']['PaymentEscrowReceiverInput'];
      /** 에스크로 물류 정보 */
      logistics: components['schemas']['PaymentLogistics'];
      /**
       * 이메일 알림 전송 여부
       * @description 에스크로 구매 확정 시 이메일로 알림을 보낼지 여부입니다.
       */
      sendEmail?: boolean;
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
    };
    ModifyEscrowLogisticsError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PaymentNotFoundError']
      | components['schemas']['PaymentNotPaidError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 에스크로 배송 정보 수정 성공 응답
     * @description 에스크로 배송 정보 수정 성공 응답
     */
    ModifyEscrowLogisticsResponse: {
      /** 송장 번호 */
      invoiceNumber: string;
      /**
       * 발송 시점
       * Format: date-time
       */
      sentAt: string;
      /**
       * 에스크로 정보 수정 시점
       * Format: date-time
       */
      modifiedAt: string;
    };
    /**
     * 월 및 일자 정보
     * @description 월 및 일자 정보
     */
    MonthDay: {
      /** Format: int32 */
      month: number;
      /** Format: int32 */
      day: number;
    };
    /**
     * 한 줄 형식 주소
     * @description 한 줄 형식 주소
     * 한 줄 형식 주소만 존재합니다.
     */
    OneLineAddress: {
      type: string;
      /** 주소 (한 줄) */
      oneLine: string;
    };
    /**
     * 반환된 페이지 결과 정보
     * @description 반환된 페이지 결과 정보
     */
    PageInfo: {
      /**
       * 요청된 페이지 번호
       * Format: int32
       */
      number: number;
      /**
       * 요청된 페이지 당 객체 수
       * Format: int32
       */
      size: number;
      /**
       * 실제 반환된 객체 수
       * Format: int32
       */
      totalCount: number;
    };
    /**
     * 다건 조회 API 에 사용되는 페이지 입력 정보
     * @description 다건 조회 API 에 사용되는 페이지 입력 정보
     */
    PageInput: {
      /**
       * 0부터 시작하는 페이지 번호
       * Format: int32
       */
      number?: number;
      /**
       * 각 페이지 당 포함할 객체 수
       * Format: int32
       */
      size?: number;
    };
    /**
     * 결제 완료 상태 건
     * @description 결제 완료 상태 건
     */
    PaidPayment: {
      /** 결제 건 상태 */
      status: string;
      /** 결제 건 아이디 */
      id: string;
      /**
       * 결제 건 포트원 채번 아이디
       * @description V1 결제 건의 경우 imp_uid에 해당합니다.
       */
      transactionId: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제수단 정보 */
      method?: components['schemas']['PaymentMethod'];
      /** 결제 채널 */
      channel: components['schemas']['SelectedChannel'];
      /** 포트원 버전 */
      version: components['schemas']['PortOneVersion'];
      /**
       * 결제 예약 건 아이디
       * @description 결제 예약을 이용한 경우에만 존재
       */
      scheduleId?: string;
      /**
       * 결제 시 사용된 빌링키
       * @description 빌링키 결제인 경우에만 존재
       */
      billingKey?: string;
      /** 웹훅 발송 내역 */
      webhooks?: components['schemas']['PaymentWebhook'][];
      /**
       * 결제 요청 시점
       * Format: date-time
       */
      requestedAt: string;
      /**
       * 업데이트 시점
       * Format: date-time
       */
      updatedAt: string;
      /**
       * 상태 업데이트 시점
       * Format: date-time
       */
      statusChangedAt: string;
      /** 주문명 */
      orderName: string;
      /** 결제 금액 관련 세부 정보 */
      amount: components['schemas']['PaymentAmount'];
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 구매자 정보 */
      customer: components['schemas']['Customer'];
      /** 프로모션 아이디 */
      promotionId?: string;
      /** 문화비 지출 여부 */
      isCulturalExpense?: boolean;
      /**
       * 에스크로 결제 정보
       * @description 에스크로 결제인 경우 존재합니다.
       */
      escrow?: components['schemas']['PaymentEscrow'];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 상품 갯수
       * Format: int32
       */
      productCount?: number;
      /** 사용자 지정 데이터 */
      customData?: string;
      /** 국가 코드 */
      country?: components['schemas']['Country'];
      /**
       * 결제 완료 시점
       * Format: date-time
       */
      paidAt: string;
      /** PG사 거래 아이디 */
      pgTxId?: string;
      /** PG사 거래 응답 본문 */
      pgResponse?: string;
      /** 현금영수증 */
      cashReceipt?: components['schemas']['PaymentCashReceipt'];
      /** 거래 영수증 URL */
      receiptUrl?: string;
    };
    /**
     * 결제 부분 취소 상태 건
     * @description 결제 부분 취소 상태 건
     */
    PartialCancelledPayment: {
      /** 결제 건 상태 */
      status: string;
      /** 결제 건 아이디 */
      id: string;
      /**
       * 결제 건 포트원 채번 아이디
       * @description V1 결제 건의 경우 imp_uid에 해당합니다.
       */
      transactionId: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제수단 정보 */
      method?: components['schemas']['PaymentMethod'];
      /** 결제 채널 */
      channel: components['schemas']['SelectedChannel'];
      /** 포트원 버전 */
      version: components['schemas']['PortOneVersion'];
      /**
       * 결제 예약 건 아이디
       * @description 결제 예약을 이용한 경우에만 존재
       */
      scheduleId?: string;
      /**
       * 결제 시 사용된 빌링키
       * @description 빌링키 결제인 경우에만 존재
       */
      billingKey?: string;
      /** 웹훅 발송 내역 */
      webhooks?: components['schemas']['PaymentWebhook'][];
      /**
       * 결제 요청 시점
       * Format: date-time
       */
      requestedAt: string;
      /**
       * 업데이트 시점
       * Format: date-time
       */
      updatedAt: string;
      /**
       * 상태 업데이트 시점
       * Format: date-time
       */
      statusChangedAt: string;
      /** 주문명 */
      orderName: string;
      /** 결제 금액 관련 세부 정보 */
      amount: components['schemas']['PaymentAmount'];
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 구매자 정보 */
      customer: components['schemas']['Customer'];
      /** 프로모션 아이디 */
      promotionId?: string;
      /** 문화비 지출 여부 */
      isCulturalExpense?: boolean;
      /**
       * 에스크로 결제 정보
       * @description 에스크로 결제인 경우 존재합니다.
       */
      escrow?: components['schemas']['PaymentEscrow'];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 상품 갯수
       * Format: int32
       */
      productCount?: number;
      /** 사용자 지정 데이터 */
      customData?: string;
      /** 국가 코드 */
      country?: components['schemas']['Country'];
      /**
       * 결제 완료 시점
       * Format: date-time
       */
      paidAt?: string;
      /** 현금영수증 */
      cashReceipt?: components['schemas']['PaymentCashReceipt'];
      /** 거래 영수증 URL */
      receiptUrl?: string;
      /** 결제 취소 내역 */
      cancellations: components['schemas']['PaymentCancellation'][];
      /**
       * 결제 취소 시점
       * Format: date-time
       */
      cancelledAt: string;
    };
    /**
     * 결제 예약 시점이 과거로 지정된 경우
     * @description 결제 예약 시점이 과거로 지정된 경우
     */
    PastPaymentScheduleError: {
      type: string;
      message?: string;
    };
    PayInstantlyError:
      | components['schemas']['AlreadyPaidError']
      | components['schemas']['ChannelNotFoundError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PgProviderError']
      | components['schemas']['SumOfPartsExceedsTotalAmountError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 수기 결제 성공 응답
     * @description 수기 결제 성공 응답
     */
    PayInstantlyResponse: {
      /** 결제 건 요약 정보 */
      payment: components['schemas']['InstantPaymentSummary'];
    };
    /**
     * 결제 완료 대기 상태 건
     * @description 결제 완료 대기 상태 건
     */
    PayPendingPayment: {
      /** 결제 건 상태 */
      status: string;
      /** 결제 건 아이디 */
      id: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제수단 정보 */
      method?: components['schemas']['PaymentMethod'];
      /** 결제 채널 */
      channel: components['schemas']['SelectedChannel'];
      /** 포트원 버전 */
      version: components['schemas']['PortOneVersion'];
      /**
       * 결제 예약 건 아이디
       * @description 결제 예약을 이용한 경우에만 존재
       */
      scheduleId?: string;
      /**
       * 결제 시 사용된 빌링키
       * @description 빌링키 결제인 경우에만 존재
       */
      billingKey?: string;
      /** 웹훅 발송 내역 */
      webhooks?: components['schemas']['PaymentWebhook'][];
      /**
       * 결제 요청 시점
       * Format: date-time
       */
      requestedAt: string;
      /**
       * 업데이트 시점
       * Format: date-time
       */
      updatedAt: string;
      /**
       * 상태 업데이트 시점
       * Format: date-time
       */
      statusChangedAt: string;
      /** 주문명 */
      orderName: string;
      /** 결제 금액 관련 세부 정보 */
      amount: components['schemas']['PaymentAmount'];
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 구매자 정보 */
      customer: components['schemas']['Customer'];
      /** 프로모션 아이디 */
      promotionId?: string;
      /** 문화비 지출 여부 */
      isCulturalExpense?: boolean;
      /**
       * 에스크로 결제 정보
       * @description 에스크로 결제인 경우 존재합니다.
       */
      escrow?: components['schemas']['PaymentEscrow'];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 상품 갯수
       * Format: int32
       */
      productCount?: number;
      /** 사용자 지정 데이터 */
      customData?: string;
      /** 국가 코드 */
      country?: components['schemas']['Country'];
      /** PG사 거래 아이디 */
      pgTxId?: string;
    };
    PayWithBillingKeyError:
      | components['schemas']['AlreadyPaidError']
      | components['schemas']['BillingKeyAlreadyDeletedError']
      | components['schemas']['BillingKeyNotFoundError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PgProviderError']
      | components['schemas']['SumOfPartsExceedsTotalAmountError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 빌링키 결제 성공 응답
     * @description 빌링키 결제 성공 응답
     */
    PayWithBillingKeyResponse: {
      /** 결제 건 요약 정보 */
      payment: components['schemas']['BillingKeyPaymentSummary'];
    };
    /**
     * 결제 건
     * @description 결제 건
     */
    Payment:
      | components['schemas']['CancelledPayment']
      | components['schemas']['FailedPayment']
      | components['schemas']['PaidPayment']
      | components['schemas']['PartialCancelledPayment']
      | components['schemas']['PayPendingPayment']
      | components['schemas']['ReadyPayment']
      | components['schemas']['VirtualAccountIssuedPayment'];
    /**
     * 결제가 이미 취소된 경우
     * @description 결제가 이미 취소된 경우
     */
    PaymentAlreadyCancelledError: {
      type: string;
      message?: string;
    };
    /**
     * 결제 금액 세부 정보
     * @description 결제 금액 세부 정보
     */
    PaymentAmount: {
      /**
       * 총 결제금액
       * Format: int64
       */
      total: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFree: number;
      /**
       * 부가세액
       * Format: int64
       */
      vat?: number;
      /**
       * 공급가액
       * Format: int64
       */
      supply?: number;
      /**
       * 할인금액
       * Format: int64
       * @description 카드사 프로모션, 아임포트 프로모션, 적립형 포인트 결제, 쿠폰 할인 등을 포함합니다.
       */
      discount: number;
      /**
       * 실제 결제금액
       * Format: int64
       */
      paid: number;
      /**
       * 취소금액
       * Format: int64
       */
      cancelled: number;
      /**
       * 취소금액 중 면세액
       * Format: int64
       */
      cancelledTaxFree: number;
    };
    /**
     * 금액 세부 입력 정보
     * @description 금액 세부 입력 정보
     */
    PaymentAmountInput: {
      /**
       * 총 금액
       * Format: int64
       */
      total: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFree?: number;
      /**
       * 부가세액
       * Format: int64
       * @description 가맹점에서 직접 계산이 필요한 경우 입력합니다.
       * 입력하지 않으면 면세 금액을 제외한 금액의 1/11 로 자동 계산됩니다.
       */
      vat?: number;
    };
    /**
     * 결제 취소 내역
     * @description 결제 취소 내역
     */
    PaymentCancellation:
      | components['schemas']['FailedPaymentCancellation']
      | components['schemas']['RequestedPaymentCancellation']
      | components['schemas']['SucceededPaymentCancellation'];
    /**
     * 결제 건 내 현금영수증 정보
     * @description 결제 건 내 현금영수증 정보
     */
    PaymentCashReceipt:
      | components['schemas']['CancelledPaymentCashReceipt']
      | components['schemas']['IssuedPaymentCashReceipt'];
    /**
     * 결제건 내 현금영수증 상태
     * @description 결제건 내 현금영수증 상태
     *
     * @enum {string}
     */
    PaymentCashReceiptStatus: 'CANCELLED' | 'ISSUED';
    /**
     * 결제가 발생한 클라이언트 환경
     * @description 결제가 발생한 클라이언트 환경
     *
     * @enum {string}
     */
    PaymentClientType: 'API' | 'SDK_MOBILE' | 'SDK_PC';
    /**
     * 에스크로 정보
     * @description 에스크로 정보
     * V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
     */
    PaymentEscrow:
      | components['schemas']['BeforeRegisteredPaymentEscrow']
      | components['schemas']['CancelledPaymentEscrow']
      | components['schemas']['ConfirmedPaymentEscrow']
      | components['schemas']['DeliveredPaymentEscrow']
      | components['schemas']['RegisteredPaymentEscrow']
      | components['schemas']['RejectConfirmedPaymentEscrow']
      | components['schemas']['RejectedPaymentEscrow'];
    /**
     * 에스크로 수취인 정보
     * @description 에스크로 수취인 정보
     */
    PaymentEscrowReceiverInput: {
      /** 이름 */
      name?: string;
      /** 전화번호 */
      phoneNumber?: string;
      /** 우편번호 */
      zipcode?: string;
      /** 주소 */
      address?: components['schemas']['SeparatedAddressInput'];
    };
    /**
     * 에스크로 발송자 정보
     * @description 에스크로 발송자 정보
     */
    PaymentEscrowSenderInput: {
      /** 이름 */
      name?: string;
      /** 전화번호 */
      phoneNumber?: string;
      /** 우편번호 */
      zipcode?: string;
      /** 수취인과의 관계 */
      relationship?: string;
      /** 주소 */
      address?: components['schemas']['SeparatedAddressInput'];
    };
    /**
     * 결제 건 다건 조회를 위한 입력 정보
     * @description 결제 건 다건 조회를 위한 입력 정보
     */
    PaymentFilterInput: {
      /** 가맹점 아이디 */
      merchantId?: string;
      /**
       * 상점 아이디
       * @description Merchant 사용자만 사용가능하며, 지정되지 않은 경우 가맹점 전체 결제 건을 조회합니다.
       */
      storeId?: string;
      /** 조회 기준 시점 유형 */
      timestampType?: components['schemas']['PaymentTimestampType'];
      /**
       * 결제 요청/상태 승인 시점 범위의 시작
       * Format: date-time
       * @description 값을 입력하지 않으면 end의 90일 전으로 설정됩니다.
       */
      from?: string;
      /**
       * 결제 요청/상태 승인 시점 범위의 끝
       * Format: date-time
       * @description 값을 입력하지 않으면 현재 시점으로 설정됩니다.
       */
      until?: string;
      /**
       * 결제 상태 리스트
       * @description 값을 입력하지 않으면 결제상태 필터링이 적용되지 않습니다.
       */
      status?: components['schemas']['PaymentStatus'][];
      /**
       * 결제수단 리스트
       * @description 값을 입력하지 않으면 결제수단 필터링이 적용되지 않습니다.
       */
      methods?: components['schemas']['PaymentMethodType'][];
      /**
       * PG사 리스트
       * @description 값을 입력하지 않으면 결제대행사 필터링이 적용되지 않습니다.
       */
      pgProvider?: components['schemas']['PgProvider'][];
      /** 테스트 결제 필터링 */
      isTest?: boolean;
      /** 결제 예약 건 필터링 */
      isScheduled?: boolean;
      /** 결제 건 정렬 기준 */
      sortBy?: components['schemas']['PaymentSortBy'];
      /** 결제 건 정렬 방식 */
      sortOrder?: components['schemas']['PaymentSortOrder'];
      /** 포트원 버전 */
      version?: components['schemas']['PortOneVersion'];
      /** 웹훅 상태 */
      webhookStatus?: components['schemas']['PaymentWebhookStatus'];
      /** 플랫폼 유형 */
      platformType?: components['schemas']['PaymentClientType'];
      /** 통화 */
      currency?: components['schemas']['Currency'];
      /** 에스크로 결제 여부 */
      isEscrow?: boolean;
      /** 에스크로 결제의 배송 정보 상태 */
      escrowStatus?: components['schemas']['PaymentFilterInputEscrowStatus'];
      /** 카드 브랜드 */
      cardBrand?: components['schemas']['CardBrand'];
      /** 카드 유형 */
      cardType?: components['schemas']['CardType'];
      /** 카드 소유주 유형 */
      cardOwnerType?: components['schemas']['CardOwnerType'];
      /** 상품권 종류 */
      giftCertificateType?: components['schemas']['PaymentMethodGiftCertificateType'];
      /** 현금영수증 유형 */
      cashReceiptType?: components['schemas']['CashReceiptInputType'];
      /** 현금영수증 상태 */
      cashReceiptStatus?: components['schemas']['PaymentCashReceiptStatus'];
      /** 현금영수증 발급 시간 범위 */
      cashReceiptIssuedAtRange?: components['schemas']['DateTimeRange'];
      /** 현금영수증 취소 시간 범위 */
      cashReceiptCancelledAtRange?: components['schemas']['DateTimeRange'];
      /** 통합 검색 리스트 필터 */
      textSearch?: components['schemas']['PaymentTextSearch'][];
    };
    /**
     * 에스크로 상태
     * @description 에스크로 상태
     *
     * @enum {string}
     */
    PaymentFilterInputEscrowStatus:
      | 'CANCELLED'
      | 'CONFIRMED'
      | 'DELIVERED'
      | 'REGISTERED'
      | 'REJECTED'
      | 'REJECT_CONFIRMED';
    /**
     * 할부 정보
     * @description 할부 정보
     */
    PaymentInstallment: {
      /**
       * 할부 개월 수
       * Format: int32
       */
      month: number;
      /** 무이자할부 여부 */
      isInterestFree: boolean;
    };
    /**
     * 배송정보
     * @description 배송정보
     */
    PaymentLogistics: {
      /** 물류회사 */
      company: components['schemas']['PaymentLogisticsCompany'];
      /** 송장번호 */
      invoiceNumber: string;
      /**
       * 발송시점
       * Format: date-time
       */
      sentAt: string;
      /**
       * 수령시점
       * Format: date-time
       */
      receivedAt?: string;
      /** 주소 */
      address?: components['schemas']['SeparatedAddressInput'];
    };
    /**
     * 물류 회사
     * @description 물류 회사
     *
     * @enum {string}
     */
    PaymentLogisticsCompany:
      | 'ACI'
      | 'CHUNIL'
      | 'CJ'
      | 'CJ_INTL'
      | 'DAESIN'
      | 'DHL'
      | 'DONGWON'
      | 'EMS'
      | 'ETC'
      | 'FEDEX'
      | 'GOODSTOLUCK'
      | 'GS'
      | 'GSM_NTON'
      | 'HANJIN'
      | 'HAPDONG'
      | 'ILYANG'
      | 'KGL'
      | 'KUNYOUNG'
      | 'KYUNGDONG'
      | 'LOGEN'
      | 'LOTTE'
      | 'LX_PANTOS'
      | 'POST'
      | 'POST_REGISTERED'
      | 'SF'
      | 'SLX'
      | 'SUNGWON'
      | 'UPS'
      | 'USPS'
      | 'WOORI';
    /**
     * 결제수단 정보
     * @description 결제수단 정보
     */
    PaymentMethod:
      | components['schemas']['PaymentMethodCard']
      | components['schemas']['PaymentMethodEasyPay']
      | components['schemas']['PaymentMethodGiftCertificate']
      | components['schemas']['PaymentMethodMobile']
      | components['schemas']['PaymentMethodTransfer']
      | components['schemas']['PaymentMethodVirtualAccount'];
    /**
     * 결제수단 카드 정보
     * @description 결제수단 카드 정보
     */
    PaymentMethodCard: {
      type: string;
      /** 카드 상세 정보 */
      card?: components['schemas']['Card'];
      /** 승인 번호 */
      approvalNumber?: string;
      /** 할부 정보 */
      installment?: components['schemas']['PaymentInstallment'];
      /** 카드 포인트 사용여부 */
      pointUsed?: boolean;
    };
    /**
     * 간편 결제 상세 정보
     * @description 간편 결제 상세 정보
     */
    PaymentMethodEasyPay: {
      type: string;
      /** 간편 결제 PG사 */
      provider?: components['schemas']['EasyPayProvider'];
      /** 간편 결제 수단 */
      easyPayMethod?: components['schemas']['PaymentMethodEasyPayMethod'];
    };
    /**
     * 간편 결제 수단
     * @description 간편 결제 수단
     */
    PaymentMethodEasyPayMethod:
      | components['schemas']['PaymentMethodCard']
      | components['schemas']['PaymentMethodEasyPayMethodCharge']
      | components['schemas']['PaymentMethodTransfer'];
    /**
     * 충전식 포인트 결제 정보
     * @description 충전식 포인트 결제 정보
     */
    PaymentMethodEasyPayMethodCharge: {
      type: string;
      /** 표준 은행 코드 */
      bank?: string;
    };
    /**
     * 상품권 상세 정보
     * @description 상품권 상세 정보
     */
    PaymentMethodGiftCertificate: {
      type: string;
      /** 상품권 종류 */
      giftCertificateType?: components['schemas']['PaymentMethodGiftCertificateType'];
      /** 상품권 승인 번호 */
      approvalNumber: string;
    };
    /**
     * 상품권 종류
     * @description 상품권 종류
     *
     * @enum {string}
     */
    PaymentMethodGiftCertificateType:
      | 'BOOKNLIFE'
      | 'CULTUREGIFT'
      | 'CULTURELAND'
      | 'HAPPYMONEY'
      | 'SMART_MUNSANG';
    /**
     * 모바일 상세 정보
     * @description 모바일 상세 정보
     */
    PaymentMethodMobile: {
      type: string;
      /** 전화번호 */
      phoneNumber?: string;
    };
    /**
     * 계좌 이체 상세 정보
     * @description 계좌 이체 상세 정보
     */
    PaymentMethodTransfer: {
      type: string;
      /** 표준 은행 코드 */
      bank?: string;
    };
    /** @enum {string} */
    PaymentMethodType:
      | 'CARD'
      | 'EASY_PAY'
      | 'GIFT_CERTIFICATE'
      | 'MOBILE'
      | 'TRANSFER'
      | 'VIRTUAL_ACCOUNT';
    /**
     * 가상계좌 상세 정보
     * @description 가상계좌 상세 정보
     */
    PaymentMethodVirtualAccount: {
      type: string;
      /** 표준 은행 코드 */
      bank?: string;
      /** 계좌번호 */
      accountNumber: string;
      /** 계좌 유형 */
      accountType?: components['schemas']['PaymentMethodVirtualAccountType'];
      /** 계좌주 */
      remitteeName?: string;
      /** 송금인(입금자) */
      remitterName?: string;
      /**
       * 입금만료시점
       * Format: date-time
       */
      expiredAt?: string;
      /**
       * 계좌발급시점
       * Format: date-time
       */
      issuedAt?: string;
      /** 가상계좌 결제가 환불 단계일 때의 환불 상태 */
      refundStatus?: components['schemas']['PaymentMethodVirtualAccountRefundStatus'];
    };
    /**
     * 가상계좌 환불 상태
     * @description 가상계좌 환불 상태
     *
     * @enum {string}
     */
    PaymentMethodVirtualAccountRefundStatus:
      | 'COMPLETED'
      | 'FAILED'
      | 'PARTIAL_REFUND_FAILED'
      | 'PENDING';
    /**
     * 가상계좌 유형
     * @description 가상계좌 유형
     *
     * @enum {string}
     */
    PaymentMethodVirtualAccountType: 'FIXED' | 'NORMAL';
    /**
     * 결제 건이 존재하지 않는 경우
     * @description 결제 건이 존재하지 않는 경우
     */
    PaymentNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * 결제가 완료되지 않은 경우
     * @description 결제가 완료되지 않은 경우
     */
    PaymentNotPaidError: {
      type: string;
      message?: string;
    };
    /**
     * 결제 건이 입금 대기 상태가 아닌 경우
     * @description 결제 건이 입금 대기 상태가 아닌 경우
     */
    PaymentNotWaitingForDepositError: {
      type: string;
      message?: string;
    };
    /**
     * 상품 정보
     * @description 상품 정보
     */
    PaymentProduct: {
      /**
       * 상품 고유 식별자
       * @description 가맹점이 직접 부여한 식별자입니다.
       */
      id: string;
      /** 상품명 */
      name: string;
      /**
       * 상품 태그
       * @description 카테고리 등으로 활용될 수 있습니다.
       */
      tag?: string;
      /** 상품 코드 */
      code?: string;
      /**
       * 상품 단위가격
       * Format: int64
       */
      amount: number;
      /**
       * 주문 수량
       * Format: int32
       */
      quantity: number;
    };
    /**
     * 상품 유형
     * @description 상품 유형
     *
     * @enum {string}
     */
    PaymentProductType: 'DIGITAL' | 'PHYSICAL';
    /**
     * 결제 예약 건
     * @description 결제 예약 건
     */
    PaymentSchedule:
      | components['schemas']['FailedPaymentSchedule']
      | components['schemas']['RevokedPaymentSchedule']
      | components['schemas']['ScheduledPaymentSchedule']
      | components['schemas']['StartedPaymentSchedule']
      | components['schemas']['SucceededPaymentSchedule'];
    /**
     * 결제 예약건이 이미 존재하는 경우
     * @description 결제 예약건이 이미 존재하는 경우
     */
    PaymentScheduleAlreadyExistsError: {
      type: string;
      message?: string;
    };
    /**
     * 결제 예약건이 이미 처리된 경우
     * @description 결제 예약건이 이미 처리된 경우
     */
    PaymentScheduleAlreadyProcessedError: {
      type: string;
      message?: string;
    };
    /**
     * 결제 예약건이 이미 취소된 경우
     * @description 결제 예약건이 이미 취소된 경우
     */
    PaymentScheduleAlreadyRevokedError: {
      type: string;
      message?: string;
    };
    /**
     * 결제 예약 건 다건 조회를 위한 입력 정보
     * @description 결제 예약 건 다건 조회를 위한 입력 정보
     */
    PaymentScheduleFilterInput: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /** 빌링키 */
      billingKey?: string;
      /**
       * 결제 예정 시점 조건 범위의 시작
       * Format: date-time
       * @description 값을 입력하지 않으면 파라미터 end의 90일 전으로 설정됩니다.
       */
      from?: string;
      /**
       * 결제 예정 시점 조건 범위의 끝
       * Format: date-time
       * @description 값을 입력하지 않으면 현재 시점으로 설정됩니다.
       */
      until?: string;
      /** 결제 예약 건 상태 리스트 */
      status?: components['schemas']['PaymentScheduleStatus'][];
    };
    /**
     * 결제 예약건이 존재하지 않는 경우
     * @description 결제 예약건이 존재하지 않는 경우
     */
    PaymentScheduleNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * 결제 예약 건 상태
     * @description 결제 예약 건 상태
     *
     * @enum {string}
     */
    PaymentScheduleStatus:
      | 'FAILED'
      | 'REVOKED'
      | 'SCHEDULED'
      | 'STARTED'
      | 'SUCCEEDED';
    /**
     * 결제 예약 건
     * @description 결제 예약 건
     */
    PaymentScheduleSummary: {
      /** 결제 예약 건 아이디 */
      id: string;
    };
    /**
     * 결제 건 정렬 기준
     * @description 결제 건 정렬 기준
     *
     * @enum {string}
     */
    PaymentSortBy: 'REQUESTED_AT' | 'STATUS_CHANGED_AT';
    /**
     * 결제 건 정렬 방식
     * @description 결제 건 정렬 방식
     *
     * @enum {string}
     */
    PaymentSortOrder: 'ASC' | 'DESC';
    /**
     * 결제 건 상태
     * @description 결제 건 상태
     *
     * @enum {string}
     */
    PaymentStatus:
      | 'CANCELLED'
      | 'FAILED'
      | 'PAID'
      | 'PARTIAL_CANCELLED'
      | 'PENDING'
      | 'READY'
      | 'VIRTUAL_ACCOUNT_ISSUED';
    /**
     * 통합검색 입력 정보
     * @description 통합검색 입력 정보
     */
    PaymentTextSearch: {
      field: components['schemas']['PaymentTextSearchField'];
      value: string;
    };
    /**
     * 통합검색 항목
     * @description 통합검색 항목
     *
     * @enum {string}
     */
    PaymentTextSearchField:
      | 'ALL'
      | 'BILLING_KEY'
      | 'CANCEL_REASON'
      | 'CARD_ACQUIRER'
      | 'CARD_APPROVAL_NUMBER'
      | 'CARD_BIN'
      | 'CARD_INSTALLMENT'
      | 'CARD_ISSUER'
      | 'CARD_NUMBER'
      | 'CARD_RECEIPT_NAME'
      | 'CUSTOMER_ADDRESS'
      | 'CUSTOMER_EMAIL'
      | 'CUSTOMER_NAME'
      | 'CUSTOMER_PHONE_NUMBER'
      | 'CUSTOMER_ZIPCODE'
      | 'FAIL_REASON'
      | 'GIFT_CERTIFICATION_APPROVAL_NUMBER'
      | 'ORDER_NAME'
      | 'PAYMENT_ID'
      | 'PG_CANCELLATION_ID'
      | 'PG_MERCHANT_ID'
      | 'PG_RECEIPT_ID'
      | 'PG_TX_ID'
      | 'PROMOTION_ID'
      | 'RECEIPT_APPROVAL_NUMBER'
      | 'SCHEDULE_ID'
      | 'TRANS_BANK'
      | 'TX_ID'
      | 'USER_AGENT'
      | 'VIRTUAL_ACCOUNT_BANK'
      | 'VIRTUAL_ACCOUNT_HOLDER_NAME'
      | 'VIRTUAL_ACCOUNT_NUMBER';
    /**
     * 조회 시점 기준
     * @description 조회 시점 기준
     * 어떤 시점을 기준으로 조회를 할 것인지 선택합니다.
     * CREATED_AT: 결제 건 생성 시점을 기준으로 조회합니다.
     * STATUS_CHANGED_AT: 상태 승인 시점을 기준으로 조회합니다. 결제 건의 최종 상태에 따라 검색 기준이 다르게 적용됩니다.
     * ready -&gt; 결제 요청 시점 기준
     * paid -&gt; 결제 완료 시점 기준
     * cancelled -&gt; 결제 취소 시점 기준
     * failed -&gt; 결제 실패 시점 기준
     * 값을 입력하지 않으면 STATUS_CHANGED_AT 으로 자동 적용됩니다.
     *
     * @enum {string}
     */
    PaymentTimestampType: 'CREATED_AT' | 'STATUS_CHANGED_AT';
    /**
     * 성공 웹훅 내역
     * @description 성공 웹훅 내역
     */
    PaymentWebhook: {
      /**
       * 웹훅 발송 시 결제 건 상태
       * @description V1 결제 건인 경우, 값이 존재하지 않습니다.
       */
      paymentStatus?: components['schemas']['PaymentWebhookPaymentStatus'];
      /** 웹훅 아이디 */
      id: string;
      /** 웹훅 상태 */
      status?: components['schemas']['PaymentWebhookStatus'];
      /**
       * 웹훅이 발송된 url
       * @description V1 결제 건인 경우, 값이 존재하지 않습니다.
       */
      url: string;
      /**
       * 비동기 웹훅 여부
       * @description V1 결제 건인 경우, 값이 존재하지 않습니다.
       */
      isAsync?: boolean;
      /**
       * 현재 발송 횟수
       * Format: int32
       */
      currentExecutionCount?: number;
      /**
       * 최대 발송 횟수
       * Format: int32
       */
      maxExecutionCount?: number;
      /** 웹훅 실행 맥락 */
      trigger?: components['schemas']['PaymentWebhookTrigger'];
      /** 웹훅 요청 정보 */
      request?: components['schemas']['PaymentWebhookRequest'];
      /** 웹훅 응답 정보 */
      response?: components['schemas']['PaymentWebhookResponse'];
      /**
       * 웹훅 처리 시작 시점
       * Format: date-time
       */
      triggeredAt?: string;
    };
    /**
     * 웹훅 발송 시 결제 건 상태
     * @description 웹훅 발송 시 결제 건 상태
     *
     * @enum {string}
     */
    PaymentWebhookPaymentStatus:
      | 'CANCELLED'
      | 'FAILED'
      | 'PAID'
      | 'PARTIAL_CANCELLED'
      | 'PAY_PENDING'
      | 'READY'
      | 'VIRTUAL_ACCOUNT_ISSUED';
    /**
     * 웹훅 요청 정보
     * @description 웹훅 요청 정보
     */
    PaymentWebhookRequest: {
      /** 요청 헤더 */
      header?: string;
      /** 요청 본문 */
      body: string;
      /**
       * 요청 시점
       * Format: date-time
       */
      requestedAt?: string;
    };
    /**
     * 웹훅 응답 정보
     * @description 웹훅 응답 정보
     */
    PaymentWebhookResponse: {
      /** 응답 HTTP 코드 */
      code: string;
      /** 응답 헤더 */
      header: string;
      /** 응답 본문 */
      body: string;
      /**
       * 응답 시점
       * Format: date-time
       */
      respondedAt: string;
    };
    /**
     * 웹훅 전송 상태
     * @description 웹훅 전송 상태
     *
     * @enum {string}
     */
    PaymentWebhookStatus:
      | 'FAILED_NOT_OK_RESPONSE'
      | 'FAILED_UNEXPECTED_ERROR'
      | 'SUCCEEDED';
    /**
     * 웹훅 실행 트리거
     * @description 웹훅 실행 트리거
     * 수동 웹훅 재발송, 가상계좌 입금, 비동기 취소 승인 시 발생한 웹훅일 때 필드의 값이 존재합니다.
     *
     * @enum {string}
     */
    PaymentWebhookTrigger:
      | 'ASYNC_CANCEL_APPROVED'
      | 'ASYNC_CANCEL_FAILED'
      | 'ASYNC_PAY_APPROVED'
      | 'ASYNC_PAY_FAILED'
      | 'MANUAL'
      | 'VIRTUAL_ACCOUNT_DEPOSIT';
    /**
     * 결제 건 및 커서 정보
     * @description 결제 건 및 커서 정보
     */
    PaymentWithCursor: {
      /** 결제 건 정보 */
      payment: components['schemas']['Payment'];
      /** 해당 결제 건의 커서 정보 */
      cursor: string;
    };
    PayoutPartnerSettlementsResponse: {
      items: components['schemas']['PlatformPayoutPartnerSettlement'][];
      page: components['schemas']['PageInfo'];
    };
    PayoutSheet: {
      payoutId: string;
      contractId?: string;
      settlementCurrency: components['schemas']['Currency'];
      payoutCurrency: components['schemas']['Currency'];
      name: string;
    };
    /**
     * PG사
     * @description PG사
     *
     * @enum {string}
     */
    PgCompany:
      | 'ALIPAY'
      | 'BLUEWALNUT'
      | 'CHAI'
      | 'DANAL'
      | 'DAOU'
      | 'EXIMBAY'
      | 'GALAXIA'
      | 'INICIS'
      | 'JTNET'
      | 'KAKAOPAY'
      | 'KCP'
      | 'KICC'
      | 'KPN'
      | 'KSNET'
      | 'MOBILIANS'
      | 'NAVERPAY'
      | 'NICE'
      | 'PAYCO'
      | 'PAYMENTWALL'
      | 'PAYPAL'
      | 'PAYPLE'
      | 'SETTLE'
      | 'SMARTRO'
      | 'SMILEPAY'
      | 'SYRUP'
      | 'TOSSPAY'
      | 'TOSSPAYMENTS'
      | 'WELCOME';
    /**
     * PG사 결제 모듈
     * @description PG사 결제 모듈
     *
     * @enum {string}
     */
    PgProvider:
      | 'ALIPAY'
      | 'BLUEWALNUT'
      | 'CHAI'
      | 'DANAL'
      | 'DANAL_TPAY'
      | 'DAOU'
      | 'EXIMBAY'
      | 'GALAXIA'
      | 'HTML5_INICIS'
      | 'INICIS'
      | 'INICIS_UNIFIED'
      | 'INICIS_V2'
      | 'JTNET'
      | 'KAKAO'
      | 'KAKAOPAY'
      | 'KCP'
      | 'KCP_BILLING'
      | 'KCP_DIRECT'
      | 'KCP_QUICK'
      | 'KICC'
      | 'KPN'
      | 'KSNET'
      | 'MOBILIANS'
      | 'NAVERCO'
      | 'NAVERPAY'
      | 'NICE'
      | 'NICE_V2'
      | 'PAYCO'
      | 'PAYMENTWALL'
      | 'PAYPAL'
      | 'PAYPAL_V2'
      | 'PAYPLE'
      | 'PINPAY'
      | 'SETTLE'
      | 'SETTLE_ACC'
      | 'SETTLE_FIRM'
      | 'SMARTRO'
      | 'SMARTRO_V2'
      | 'SMILEPAY'
      | 'SYRUP'
      | 'TOSSPAY'
      | 'TOSSPAYMENTS'
      | 'TOSSPAY_V2'
      | 'TOSS_BRANDPAY'
      | 'UPLUS'
      | 'WELCOME';
    /**
     * PG사에서 오류가 발생한 경우
     * @description PG사에서 오류가 발생한 경우
     */
    PgProviderError: {
      type: string;
      message?: string;
      pgCode: string;
      pgMessage: string;
    };
    /**
     * 가맹점의 플랫폼 기능 관련 정보
     * @description 가맹점의 플랫폼 기능 관련 정보
     */
    Platform: {
      /** 해당 플랫폼의 가맹점 아이디 */
      merchantId: string;
      graphqlId: string;
      /** 파트너 정산금액의 소수점 처리 방식 */
      roundType: components['schemas']['PlatformRoundType'];
      /** 수수료 및 할인 분담 정책 관련 계산식 */
      settlementFormula: components['schemas']['PlatformSettlementFormula'];
      /** 정산 규칙 */
      settlementRule: components['schemas']['PlatformSettlementRule'];
    };
    /**
     * 플랫폼 정산 계좌
     * @description 플랫폼 정산 계좌
     * <code>currency</code> 가 KRW 일 경우 예금주 조회 API 를 통해 올바른 계좌인지 검증합니다. 그 외의 화폐일 경우 따로 검증하지는 않습니다.
     */
    PlatformAccount: {
      /** 은행 */
      bank: components['schemas']['Bank'];
      /** 정산에 사용할 통화 */
      currency: components['schemas']['Currency'];
      /** 계좌번호 */
      number: string;
      /** 예금주명 */
      holder: string;
      /** 계좌 상태 */
      status: components['schemas']['PlatformAccountStatus'];
    };
    /**
     * 예금주 조회 성공 응답 정보
     * @description 예금주 조회 성공 응답 정보
     */
    PlatformAccountHolder: {
      /** 계좌 예금주 이름 */
      holderName: string;
    };
    /**
     * 플랫폼 계좌 상태
     * @description 플랫폼 계좌 상태
     *
     * @enum {string}
     */
    PlatformAccountStatus:
      | 'EXPIRED'
      | 'UNKNOWN'
      | 'VERIFIED'
      | 'VERIFYING'
      | 'VERIFY_FAILED';
    PlatformAdditionalFeePoliciesNotFoundError: {
      type: string;
      ids: string[];
      graphqlIds: string[];
      message?: string;
    };
    /**
     * 추가 수수료 정책
     * @description 추가 수수료 정책
     * 추가 수수료 정책는 가맹점의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.
     */
    PlatformAdditionalFeePolicy: {
      id: string;
      graphqlId: string;
      /** 추가 수수료 정책 이름 */
      name: string;
      /** 책정 수수료 */
      fee: components['schemas']['PlatformFee'];
      /** 해당 추가 수수료 정책에 대한 메모 */
      memo?: string;
      /** 부가세를 부담할 주체 */
      vatPayer: components['schemas']['PlatformPayer'];
      /** 보관 여부 */
      isArchived: boolean;
      /**
       * 변경 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    PlatformAdditionalFeePolicyAlreadyExistsError: {
      type: string;
      message?: string;
    };
    /**
     * 추가 수수료 정책 다건 조회를 위한 필터 조건
     * @description 추가 수수료 정책 다건 조회를 위한 필터 조건
     */
    PlatformAdditionalFeePolicyFilterInput: {
      /**
       * 보관 조회 여부
       * @description true 이면 보관된 추가 수수료 정책의 필터 옵션을 조회하고, false 이면 보관되지 않은 추가 수수료 정책의 필터 옵션을 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.
       */
      isArchived?: boolean;
      /**
       * 금액 부담 주체
       * @description 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 부가세 부담 주체에 해당하는 추가 수수료 정책만 조회합니다.
       */
      vatPayers?: components['schemas']['PlatformPayer'][];
      /** 검색 키워드 */
      keyword?: components['schemas']['PlatformAdditionalFeePolicyFilterInputKeyword'];
    };
    /**
     * 검색 키워드 입력 정보
     * @description 검색 키워드 입력 정보
     * 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 추가 수수료 정책만 조회합니다. 하위 필드는 명시된 값 중 한 가지만 적용됩니다.
     */
    PlatformAdditionalFeePolicyFilterInputKeyword: {
      /** @description 해당 값이 포함된 name 을 가진 추가 수수료 정책만 조회합니다. */
      name?: string;
      /** @description 해당 값이 포함된 id 를 가진 추가 수수료 정책만 조회합니다. */
      id?: string;
      /** @description 해당 값과 같은 수수료 를 가진 추가 수수료 정책만 조회합니다. */
      fee?: string;
    };
    PlatformAdditionalFeePolicyNotFoundError: {
      type: string;
      message?: string;
    };
    PlatformAdditionalFeePolicyScheduleAlreadyExistsError: {
      type: string;
      message?: string;
    };
    PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError: {
      type: string;
      id: string;
      graphqlId: string;
      feeCurrency: components['schemas']['Currency'];
      settlementCurrency: components['schemas']['Currency'];
      message?: string;
    };
    /**
     * 보관된 추가 수수료 정책을 업데이트하려고 하는 경우
     * @description 보관된 추가 수수료 정책을 업데이트하려고 하는 경우
     */
    PlatformArchivedAdditionalFeePolicyError: {
      type: string;
      message?: string;
    };
    /**
     * 보관된 계약을 업데이트하려고 하는 경우
     * @description 보관된 계약을 업데이트하려고 하는 경우
     */
    PlatformArchivedContractError: {
      type: string;
      message?: string;
    };
    /**
     * 보관된 할인 분담 정책을 업데이트하려고 하는 경우
     * @description 보관된 할인 분담 정책을 업데이트하려고 하는 경우
     */
    PlatformArchivedDiscountSharePolicyError: {
      type: string;
      message?: string;
    };
    /**
     * 보관된 파트너를 업데이트하려고 하는 경우
     * @description 보관된 파트너를 업데이트하려고 하는 경우
     */
    PlatformArchivedPartnerError: {
      type: string;
      message?: string;
    };
    /**
     * 보관된 파트너들을 예약 업데이트하려고 하는 경우
     * @description 보관된 파트너들을 예약 업데이트하려고 하는 경우
     */
    PlatformArchivedPartnersCannotBeScheduledError: {
      type: string;
      message?: string;
    };
    PlatformCancelOrderTransfersExistsError: {
      type: string;
      message?: string;
    };
    PlatformCancellableAmountExceededError: {
      type: string;
      /** Format: int64 */
      cancellableAmount: number;
      message?: string;
    };
    PlatformCancellableDiscountAmountExceededError: {
      type: string;
      discountSharePolicyId: string;
      discountSharePolicyGraphqlId: string;
      /** Format: int64 */
      cancellableAmount: number;
      productId?: string;
      message?: string;
    };
    PlatformCancellableProductQuantityExceededError: {
      type: string;
      productId: string;
      /** Format: int64 */
      cancellableQuantity: number;
      message?: string;
    };
    PlatformCancellationAndPaymentTypeMismatchedError: {
      type: string;
      message?: string;
    };
    PlatformCancellationNotFoundError: {
      type: string;
      message?: string;
    };
    /**
     * 예약된 업데이트가 있는 추가 수수료 정책을 보관하려고 하는 경우
     * @description 예약된 업데이트가 있는 추가 수수료 정책을 보관하려고 하는 경우
     */
    PlatformCannotArchiveScheduledAdditionalFeePolicyError: {
      type: string;
      message?: string;
    };
    /**
     * 예약된 업데이트가 있는 계약을 보관하려고 하는 경우
     * @description 예약된 업데이트가 있는 계약을 보관하려고 하는 경우
     */
    PlatformCannotArchiveScheduledContractError: {
      type: string;
      message?: string;
    };
    /**
     * 예약된 업데이트가 있는 할인 분담 정책을 보관하려고 하는 경우
     * @description 예약된 업데이트가 있는 할인 분담 정책을 보관하려고 하는 경우
     */
    PlatformCannotArchiveScheduledDiscountSharePolicyError: {
      type: string;
      message?: string;
    };
    /**
     * 예약된 업데이트가 있는 파트너를 보관하려고 하는 경우
     * @description 예약된 업데이트가 있는 파트너를 보관하려고 하는 경우
     */
    PlatformCannotArchiveScheduledPartnerError: {
      type: string;
      message?: string;
    };
    PlatformCompletedPayout: {
      status: string;
      id: string;
      graphqlId: string;
      creatorId: string;
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      summary: components['schemas']['PlatformPayoutSummary'];
      filter: components['schemas']['PlatformPartnerSettlementFilter'];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      paidOutAt: string;
    };
    /**
     * 플랫폼 파트너 담당자 연락 정보
     * @description 플랫폼 파트너 담당자 연락 정보
     * 파트너 담당자에게 연락하기 위한 정보들 입니다.
     */
    PlatformContact: {
      /** 담당자 이름 */
      name: string;
      /** 담당자 휴대폰 번호 */
      phoneNumber: string;
      /** 담당자 이메일 */
      email: string;
    };
    /**
     * 계약
     * @description 계약
     * 계약은 플랫폼 가맹점이 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
     * 가맹점의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
     */
    PlatformContract: {
      /** 계약 고유 아이디 */
      id: string;
      graphqlId: string;
      /** 계약 이름 */
      name: string;
      /** 계약 내부 표기를 위한 메모 */
      memo?: string;
      /** 중개수수료 */
      platformFee: components['schemas']['PlatformFee'];
      /** 정산 주기 */
      settlementCycle: components['schemas']['PlatformSettlementCycle'];
      /** 중개수수료에 대한 부가세 부담 주체 */
      platformFeeVatPayer: components['schemas']['PlatformPayer'];
      /**
       * 정산 시 결제금액 부가세 감액 여부
       * @description false인 경우 정산금에서 결제 금액 부가세를 감액하지 않고, true인 경우 정산금에서 결제 금액 부가세를 감액합니다.
       */
      subtractPaymentVatAmount: boolean;
      /** 보관 여부 */
      isArchived: boolean;
      /**
       * 변경 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    PlatformContractAlreadyExistsError: {
      type: string;
      message?: string;
    };
    /**
     * 계약 다건 조회를 위한 필터 조건
     * @description 계약 다건 조회를 위한 필터 조건
     */
    PlatformContractFilterInput: {
      /**
       * 금액 부담 주체
       * @description 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 수수료 부담 주체를 가진 계약만 조회합니다.
       */
      platformFeePayers?: components['schemas']['PlatformPayer'][];
      /**
       * 플랫폼 정산 주기 계산 방식
       * @description 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 주기 계산 방식을 가진 계약만 조회합니다.
       */
      cycleTypes?: components['schemas']['PlatformSettlementCycleType'][];
      /**
       * 플랫폼 정산 기준일
       * @description 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 기준일을 가진 계약만 조회합니다.
       */
      datePolicies?: components['schemas']['PlatformSettlementCycleDatePolicy'][];
      /**
       * 보관 조회 여부
       * @description true 이면 보관된 계약을 조회하고, false 이면 보관되지 않은 계약을 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.
       */
      isArchived?: boolean;
      /** 검색 키워드 */
      keyword?: components['schemas']['PlatformContractFilterInputKeyword'];
    };
    /**
     * 검색 키워드 입력 정보
     * @description 검색 키워드 입력 정보
     * 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 계약만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
     */
    PlatformContractFilterInputKeyword: {
      /** @description 해당 값이 포함된 id 를 가진 계약만 조회합니다. */
      id?: string;
      /** @description 해당 값이 포함된 name 을 가진 계약만 조회합니다. */
      name?: string;
    };
    PlatformContractNotFoundError: {
      type: string;
      message?: string;
    };
    PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError: {
      type: string;
      id: string;
      graphqlId: string;
      feeCurrency: components['schemas']['Currency'];
      settlementCurrency: components['schemas']['Currency'];
      message?: string;
    };
    PlatformContractScheduleAlreadyExistsError: {
      type: string;
      message?: string;
    };
    PlatformContractsNotFoundError: {
      type: string;
      ids: string[];
      graphqlIds: string[];
      message?: string;
    };
    PlatformDiscountCancelExceededOrderCancelAmountError: {
      type: string;
      message?: string;
    };
    PlatformDiscountExceededOrderAmountError: {
      type: string;
      message?: string;
    };
    PlatformDiscountSharePoliciesNotFoundError: {
      type: string;
      ids: string[];
      graphqlIds: string[];
      message?: string;
    };
    /**
     * 할인 분담 정책
     * @description 할인 분담 정책
     * 할인 분담은 가맹점의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
     * 할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.
     */
    PlatformDiscountSharePolicy: {
      id: string;
      graphqlId: string;
      /** 할인 분담 정책 이름 */
      name: string;
      /**
       * 할인 분담율
       * Format: int32
       * @description 파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 <code>할인금액 * partnerShareRate * 10^5</code> 로 책정합니다.
       */
      partnerShareRate: number;
      /** 해당 할인 분담에 대한 메모 */
      memo?: string;
      /** 보관 여부 */
      isArchived: boolean;
      /**
       * 변경 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    PlatformDiscountSharePolicyAlreadyExistsError: {
      type: string;
      message?: string;
    };
    /**
     * 할인 분담 정책 다건 조회를 위한 필터 조건
     * @description 할인 분담 정책 다건 조회를 위한 필터 조건
     */
    PlatformDiscountSharePolicyFilterInput: {
      /**
       * 보관 조회 여부
       * @description true 이면 보관된 할인 분담 정책을 조회하고, false 이면 보관되지 않은 할인 분담 정책을 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.
       */
      isArchived?: boolean;
      /** @description 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 파트너 분담율을 가진 할인 분담 정책만 조회합니다. */
      partnerShareRates?: number[];
      /** 검색 키워드 */
      keyword?: components['schemas']['PlatformDiscountSharePolicyFilterInputKeyword'];
    };
    /**
     * 검색 키워드 입력 정보
     * @description 검색 키워드 입력 정보
     * 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 할인 분담 정책만 조회합니다. 하위 필드는 명시된 값 중 한 가지만 적용됩니다.
     */
    PlatformDiscountSharePolicyFilterInputKeyword: {
      /** @description 해당 값이 포함된 id 를 가진 할인 분담 정책만 조회합니다. */
      id?: string;
      /** @description 해당 값이 포함된 name 을 가진 할인 분담만 조회합니다. */
      name?: string;
    };
    /**
     * 할인 분담 정책 필터 옵션 조회 성공 응답 정보
     * @description 할인 분담 정책 필터 옵션 조회 성공 응답 정보
     */
    PlatformDiscountSharePolicyFilterOptions: {
      /** 조회된 파트너 분담율 리스트 */
      partnerShareRates: number[];
    };
    PlatformDiscountSharePolicyIdDuplicatedError: {
      type: string;
      id: string;
      graphqlId: string;
      message?: string;
    };
    PlatformDiscountSharePolicyNotFoundError: {
      type: string;
      message?: string;
    };
    PlatformDiscountSharePolicyScheduleAlreadyExistsError: {
      type: string;
      message?: string;
    };
    /**
     * 외부 api 오류
     * @description 외부 api 오류
     */
    PlatformExternalApiFailedError: {
      type: string;
      message?: string;
    };
    /**
     * 외부 api의 일시적인 오류
     * @description 외부 api의 일시적인 오류
     */
    PlatformExternalApiTemporarilyFailedError: {
      type: string;
      message?: string;
    };
    PlatformExternalPayment: {
      type: string;
      id: string;
      orderName?: string;
      currency: components['schemas']['Currency'];
      method?: components['schemas']['PlatformPaymentMethod'];
      /** Format: date-time */
      paidAt?: string;
    };
    /**
     * 플랫폼 중개수수료 정보
     * @description 플랫폼 중개수수료 정보
     */
    PlatformFee:
      | components['schemas']['PlatformFixedAmountFee']
      | components['schemas']['PlatformFixedRateFee'];
    /**
     * 수수료 계산 방식을 특정하기 위한 입력 정보
     * @description 수수료 계산 방식을 특정하기 위한 입력 정보
     * 정률 수수료를 설정하고 싶은 경우 <code>fixedRate</code> 필드에, 정액 수수료를 설정하고 싶은 경우 <code>fixedAmount</code> 필드에 값을 명시해 요청합니다.
     * 두 필드 모두 값이 들어있지 않은 경우 요청이 거절됩니다.
     */
    PlatformFeeInput: {
      /**
       * 정률 수수료
       * Format: int32
       */
      fixedRate?: number;
      /**
       * 정액 수수료
       * Format: int64
       */
      fixedAmount?: number;
    };
    /**
     * 정액 수수료
     * @description 정액 수수료
     * 총 금액에 무관하게 정해진 수수료 금액을 책정합니다.
     */
    PlatformFixedAmountFee: {
      type: string;
      /**
       * 고정된 수수료 금액
       * Format: int64
       */
      amount: number;
    };
    /**
     * 정률 수수료
     * @description 정률 수수료
     * 총 금액에 정해진 비율을 곱한 만큼의 수수료를 책정합니다.
     */
    PlatformFixedRateFee: {
      type: string;
      /**
       * 수수료율
       * Format: int32
       * @description 총 금액 대비 수수료 비율을 의미하며, 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수입니다. <code>총 금액 * rate * 10^5</code> (<code>rate * 10^3 %</code>) 만큼 수수료를 책정합니다.
       */
      rate: number;
    };
    PlatformInvalidSettlementFormulaError: {
      type: string;
      platformFee?: components['schemas']['PlatformSettlementFormulaError'];
      discountShare?: components['schemas']['PlatformSettlementFormulaError'];
      additionalFee?: components['schemas']['PlatformSettlementFormulaError'];
      message?: string;
    };
    PlatformManualTransfer: {
      type: string;
      id: string;
      graphqlId: string;
      partner: components['schemas']['PlatformPartner'];
      status: components['schemas']['PlatformTransferStatus'];
      memo?: string;
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      settlementCurrency: components['schemas']['Currency'];
      payoutId?: string;
      payoutGraphqlId?: string;
      isForTest: boolean;
      /** Format: int64 */
      settlementAmount: number;
    };
    PlatformManualTransferSummary: {
      type: string;
      id: string;
      graphqlId: string;
      partner: components['schemas']['PlatformTransferSummaryPartner'];
      status: components['schemas']['PlatformTransferStatus'];
      memo?: string;
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      settlementCurrency: components['schemas']['Currency'];
      isForTest: boolean;
      /** Format: int64 */
      settlementAmount: number;
    };
    PlatformNoPayablePartnerSettlementsError: {
      type: string;
      message?: string;
    };
    /**
     * 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
     * @description 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
     */
    PlatformNotEnabledError: {
      type: string;
      message?: string;
    };
    PlatformOngoingPayout: {
      status: string;
      id: string;
      graphqlId: string;
      creatorId: string;
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      summary: components['schemas']['PlatformPayoutSummary'];
      filter: components['schemas']['PlatformPartnerSettlementFilter'];
      /** Format: date-time */
      createdAt: string;
    };
    PlatformOngoingPayoutExistsError: {
      type: string;
      message?: string;
    };
    PlatformOrderCancelTransfer: {
      type: string;
      id: string;
      graphqlId: string;
      partner: components['schemas']['PlatformPartner'];
      status: components['schemas']['PlatformTransferStatus'];
      memo?: string;
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      settlementCurrency: components['schemas']['Currency'];
      payoutId?: string;
      payoutGraphqlId?: string;
      isForTest: boolean;
      amount: components['schemas']['PlatformOrderSettlementAmount'];
      contract: components['schemas']['PlatformContract'];
      payment: components['schemas']['PlatformPayment'];
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementStartDate: string;
      orderLines: components['schemas']['PlatformOrderTransferOrderLine'][];
      additionalFees: components['schemas']['PlatformOrderTransferAdditionalFee'][];
      discounts: components['schemas']['PlatformOrderTransferDiscount'][];
      cancellation: components['schemas']['PlatformOrderTransferCancellation'];
    };
    PlatformOrderCancelTransferSummary: {
      type: string;
      id: string;
      graphqlId: string;
      storeId: string;
      partner: components['schemas']['PlatformTransferSummaryPartner'];
      status: components['schemas']['PlatformTransferStatus'];
      memo?: string;
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      settlementCurrency: components['schemas']['Currency'];
      isForTest: boolean;
      amount: components['schemas']['PlatformOrderSettlementAmount'];
      payment: components['schemas']['PlatformTransferSummaryPayment'];
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementStartDate: string;
    };
    PlatformOrderDetailMismatchedError: {
      type: string;
      message?: string;
    };
    PlatformOrderSettlementAmount: {
      /**
       * 정산 금액
       * Format: int64
       */
      settlement: number;
      /**
       * 결제 금액
       * Format: int64
       */
      payment: number;
      /**
       * 결제 금액 부가세
       * Format: int64
       */
      paymentVat: number;
      /**
       * 결제 금액 부가세 부담금액
       * Format: int64
       * @description 참조된 계약의 결제 금액 부가세 감액 여부에 따라 false인 경우 0원, true인 경우 결제 금액 부가세입니다.
       */
      paymentVatBurden: number;
      /**
       * 주문 금액
       * Format: int64
       */
      order: number;
      /**
       * 중개 수수료
       * Format: int64
       */
      platformFee: number;
      /**
       * 중개 수수료 부가세
       * Format: int64
       */
      platformFeeVat: number;
      /**
       * 추가 수수료
       * Format: int64
       */
      additionalFee: number;
      /**
       * 추가 수수료 부가세
       * Format: int64
       */
      additionalFeeVat: number;
      /**
       * 할인 금액
       * Format: int64
       */
      discount: number;
      /**
       * 할인 분담 금액
       * Format: int64
       */
      discountShare: number;
    };
    PlatformOrderTransfer: {
      type: string;
      id: string;
      graphqlId: string;
      partner: components['schemas']['PlatformPartner'];
      status: components['schemas']['PlatformTransferStatus'];
      memo?: string;
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      settlementCurrency: components['schemas']['Currency'];
      payoutId?: string;
      payoutGraphqlId?: string;
      isForTest: boolean;
      amount: components['schemas']['PlatformOrderSettlementAmount'];
      contract: components['schemas']['PlatformContract'];
      payment: components['schemas']['PlatformPayment'];
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementStartDate: string;
      orderLines: components['schemas']['PlatformOrderTransferOrderLine'][];
      additionalFees: components['schemas']['PlatformOrderTransferAdditionalFee'][];
      discounts: components['schemas']['PlatformOrderTransferDiscount'][];
    };
    PlatformOrderTransferAdditionalFee: {
      policy: components['schemas']['PlatformAdditionalFeePolicy'];
      /** Format: int64 */
      amount: number;
      /** Format: int64 */
      vat: number;
    };
    PlatformOrderTransferAlreadyCancelledError: {
      type: string;
      message?: string;
    };
    PlatformOrderTransferCancellation: {
      id: string;
      /** Format: date-time */
      cancelledAt: string;
    };
    PlatformOrderTransferDiscount: {
      sharePolicy: components['schemas']['PlatformDiscountSharePolicy'];
      /** Format: int64 */
      amount: number;
      /** Format: int64 */
      shareAmount: number;
    };
    PlatformOrderTransferOrderLine: {
      product: components['schemas']['PlatformOrderTransferProduct'];
      /** Format: int32 */
      quantity: number;
      discounts: components['schemas']['PlatformOrderTransferDiscount'][];
      additionalFees: components['schemas']['PlatformOrderTransferAdditionalFee'][];
      amount: components['schemas']['PlatformOrderSettlementAmount'];
    };
    PlatformOrderTransferProduct: {
      id: string;
      name: string;
      /** Format: int64 */
      amount: number;
      tag?: string;
    };
    PlatformOrderTransferSummary: {
      type: string;
      id: string;
      graphqlId: string;
      storeId: string;
      partner: components['schemas']['PlatformTransferSummaryPartner'];
      status: components['schemas']['PlatformTransferStatus'];
      memo?: string;
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      settlementCurrency: components['schemas']['Currency'];
      isForTest: boolean;
      amount: components['schemas']['PlatformOrderSettlementAmount'];
      payment: components['schemas']['PlatformTransferSummaryPayment'];
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementStartDate: string;
    };
    /**
     * 파트너
     * @description 파트너
     * 파트너는 가맹점이 정산해주어야 할 대상입니다.
     * 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
     */
    PlatformPartner: {
      /** 파트너 고유 아이디 */
      id: string;
      graphqlId: string;
      /** 파트너 법인명 혹은 이름 */
      name: string;
      /** 파트너 담당자 연락 정보 */
      contact: components['schemas']['PlatformContact'];
      /** 정산 계좌 */
      account: components['schemas']['PlatformAccount'];
      /** 파트너의 상태 */
      status: components['schemas']['PlatformPartnerStatus'];
      defaultContractId: string;
      /** 파트너에 대한 메모 */
      memo?: string;
      /** 파트너의 태그 리스트 */
      tags: string[];
      /** 파트너 유형별 정보 */
      type?: components['schemas']['PlatformPartnerType'];
      /** 보관 여부 */
      isArchived: boolean;
      /**
       * 변경 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    /**
     * 파트너 계약 요약 정보
     * @description 파트너 계약 요약 정보
     */
    PlatformPartnerContractSummary: {
      /** 계약 고유 아이디 */
      id: string;
      /** 계약 이름 */
      name: string;
    };
    /**
     * 파트너 현황 조회 성공 응답
     * @description 파트너 현황 조회 성공 응답
     */
    PlatformPartnerDashboard: {
      /** 전체 파트너 현황 */
      totalPartner: components['schemas']['PlatformPartnerDashboardCount'];
      /** 정산 예정인 파트너 현황 */
      upcomingSettledPartner: components['schemas']['PlatformPartnerDashboardCount'];
      /**
       * 예정된 정산일
       * @description 정산이 예정되어 있지 않은 경우 값이 주어지지 않습니다.
       */
      upcomingSettlementDate?: string;
    };
    /**
     * 파트너 현황 정보
     * @description 파트너 현황 정보
     */
    PlatformPartnerDashboardCount: {
      /**
       * 보관된 파트너를 포함한 전체 파트너 수
       * Format: int32
       */
      total: number;
      /**
       * 보관된 파트너 수
       * Format: int32
       */
      archived: number;
    };
    /**
     * 파트너 필터 입력 정보
     * @description 파트너 필터 입력 정보
     */
    PlatformPartnerFilterInput: {
      /**
       * 보관 조회 여부
       * @description true 이면 보관된 파트너를 조회하고, false 이면 보관되지 않은 파트너를 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.
       */
      isArchived?: boolean;
      /** @description 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 태그를 하나 이상 가지는 파트너만 조회합니다. */
      tags?: string[];
      /**
       * 은행
       * @description 하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 계좌 은행을 가진 파트너만 조회합니다.
       */
      banks?: components['schemas']['Bank'][];
      /**
       * 통화 단위
       * @description 하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 계좌 통화를 가진 파트너만 조회합니다.
       */
      accountCurrencies?: components['schemas']['Currency'][];
      /** @description 하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 아이디를 가진 파트너만 조회합니다. */
      ids?: string[];
      /** @description 하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 기본 계약 id를 가진 파트너만 조회합니다. */
      contractIds?: string[];
      /** 검색 키워드 */
      keyword?: components['schemas']['PlatformPartnerFilterInputKeyword'];
    };
    /**
     * 파트너 검색 키워드 입력 정보
     * @description 파트너 검색 키워드 입력 정보
     * 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 파트너만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
     */
    PlatformPartnerFilterInputKeyword: {
      /** @description 해당 값이 포함된 id 를 가진 파트너만 조회합니다. */
      id?: string;
      /** @description 해당 값이 포함된 이름 을 가진 파트너만 조회합니다. */
      name?: string;
      /** @description 해당 값이 포함된 이메일 주소를 가진 파트너만 조회합니다. */
      email?: string;
      /** @description 해당 값이 포함된 사업자등록번호를 가진 파트너만 조회합니다. */
      businessRegistrationNumber?: string;
      /** @description 해당 값이 포함된 기본 계약 아이디를 가진 파트너만 조회합니다. */
      defaultContractId?: string;
      /** @description 해당 값이 포함된 메모를 가진 파트너만 조회합니다. */
      memo?: string;
      /** @description 해당 값이 포함된 계좌번호를 가진 파트너만 조회합니다. */
      accountNumber?: string;
      /** @description 해당 값이 포함된 계좌 예금주명을 가진 파트너만 조회합니다. */
      accountHolder?: string;
    };
    /**
     * 파트너 필터 옵션 조회 성공 응답 정보
     * @description 파트너 필터 옵션 조회 성공 응답 정보
     */
    PlatformPartnerFilterOptions: {
      /** 조회된 태그 리스트 */
      tags: string[];
      /** 조회된 파트너 계약 요약 정보 리스트 */
      contractSummary: components['schemas']['PlatformPartnerContractSummary'][];
    };
    PlatformPartnerIdAlreadyExistsError: {
      type: string;
      message?: string;
    };
    PlatformPartnerIdsAlreadyExistError: {
      type: string;
      ids: string[];
      graphqlIds: string[];
      message?: string;
    };
    PlatformPartnerIdsDuplicatedError: {
      type: string;
      ids: string[];
      graphqlIds: string[];
      message?: string;
    };
    PlatformPartnerManualSettlement: {
      type: string;
      partner: components['schemas']['PlatformPartnerSettlementPartner'];
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      /** Format: int64 */
      settlementAmount: number;
      settlementCurrency: components['schemas']['Currency'];
      payoutCurrency: components['schemas']['Currency'];
      isForTest: boolean;
    };
    PlatformPartnerNotFoundError: {
      type: string;
      message?: string;
    };
    PlatformPartnerOrderSettlement: {
      type: string;
      partner: components['schemas']['PlatformPartnerSettlementPartner'];
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      settlementCurrency: components['schemas']['Currency'];
      payoutCurrency: components['schemas']['Currency'];
      contractId: string;
      settlementStartDateRange: components['schemas']['DateRange'];
      amount: components['schemas']['PlatformOrderSettlementAmount'];
      isForTest: boolean;
    };
    PlatformPartnerScheduleAlreadyExistsError: {
      type: string;
      message?: string;
    };
    PlatformPartnerSchedulesAlreadyExistError: {
      type: string;
      ids: string[];
      graphqlIds: string[];
      message?: string;
    };
    PlatformPartnerSettlement:
      | components['schemas']['PlatformPartnerManualSettlement']
      | components['schemas']['PlatformPartnerOrderSettlement'];
    PlatformPartnerSettlementFilter: {
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      settlementStartDateRange: components['schemas']['DateRange'];
      contractIds: string[];
      transferTypes: components['schemas']['PlatformTransferType'][];
      transferStatuses: components['schemas']['PlatformTransferStatus'][];
      /** 은행 */
      banks: components['schemas']['Bank'][];
      paymentMethodTypes: components['schemas']['PaymentMethodType'][];
      /** 통화 단위 */
      settlementCurrencies: components['schemas']['Currency'][];
      /** 통화 단위 */
      payoutCurrencies: components['schemas']['Currency'][];
      partnerTags: string[];
      keyword?: components['schemas']['PlatformPartnerSettlementFilterKeyword'];
      isForTest: boolean;
    };
    PlatformPartnerSettlementFilterDateOption: {
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      settlementStartDateRange: components['schemas']['DateRange'];
    };
    PlatformPartnerSettlementFilterInput: {
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      settlementStartDateRange: components['schemas']['DateRange'];
      contractIds?: string[];
      transferTypes?: components['schemas']['PlatformTransferType'][];
      transferStatuses?: components['schemas']['PlatformTransferStatus'][];
      /** 은행 */
      banks?: components['schemas']['Bank'][];
      paymentMethodTypes?: components['schemas']['PaymentMethodType'][];
      /** 통화 단위 */
      settlementCurrencies?: components['schemas']['Currency'][];
      /** 통화 단위 */
      payoutCurrencies?: components['schemas']['Currency'][];
      partnerTags?: string[];
      keyword?: components['schemas']['PlatformPartnerSettlementFilterKeywordInput'];
      isForTest?: boolean;
    };
    PlatformPartnerSettlementFilterKeyword: {
      type: components['schemas']['PlatformPartnerSettlementFilterKeywordType'];
      value: string;
    };
    PlatformPartnerSettlementFilterKeywordInput: {
      partnerId?: string;
      partnerEmail?: string;
      partnerBusinessRegistrationNumber?: string;
      partnerMemo?: string;
      platformFee?: string;
      contractMemo?: string;
      additionalFeePolicyId?: string;
      additionalFeePolicyFee?: string;
      additionalFeePolicyMemo?: string;
      discountSharePolicyId?: string;
      discountSharePolicyRate?: string;
      discountSharePolicyMemo?: string;
      productId?: string;
    };
    /** @enum {string} */
    PlatformPartnerSettlementFilterKeywordType:
      | 'ADDITIONAL_FEE_POLICY_FEE'
      | 'ADDITIONAL_FEE_POLICY_ID'
      | 'ADDITIONAL_FEE_POLICY_MEMO'
      | 'CONTRACT_MEMO'
      | 'DISCOUNT_SHARE_POLICY_ID'
      | 'DISCOUNT_SHARE_POLICY_MEMO'
      | 'DISCOUNT_SHARE_POLICY_RATE'
      | 'PARTNER_BUSINESS_REGISTRATION_NUMBER'
      | 'PARTNER_EMAIL'
      | 'PARTNER_ID'
      | 'PARTNER_MEMO'
      | 'PLATFORM_FEE'
      | 'PRODUCT_ID';
    PlatformPartnerSettlementFilterOptions: {
      contractIds: string[];
      dateOptions: components['schemas']['PlatformPartnerSettlementFilterDateOption'][];
      /** 은행 */
      banks: components['schemas']['Bank'][];
      /** 통화 단위 */
      settlementCurrencies: components['schemas']['Currency'][];
      /** 통화 단위 */
      payoutCurrencies: components['schemas']['Currency'][];
      partnerTags: string[];
    };
    PlatformPartnerSettlementPartner: {
      id: string;
      graphqlId: string;
      name: string;
      bank: components['schemas']['Bank'];
      accountHolder: string;
      accountNumber: string;
    };
    /**
     * 플랫폼 파트너 상태
     * @description 플랫폼 파트너 상태
     *
     * @enum {string}
     */
    PlatformPartnerStatus: 'APPROVED' | 'PENDING' | 'REJECTED';
    /**
     * 파트너 유형별 추가 정보
     * @description 파트너 유형별 추가 정보
     */
    PlatformPartnerType:
      | components['schemas']['PlatformPartnerTypeBusiness']
      | components['schemas']['PlatformPartnerTypeWhtPayer'];
    /**
     * 사업자 파트너 정보
     * @description 사업자 파트너 정보
     * 사업자 유형의 파트너 추가 정보 입니다.
     */
    PlatformPartnerTypeBusiness: {
      type: string;
      /** 상호명 */
      companyName: string;
      /** 사업자등록번호 */
      businessRegistrationNumber: string;
      /** 대표자 이름 */
      representativeName: string;
      /** 사업장 주소 */
      companyAddress?: string;
      /** 업태 */
      businessType?: string;
      /** 업종 */
      businessClass?: string;
    };
    /**
     * 원천징수대상자 파트너 정보
     * @description 원천징수대상자 파트너 정보
     * 비사업자 유형의 파트너 추가 정보 입니다.
     */
    PlatformPartnerTypeWhtPayer: {
      type: string;
      /** 생년월일 */
      birthdate: string;
    };
    /**
     * 금액 부담 주체
     * @description 금액 부담 주체
     * 플랫폼에서 발생한 결제 수수료, 부가세 등 금액을 부담하는 주체를 나타냅니다.
     *
     * @enum {string}
     */
    PlatformPayer: 'MERCHANT' | 'PARTNER';
    PlatformPayment:
      | components['schemas']['PlatformExternalPayment']
      | components['schemas']['PlatformPortOnePayment'];
    PlatformPaymentChannel: {
      id: string;
      key: string;
      name: string;
      pgMerchantId: string;
      pgCompany?: components['schemas']['PgCompany'];
    };
    PlatformPaymentMethod:
      | components['schemas']['PlatformPaymentMethodCard']
      | components['schemas']['PlatformPaymentMethodEasyPay']
      | components['schemas']['PlatformPaymentMethodGiftCertificate']
      | components['schemas']['PlatformPaymentMethodMobile']
      | components['schemas']['PlatformPaymentMethodTransfer']
      | components['schemas']['PlatformPaymentMethodVirtualAccount'];
    PlatformPaymentMethodCard: {
      type: string;
    };
    PlatformPaymentMethodCardInput: Record<string, never>;
    PlatformPaymentMethodEasyPay: {
      type: string;
      provider?: components['schemas']['EasyPayProvider'];
      methodType?: components['schemas']['EasyPayMethodType'];
    };
    PlatformPaymentMethodEasyPayInput: {
      provider?: components['schemas']['EasyPayProvider'];
      methodType?: components['schemas']['EasyPayMethodType'];
    };
    PlatformPaymentMethodGiftCertificate: {
      type: string;
    };
    PlatformPaymentMethodGiftCertificateInput: Record<string, never>;
    PlatformPaymentMethodInput: {
      card?: components['schemas']['PlatformPaymentMethodCardInput'];
      transfer?: components['schemas']['PlatformPaymentMethodTransferInput'];
      virtualAccount?: components['schemas']['PlatformPaymentMethodVirtualAccountInput'];
      giftCertificate?: components['schemas']['PlatformPaymentMethodGiftCertificateInput'];
      mobile?: components['schemas']['PlatformPaymentMethodMobileInput'];
      easyPay?: components['schemas']['PlatformPaymentMethodEasyPayInput'];
    };
    PlatformPaymentMethodMobile: {
      type: string;
    };
    PlatformPaymentMethodMobileInput: Record<string, never>;
    PlatformPaymentMethodTransfer: {
      type: string;
    };
    PlatformPaymentMethodTransferInput: Record<string, never>;
    PlatformPaymentMethodVirtualAccount: {
      type: string;
    };
    PlatformPaymentMethodVirtualAccountInput: Record<string, never>;
    PlatformPaymentNotFoundError: {
      type: string;
      message?: string;
    };
    PlatformPayout:
      | components['schemas']['PlatformCompletedPayout']
      | components['schemas']['PlatformOngoingPayout'];
    PlatformPayoutAlreadyCompletedError: {
      type: string;
      message?: string;
    };
    PlatformPayoutCreatorMismatchedError: {
      type: string;
      creatorId: string;
      message?: string;
    };
    PlatformPayoutFilterInput: {
      statuses?: components['schemas']['PlatformPayoutStatus'][];
      isForTest?: boolean;
    };
    PlatformPayoutNotFoundError: {
      type: string;
      message?: string;
    };
    PlatformPayoutPartnerSettlement: {
      id: string;
      graphqlId: string;
      payoutId: string;
      payoutGraphqlId: string;
      status: components['schemas']['PlatformPayoutPartnerSettlementStatus'];
      partnerSettlement: components['schemas']['PlatformPartnerSettlement'];
    };
    PlatformPayoutPartnerSettlementAlreadyPaidOutError: {
      type: string;
      message?: string;
    };
    PlatformPayoutPartnerSettlementNotFoundError: {
      type: string;
      message?: string;
    };
    /** @enum {string} */
    PlatformPayoutPartnerSettlementStatus: 'PAID_OUT' | 'WITHHELD';
    PlatformPayoutSheetNotFoundError: {
      type: string;
      message?: string;
    };
    /** @enum {string} */
    PlatformPayoutStatus: 'COMPLETED' | 'ONGOING';
    PlatformPayoutSummary: {
      /** Format: int32 */
      partnerCount: number;
      /** Format: int64 */
      totalSettlementAmount: number;
      /** Format: int32 */
      paidOutPartnerSettlementCount: number;
      /** Format: int32 */
      totalPartnerSettlementCount: number;
    };
    PlatformPortOnePayment: {
      type: string;
      id: string;
      storeId: string;
      channelKey: string;
      orderName: string;
      method?: components['schemas']['PlatformPaymentMethod'];
      currency: components['schemas']['Currency'];
      /** Format: date-time */
      paidAt: string;
    };
    PlatformProductIdDuplicatedError: {
      type: string;
      id: string;
      message?: string;
    };
    PlatformProductIdNotFoundError: {
      type: string;
      id: string;
      message?: string;
    };
    /**
     * 금액에 대한 소수점 처리 방식
     * @description 금액에 대한 소수점 처리 방식
     *
     * @enum {string}
     */
    PlatformRoundType: 'DOWN' | 'OFF' | 'UP';
    PlatformSettlementCancelAmountExceededPortOneCancelError: {
      type: string;
      /** Format: int64 */
      registeredSettlementCancelAmount: number;
      /** Format: int64 */
      requestSettlementCancelAmount: number;
      /** Format: int64 */
      portOneCancelAmount: number;
      message?: string;
    };
    /**
     * 정산 주기
     * @description 정산 주기
     * 지체일, 정산일, 기준일로 구성되며, 해당 요소들의 조합으로 실제 정산일을 계산합니다.
     */
    PlatformSettlementCycle: {
      /**
       * 지체일 (d+n 의 n)
       * Format: int32
       * @description 정산시작일(통상 주문완료일)로부터 더해진 다음 날짜로부터 가장 가까운 날에 정산이 됩니다. 최소 1 에서 최대 10 까지 지정할 수 있습니다.
       */
      lagDays: number;
      /** 기준일로, 정산일 계산 시 공휴일을 고려하기 위한 정보입니다. */
      datePolicy: components['schemas']['PlatformSettlementCycleDatePolicy'];
      /** 정산 주기 계산 방식 */
      method: components['schemas']['PlatformSettlementCycleMethod'];
    };
    /**
     * 플랫폼 정산 기준일
     * @description 플랫폼 정산 기준일
     *
     * @enum {string}
     */
    PlatformSettlementCycleDatePolicy:
      | 'CALENDAR_DAY'
      | 'HOLIDAY_AFTER'
      | 'HOLIDAY_BEFORE';
    /**
     * 플랫폼 정산 주기 입력 정보
     * @description 플랫폼 정산 주기 입력 정보
     */
    PlatformSettlementCycleInput: {
      /**
       * 지체일 (d+n 의 n)
       * Format: int32
       * @description 정산시작일(통상 주문완료일)로부터 더해진 다음 날짜로부터 가장 가까운 날에 정산이 됩니다. 최소 1 에서 최대 10 까지 지정할 수 있습니다.
       */
      lagDays: number;
      /** 기준일로, 정산일 계산 시 공휴일을 고려하기 위한 정보입니다. */
      datePolicy: components['schemas']['PlatformSettlementCycleDatePolicy'];
      /** 정산 주기 계산 방식 */
      method: components['schemas']['PlatformSettlementCycleMethodInput'];
    };
    /**
     * 플랫폼 정산 주기 계산 방식
     * @description 플랫폼 정산 주기 계산 방식
     */
    PlatformSettlementCycleMethod:
      | components['schemas']['PlatformSettlementCycleMethodDaily']
      | components['schemas']['PlatformSettlementCycleMethodManualDates']
      | components['schemas']['PlatformSettlementCycleMethodMonthly']
      | components['schemas']['PlatformSettlementCycleMethodWeekly'];
    /**
     * 매일 정산
     * @description 매일 정산
     */
    PlatformSettlementCycleMethodDaily: {
      type: string;
    };
    PlatformSettlementCycleMethodDailyInput: Record<string, never>;
    /**
     * 플랫폼 정산 주기 계산 방식 입력 정보
     * @description 플랫폼 정산 주기 계산 방식 입력 정보
     * 하나의 하위 필드에만 값을 명시하여 요청합니다.
     */
    PlatformSettlementCycleMethodInput: {
      /** 매일 정산 */
      daily?: components['schemas']['PlatformSettlementCycleMethodDailyInput'];
      /** 매주 정해진 요일에 정산 */
      weekly?: components['schemas']['PlatformSettlementCycleMethodWeeklyInput'];
      /** 매월 정해진 날(일)에 정산 */
      monthly?: components['schemas']['PlatformSettlementCycleMethodMonthlyInput'];
      /** 정해진 날짜(월, 일)에 정산 */
      manualDates?: components['schemas']['PlatformSettlementCycleMethodManualDatesInput'];
    };
    /**
     * 정해진 날짜(월, 일)에 정산
     * @description 정해진 날짜(월, 일)에 정산
     */
    PlatformSettlementCycleMethodManualDates: {
      type: string;
      /** 월 및 일자 정보 */
      dates: components['schemas']['MonthDay'][];
    };
    PlatformSettlementCycleMethodManualDatesInput: {
      /** 월 및 일자 정보 */
      dates: components['schemas']['MonthDay'][];
    };
    /**
     * 매월 정해진 날(일)에 정산
     * @description 매월 정해진 날(일)에 정산
     */
    PlatformSettlementCycleMethodMonthly: {
      type: string;
      daysOfMonth: number[];
    };
    PlatformSettlementCycleMethodMonthlyInput: {
      daysOfMonth: number[];
    };
    /**
     * 매주 정해진 요일에 정산
     * @description 매주 정해진 요일에 정산
     */
    PlatformSettlementCycleMethodWeekly: {
      type: string;
      /** 요일 */
      daysOfWeek: components['schemas']['DayOfWeek'][];
    };
    PlatformSettlementCycleMethodWeeklyInput: {
      /** 요일 */
      daysOfWeek: components['schemas']['DayOfWeek'][];
    };
    /**
     * 플랫폼 정산 주기 계산 방식
     * @description 플랫폼 정산 주기 계산 방식
     *
     * @enum {string}
     */
    PlatformSettlementCycleType:
      | 'DAILY'
      | 'MANUAL_DATES'
      | 'MONTHLY'
      | 'WEEKLY';
    /**
     * 플랫폼 내 발생하는 여러 수수료 및 할인 분담에 관한 계산식 정보
     * @description 플랫폼 내 발생하는 여러 수수료 및 할인 분담에 관한 계산식 정보
     */
    PlatformSettlementFormula: {
      /** 플랫폼 수수료 계산식 */
      platformFee: string;
      /** 할인 분담액 계산식 */
      discountShare: string;
      /** 추가 수수료 계산식 */
      additionalFee: string;
    };
    PlatformSettlementFormulaError:
      | components['schemas']['PlatformSettlementFormulaInvalidFunction']
      | components['schemas']['PlatformSettlementFormulaInvalidOperator']
      | components['schemas']['PlatformSettlementFormulaInvalidSyntax']
      | components['schemas']['PlatformSettlementFormulaInvalidVariable']
      | components['schemas']['PlatformSettlementFormulaUnexpectedFunctionArguments']
      | components['schemas']['PlatformSettlementFormulaUnknownError']
      | components['schemas']['PlatformSettlementFormulaUnsupportedVariable'];
    PlatformSettlementFormulaInvalidFunction: {
      type: string;
      name: string;
      position: components['schemas']['PlatformSettlementFormulaPosition'];
    };
    PlatformSettlementFormulaInvalidOperator: {
      type: string;
      operator: string;
      position: components['schemas']['PlatformSettlementFormulaPosition'];
    };
    PlatformSettlementFormulaInvalidSyntax: {
      type: string;
      syntax: string;
      position: components['schemas']['PlatformSettlementFormulaPosition'];
    };
    PlatformSettlementFormulaInvalidVariable: {
      type: string;
      name: string;
      position: components['schemas']['PlatformSettlementFormulaPosition'];
    };
    PlatformSettlementFormulaPosition: {
      /** Format: int32 */
      startLine: number;
      /** Format: int32 */
      startIndex: number;
      /** Format: int32 */
      endLine: number;
      /** Format: int32 */
      endIndex: number;
    };
    PlatformSettlementFormulaUnexpectedFunctionArguments: {
      type: string;
      functionName: string;
      /** Format: int32 */
      expectedCount: number;
      /** Format: int32 */
      currentCount: number;
      position: components['schemas']['PlatformSettlementFormulaPosition'];
    };
    PlatformSettlementFormulaUnknownError: {
      type: string;
    };
    PlatformSettlementFormulaUnsupportedVariable: {
      type: string;
      name: string;
      position: components['schemas']['PlatformSettlementFormulaPosition'];
    };
    PlatformSettlementPaymentAmountExceededPortOnePaymentError: {
      type: string;
      /** Format: int64 */
      registeredSettlementPaymentAmount: number;
      /** Format: int64 */
      requestSettlementPaymentAmount: number;
      /** Format: int64 */
      portOnePaymentAmount: number;
      message?: string;
    };
    /**
     * 플랫폼 정산건 처리 방식에 관한 규칙
     * @description 플랫폼 정산건 처리 방식에 관한 규칙
     */
    PlatformSettlementRule: {
      /** paymentId, storeId, partnerId가 같은 주문 정산건에 대한 중복 정산 지원 여부 */
      supportsMultipleOrderTransfersPerPartner: boolean;
      /** 정산일이 정산시작일보다 작거나 같을 경우 공휴일 후 영업일로 정산일 다시 계산 여부 */
      adjustSettlementDateAfterHolidayIfEarlier: boolean;
    };
    PlatformTransfer:
      | components['schemas']['PlatformManualTransfer']
      | components['schemas']['PlatformOrderCancelTransfer']
      | components['schemas']['PlatformOrderTransfer'];
    PlatformTransferAlreadyExistsError: {
      type: string;
      transferId: string;
      transferGraphqlId: string;
      message?: string;
    };
    PlatformTransferDashboard: {
      /** Format: int64 */
      totalSettlementAmount: number;
      /** Format: int64 */
      totalSettlementFeeAmount: number;
      /** Format: int64 */
      totalOrderAmount: number;
      settlementStartDateRange?: components['schemas']['DateRange'];
    };
    PlatformTransferDiscountSharePolicyNotFoundError: {
      type: string;
      discountSharePolicyId: string;
      discountSharePolicyGraphqlId: string;
      productId?: string;
      message?: string;
    };
    PlatformTransferFilterInput: {
      settlementStartDateRange?: components['schemas']['DateRange'];
      settlementDateRange?: components['schemas']['DateRange'];
      partnerTags?: string[];
      contractIds?: string[];
      discountSharePolicyIds?: string[];
      additionalFeePolicyIds?: string[];
      paymentMethodTypes?: components['schemas']['PaymentMethodType'][];
      channelKeys?: string[];
      types?: components['schemas']['PlatformTransferType'][];
      statuses?: components['schemas']['PlatformTransferStatus'][];
      keyword?: components['schemas']['PlatformTransferFilterInputKeyword'];
      isForTest?: boolean;
    };
    PlatformTransferFilterInputKeyword: {
      all?: string;
      paymentId?: string;
      transferId?: string;
      transferMemo?: string;
      productId?: string;
      productName?: string;
      partnerId?: string;
      partnerName?: string;
      partnerMemo?: string;
    };
    PlatformTransferFilterOptions: {
      partnerTags: string[];
      contractIds: string[];
      additionalFeePolicyIds: string[];
      discountSharePolicyIds: string[];
      paymentChannels: components['schemas']['PlatformPaymentChannel'][];
    };
    PlatformTransferNonDeletableStatusError: {
      type: string;
      message?: string;
    };
    PlatformTransferNotFoundError: {
      type: string;
      message?: string;
    };
    /** @enum {string} */
    PlatformTransferStatus:
      | 'IN_PAYOUT'
      | 'IN_PROCESS'
      | 'PAID_OUT'
      | 'SCHEDULED'
      | 'SETTLED';
    PlatformTransferSummary:
      | components['schemas']['PlatformManualTransferSummary']
      | components['schemas']['PlatformOrderCancelTransferSummary']
      | components['schemas']['PlatformOrderTransferSummary'];
    PlatformTransferSummaryExternalPayment: {
      type: string;
      id: string;
      orderName?: string;
      currency: components['schemas']['Currency'];
      methodType?: components['schemas']['PaymentMethodType'];
    };
    PlatformTransferSummaryPartner: {
      id: string;
      graphqlId: string;
      name: string;
    };
    PlatformTransferSummaryPayment:
      | components['schemas']['PlatformTransferSummaryExternalPayment']
      | components['schemas']['PlatformTransferSummaryPortOnePayment'];
    PlatformTransferSummaryPortOnePayment: {
      type: string;
      id: string;
      orderName: string;
      currency: components['schemas']['Currency'];
      methodType?: components['schemas']['PaymentMethodType'];
    };
    /** @enum {string} */
    PlatformTransferType: 'MANUAL' | 'ORDER' | 'ORDER_CANCEL';
    /**
     * 사용할 수 없는 정산일이 요청된 경우
     * @description 사용할 수 없는 정산일이 요청된 경우
     * 요청한 정산일에 이체되지 않은 주문 정산 건이 없을 때 발생합니다.
     */
    PlatformUnavailableSettlementDateError: {
      type: string;
      /** @description 날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다. */
      settlementDate: string;
      message?: string;
    };
    /**
     * 포트원 버전
     * @description 포트원 버전
     *
     * @enum {string}
     */
    PortOneVersion: 'V1' | 'V2';
    /**
     * 결제 정보 사전 등록 입력 정보
     * @description 결제 정보 사전 등록 입력 정보
     */
    PreRegisterPaymentBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /**
       * 결제 총 금액
       * Format: int64
       */
      totalAmount?: number;
      /**
       * 결제 면세 금액
       * Format: int64
       */
      taxFreeAmount?: number;
      /** 통화 단위 */
      currency?: components['schemas']['Currency'];
    };
    PreRegisterPaymentError:
      | components['schemas']['AlreadyPaidError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 결제 사전 등록 성공 응답
     * @description 결제 사전 등록 성공 응답
     */
    PreRegisterPaymentResponse: Record<string, never>;
    /**
     * 준비 상태의 본인인증 내역
     * @description 준비 상태의 본인인증 내역
     */
    ReadyIdentityVerification: {
      /** 본인인증 상태 */
      status: string;
      /** 본인인증 내역 아이디 */
      id: string;
      /** 사용된 본인인증 채널 */
      channel?: components['schemas']['SelectedChannel'];
      /** 요청 시 고객 정보 */
      requestedCustomer: components['schemas']['IdentityVerificationRequestedCustomer'];
      /** 사용자 지정 데이터 */
      customData?: string;
      /**
       * 본인인증 요청 시점
       * Format: date-time
       */
      requestedAt: string;
      /**
       * 업데이트 시점
       * Format: date-time
       */
      updatedAt: string;
      /**
       * 상태 업데이트 시점
       * Format: date-time
       */
      statusChangedAt: string;
    };
    /**
     * 준비 상태의 결제 건
     * @description 준비 상태의 결제 건
     */
    ReadyPayment: {
      /** 결제 건 상태 */
      status: string;
      /** 결제 건 아이디 */
      id: string;
      /**
       * 결제 건 포트원 채번 아이디
       * @description V1 결제 건의 경우 imp_uid에 해당합니다.
       */
      transactionId: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제수단 정보 */
      method?: components['schemas']['PaymentMethod'];
      /** 결제 채널 */
      channel?: components['schemas']['SelectedChannel'];
      /** 포트원 버전 */
      version: components['schemas']['PortOneVersion'];
      /**
       * 결제 예약 건 아이디
       * @description 결제 예약을 이용한 경우에만 존재
       */
      scheduleId?: string;
      /**
       * 결제 시 사용된 빌링키
       * @description 빌링키 결제인 경우에만 존재
       */
      billingKey?: string;
      /** 웹훅 발송 내역 */
      webhooks?: components['schemas']['PaymentWebhook'][];
      /**
       * 결제 요청 시점
       * Format: date-time
       */
      requestedAt: string;
      /**
       * 업데이트 시점
       * Format: date-time
       */
      updatedAt: string;
      /**
       * 상태 업데이트 시점
       * Format: date-time
       */
      statusChangedAt: string;
      /** 주문명 */
      orderName: string;
      /** 결제 금액 관련 세부 정보 */
      amount: components['schemas']['PaymentAmount'];
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 구매자 정보 */
      customer: components['schemas']['Customer'];
      /** 프로모션 아이디 */
      promotionId?: string;
      /** 문화비 지출 여부 */
      isCulturalExpense?: boolean;
      /**
       * 에스크로 결제의 배송 정보
       * @description 에스크로 결제인 경우 존재합니다.
       */
      escrow?: components['schemas']['PaymentEscrow'];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 상품 갯수
       * Format: int32
       */
      productCount?: number;
      /** 사용자 지정 데이터 */
      customData?: string;
      /** 국가 코드 */
      country?: components['schemas']['Country'];
    };
    RecoverPlatformAdditionalFeePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformAdditionalFeePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 추가 수수료 정책 복원 성공 응답
     * @description 추가 수수료 정책 복원 성공 응답
     */
    RecoverPlatformAdditionalFeePolicyResponse: {
      /** 복원된 추가 수수료 정책 */
      additionalFeePolicy: components['schemas']['PlatformAdditionalFeePolicy'];
    };
    RecoverPlatformContractError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 계약 복원 성공 응답
     * @description 계약 복원 성공 응답
     */
    RecoverPlatformContractResponse: {
      /** 복원된 계약 */
      contract: components['schemas']['PlatformContract'];
    };
    RecoverPlatformDiscountSharePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformDiscountSharePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 할인 분담 복원 성공 응답
     * @description 할인 분담 복원 성공 응답
     */
    RecoverPlatformDiscountSharePolicyResponse: {
      /** 복원된 할인 분담 */
      discountSharePolicy: components['schemas']['PlatformDiscountSharePolicy'];
    };
    RecoverPlatformPartnerError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 복원 성공 응답
     * @description 파트너 복원 성공 응답
     */
    RecoverPlatformPartnerResponse: {
      /** 복원된 파트너 */
      partner: components['schemas']['PlatformPartner'];
    };
    /**
     * 토큰 재발급을 위한 입력 정보
     * @description 토큰 재발급을 위한 입력 정보
     */
    RefreshTokenBody: {
      /** 리프레시 토큰 */
      refreshToken: string;
    };
    RefreshTokenError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 토큰 재발급 성공 응답
     * @description 토큰 재발급 성공 응답
     */
    RefreshTokenResponse: {
      /**
       * 인증에 사용하는 엑세스 토큰
       * @description 하루의 유효기간을 가지고 있습니다.
       */
      accessToken: string;
      /**
       * 토큰 재발급 및 유효기간 연장을 위해 사용하는 리프레시 토큰
       * @description 일주일의 유효기간을 가지고 있으며, 리프레시 토큰을 통해 유효기간이 연장된 새로운 엑세스 토큰을 발급받을 수 있습니다.
       */
      refreshToken: string;
    };
    /**
     * 세금계산서 역발행 요청 거부 정보
     * @description 세금계산서 역발행 요청 거부 정보
     */
    RefuseB2bTaxInvoiceRequestBody: {
      /** 사업자등록번호 */
      brn: string;
      /** 세금계산서 문서 번호 */
      documentKey: string;
      /**
       * 문서 번호 유형
       * @description 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.
       */
      documentKeyType?: components['schemas']['B2bTaxInvoiceDocumentKeyType'];
      /** 메모 */
      memo?: string;
    };
    RefuseB2bTaxInvoiceRequestError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bTaxInvoiceNoSupplierDocumentKeyError']
      | components['schemas']['B2bTaxInvoiceNotFoundError']
      | components['schemas']['B2bTaxInvoiceNotRequestedStatusError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 사업자 연동 요청 정보
     * @description 사업자 연동 요청 정보
     */
    RegisterB2bMemberCompanyBody: {
      /** 사업자 정보 */
      company: components['schemas']['B2bMemberCompany'];
      /** 담당자 정보 */
      contact: components['schemas']['B2bCompanyContactInput'];
    };
    RegisterB2bMemberCompanyError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 사업자 연동 응답 정보
     * @description 사업자 연동 응답 정보
     */
    RegisterB2bMemberCompanyResponse: {
      /** 사업자 정보 */
      company: components['schemas']['B2bMemberCompany'];
      /** 담당자 정보 */
      contact: components['schemas']['B2bCompanyContact'];
    };
    /**
     * 에스크로 배송 정보 등록 입력 정보
     * @description 에스크로 배송 정보 등록 입력 정보
     */
    RegisterEscrowLogisticsBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /** 에스크로 발송자 정보 */
      sender?: components['schemas']['PaymentEscrowSenderInput'];
      /** 에스크로 수취인 정보 */
      receiver?: components['schemas']['PaymentEscrowReceiverInput'];
      /** 에스크로 물류 정보 */
      logistics: components['schemas']['PaymentLogistics'];
      /**
       * 이메일 알림 전송 여부
       * @description 에스크로 구매 확정 시 이메일로 알림을 보낼지 여부입니다.
       */
      sendEmail?: boolean;
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
    };
    /**
     * 영수증 내 하위 상점 거래 등록 정보
     * @description 영수증 내 하위 상점 거래 등록 정보
     */
    RegisterStoreReceiptBody: {
      /** 하위 상점 거래 목록 */
      items: components['schemas']['RegisterStoreReceiptBodyItem'][];
      /** 상점 아이디 */
      storeId?: string;
    };
    /**
     * 하위 상점 거래 정보
     * @description 하위 상점 거래 정보
     */
    RegisterStoreReceiptBodyItem: {
      /** 하위 상점 사업자등록번호 */
      storeBusinessRegistrationNumber: string;
      /** 하위 상점명 */
      storeName: string;
      /**
       * 결제 총 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFreeAmount?: number;
      /**
       * 부가세액
       * Format: int64
       */
      vatAmount?: number;
      /**
       * 공급가액
       * Format: int64
       */
      supplyAmount?: number;
      /** 통화 */
      currency: components['schemas']['Currency'];
    };
    RegisterStoreReceiptError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PaymentNotFoundError']
      | components['schemas']['PaymentNotPaidError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 영수증 내 하위 상점 거래 등록 응답
     * @description 영수증 내 하위 상점 거래 등록 응답
     */
    RegisterStoreReceiptResponse: {
      /** 결제 영수증 URL */
      receiptUrl?: string;
    };
    /**
     * 배송 정보 등록 완료
     * @description 배송 정보 등록 완료
     */
    RegisteredPaymentEscrow: {
      /** 에스크로 상태 */
      status: string;
      /** 택배사 */
      company: string;
      /** 송장번호 */
      invoiceNumber: string;
      /**
       * 발송 일시
       * Format: date-time
       */
      sentAt?: string;
      /**
       * 배송등록 처리 일자
       * Format: date-time
       */
      appliedAt?: string;
    };
    /**
     * 구매 거절 확정
     * @description 구매 거절 확정
     */
    RejectConfirmedPaymentEscrow: {
      /** 에스크로 상태 */
      status: string;
      /** 택배사 */
      company: string;
      /** 송장번호 */
      invoiceNumber: string;
      /**
       * 발송 일시
       * Format: date-time
       */
      sentAt?: string;
      /**
       * 배송등록 처리 일자
       * Format: date-time
       */
      appliedAt?: string;
    };
    /**
     * 파트너 상태를 승인 거절로 변경하기 위한 입력 정보
     * @description 파트너 상태를 승인 거절로 변경하기 위한 입력 정보
     */
    RejectPlatformPartnerBody: {
      /** 파트너 메모. 값이 명시되지 않은 경우 업데이트하지 않습니다. */
      memo?: string;
    };
    RejectPlatformPartnerError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformArchivedPartnerError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 거절 성공 응답
     * @description 파트너 거절 성공 응답
     */
    RejectPlatformPartnerResponse: {
      /** 거절된 파트너 */
      partner: components['schemas']['PlatformPartner'];
    };
    /**
     * 구매 거절
     * @description 구매 거절
     */
    RejectedPaymentEscrow: {
      /** 에스크로 상태 */
      status: string;
      /** 택배사 */
      company: string;
      /** 송장번호 */
      invoiceNumber: string;
      /**
       * 발송 일시
       * Format: date-time
       */
      sentAt?: string;
      /**
       * 배송등록 처리 일자
       * Format: date-time
       */
      appliedAt?: string;
    };
    /**
     * 세금계산서 임시 저장 정보
     * @description 세금계산서 임시 저장 정보
     */
    RequestB2bTaxInvoiceRegisterBody: {
      /** 세금계산서 생성 요청 정보 */
      taxInvoice: components['schemas']['B2bTaxInvoiceInput'];
    };
    RequestB2bTaxInvoiceRegisterError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bRecipientNotFoundError']
      | components['schemas']['B2bSupplierNotFoundError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 세금계산서 역발행 요청 정보
     * @description 세금계산서 역발행 요청 정보
     */
    RequestB2bTaxInvoiceRequestBody: {
      /** 사업자등록번호 */
      brn: string;
      /** 세금계산서 문서 번호 */
      documentKey: string;
      /**
       * 문서 번호 유형
       * @description 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.
       */
      documentKeyType?: components['schemas']['B2bTaxInvoiceDocumentKeyType'];
      /** 메모 */
      memo?: string;
    };
    RequestB2bTaxInvoiceReverseIssuanceError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bRecipientNotFoundError']
      | components['schemas']['B2bSupplierNotFoundError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 세금계산서 역발행 요청 정보
     * @description 세금계산서 역발행 요청 정보
     */
    RequestB2bTaxInvoiceReverseIssuanceRequestBody: {
      /** 세금계산서 생성 요청 정보 */
      taxInvoice: components['schemas']['B2bTaxInvoiceInput'];
      /** 메모 */
      memo?: string;
    };
    /**
     * 취소 요청 상태
     * @description 취소 요청 상태
     */
    RequestedPaymentCancellation: {
      /** 결제 취소 내역 상태 */
      status: string;
      /** 취소 내역 아이디 */
      id: string;
      /** PG사 결제 취소 내역 아이디 */
      pgCancellationId?: string;
      /**
       * 취소 총 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 취소 금액 중 면세 금액
       * Format: int64
       */
      taxFreeAmount: number;
      /**
       * 취소 금액 중 부가세액
       * Format: int64
       */
      vatAmount: number;
      /**
       * 적립형 포인트의 환불 금액
       * Format: int64
       */
      easyPayDiscountAmount?: number;
      /** 취소 사유 */
      reason: string;
      /**
       * 취소 시점
       * Format: date-time
       */
      cancelledAt?: string;
      /**
       * 취소 요청 시점
       * Format: date-time
       */
      requestedAt: string;
    };
    RescheduleAdditionalFeePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformAdditionalFeePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    RescheduleContractError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    RescheduleDiscountSharePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformDiscountSharePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    ReschedulePartnerError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 추가 수수료 정책 예약 업데이트 재설정을 위한 입력 정보
     * @description 추가 수수료 정책 예약 업데이트 재설정을 위한 입력 정보
     */
    ReschedulePlatformAdditionalFeePolicyBody: {
      /** 반영할 업데이트 내용 */
      update: components['schemas']['UpdatePlatformAdditionalFeePolicyBody'];
      /**
       * 업데이트 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    /**
     * 추가 수수료 정책 예약 업데이트 재설정 성공 응답
     * @description 추가 수수료 정책 예약 업데이트 재설정 성공 응답
     */
    ReschedulePlatformAdditionalFeePolicyResponse: {
      /** 예약된 추가 수수료 정책 */
      scheduledAdditionalFeePolicy: components['schemas']['PlatformAdditionalFeePolicy'];
    };
    /**
     * 계약 예약 업데이트 재설정을 위한 입력 정보
     * @description 계약 예약 업데이트 재설정을 위한 입력 정보
     */
    ReschedulePlatformContractBody: {
      /** 반영할 업데이트 내용 */
      update: components['schemas']['UpdatePlatformContractBody'];
      /**
       * 업데이트 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    /**
     * 계약 예약 업데이트 재설정 성공 응답
     * @description 계약 예약 업데이트 재설정 성공 응답
     */
    ReschedulePlatformContractResponse: {
      /** 예약된 계약 정보 */
      scheduledContract: components['schemas']['PlatformContract'];
    };
    /**
     * 할인 분담 정책 예약 업데이트 재설정을 위한 입력 정보
     * @description 할인 분담 정책 예약 업데이트 재설정을 위한 입력 정보
     */
    ReschedulePlatformDiscountSharePolicyBody: {
      /** 반영할 업데이트 내용 */
      update: components['schemas']['UpdatePlatformDiscountSharePolicyBody'];
      /**
       * 업데이트 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    /**
     * 할인 분담 정책 예약 업데이트 재설정 성공 응답
     * @description 할인 분담 정책 예약 업데이트 재설정 성공 응답
     */
    ReschedulePlatformDiscountSharePolicyResponse: {
      /** 예약된 할인 분담 정보 */
      scheduledDiscountSharePolicy: components['schemas']['PlatformDiscountSharePolicy'];
    };
    /**
     * 파트너 예약 업데이트 재설정을 위한 입력 정보
     * @description 파트너 예약 업데이트 재설정을 위한 입력 정보
     */
    ReschedulePlatformPartnerBody: {
      /** 반영할 업데이트 내용 */
      update: components['schemas']['UpdatePlatformPartnerBody'];
      /**
       * 업데이트 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    /**
     * 파트너 예약 업데이트 재설정 성공 응답
     * @description 파트너 예약 업데이트 재설정 성공 응답
     */
    ReschedulePlatformPartnerResponse: {
      /** 예약된 파트너 정보 */
      scheduledPartner: components['schemas']['PlatformPartner'];
    };
    ResendIdentityVerificationError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['IdentityVerificationAlreadyVerifiedError']
      | components['schemas']['IdentityVerificationNotFoundError']
      | components['schemas']['IdentityVerificationNotSentError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 본인인증 요청 재전송 성공 응답
     * @description 본인인증 요청 재전송 성공 응답
     */
    ResendIdentityVerificationResponse: Record<string, never>;
    /** @description 웹훅 재발송을 위한 입력 정보 */
    ResendWebhookBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /**
       * 웹훅 아이디
       * @description 입력하지 않으면 결제 건의 가장 최근 웹훅 아이디가 기본 적용됩니다
       */
      webhookId?: string;
    };
    ResendWebhookError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PaymentNotFoundError']
      | components['schemas']['UnauthorizedError']
      | components['schemas']['WebhookNotFoundError'];
    /**
     * 웹훅 재발송 응답 정보
     * @description 웹훅 재발송 응답 정보
     */
    ResendWebhookResponse: {
      /** 재발송 웹훅 정보 */
      webhook: components['schemas']['PaymentWebhook'];
    };
    /**
     * 결제 예약 건 취소 요청 입력 정보
     * @description 결제 예약 건 취소 요청 입력 정보
     * billingKey, scheduleIds 중 하나 이상은 필수로 입력합니다.
     * billingKey 만 입력된 경우 -&gt; 해당 빌링키로 예약된 모든 결제 예약 건들이 취소됩니다.
     * scheduleIds 만 입력된 경우 -&gt; 입력된 결제 예약 건 아이디에 해당하는 예약 건들이 취소됩니다.
     * billingKey, scheduleIds 모두 입력된 경우 -&gt; 입력된 결제 예약 건 아이디에 해당하는 예약 건들이 취소됩니다. 그리고 예약한 빌링키가 입력된 빌링키와 일치하는지 검증합니다.
     * 위 정책에 따라 선택된 결제 예약 건들 중 하나라도 취소에 실패할 경우, 모든 취소 요청이 실패합니다.
     */
    RevokePaymentScheduleBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /** 빌링키 */
      billingKey?: string;
      /** 결제 예약 건 아이디 목록 */
      scheduleIds?: string[];
    };
    RevokePaymentScheduleError:
      | components['schemas']['BillingKeyAlreadyDeletedError']
      | components['schemas']['BillingKeyNotFoundError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PaymentScheduleAlreadyProcessedError']
      | components['schemas']['PaymentScheduleAlreadyRevokedError']
      | components['schemas']['PaymentScheduleNotFoundError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 결제 예약 건 취소 성공 응답
     * @description 결제 예약 건 취소 성공 응답
     */
    RevokePaymentScheduleResponse: {
      /** 취소 완료된 결제 예약 건 아이디 목록 */
      revokedScheduleIds: string[];
      /**
       * 결제 예약 건 취소 완료 시점
       * Format: date-time
       */
      revokedAt?: string;
    };
    /**
     * 결제 예약 취소 상태
     * @description 결제 예약 취소 상태
     */
    RevokedPaymentSchedule: {
      /** 결제 예약 건 상태 */
      status: string;
      /** 결제 예약 건 아이디 */
      id: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제 건 아이디 */
      paymentId: string;
      /** 빌링키 */
      billingKey: string;
      /** 주문명 */
      orderName: string;
      /** 문화비 지출 여부 */
      isCulturalExpense: boolean;
      /** 에스크로 결제 여부 */
      isEscrow: boolean;
      /** 고객 정보 */
      customer: components['schemas']['Customer'];
      /** 사용자 지정 데이터 */
      customData: string;
      /**
       * 결제 총 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFreeAmount?: number;
      /** 통화 */
      currency: components['schemas']['Currency'];
      /**
       * 할부 개월 수
       * Format: int32
       */
      installmentMonth?: number;
      /** 웹훅 주소 */
      noticeUrls?: string[];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 결제 예정 시점
       * Format: date-time
       */
      timeToPay: string;
      /**
       * 결제 취소 시점
       * Format: date-time
       */
      revokedAt: string;
    };
    ScheduleAdditionalFeePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformAdditionalFeePolicyNotFoundError']
      | components['schemas']['PlatformAdditionalFeePolicyScheduleAlreadyExistsError']
      | components['schemas']['PlatformArchivedAdditionalFeePolicyError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    ScheduleContractError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformArchivedContractError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformContractScheduleAlreadyExistsError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    ScheduleDiscountSharePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformDiscountSharePolicyNotFoundError']
      | components['schemas']['PlatformDiscountSharePolicyScheduleAlreadyExistsError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    SchedulePartnerError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformArchivedPartnerError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['PlatformPartnerScheduleAlreadyExistsError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 추가 수수료 정책 업데이트 예약을 위한 입력 정보
     * @description 추가 수수료 정책 업데이트 예약을 위한 입력 정보
     */
    SchedulePlatformAdditionalFeePolicyBody: {
      /** 반영할 업데이트 내용 */
      update: components['schemas']['UpdatePlatformAdditionalFeePolicyBody'];
      /**
       * 업데이트 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    /**
     * 추가 수수료 정책 업데이트 예약 성공 응답
     * @description 추가 수수료 정책 업데이트 예약 성공 응답
     */
    SchedulePlatformAdditionalFeePolicyResponse: {
      /** 예약된 추가 수수료 정책 */
      scheduledAdditionalFeePolicy: components['schemas']['PlatformAdditionalFeePolicy'];
    };
    /**
     * 계약 업데이트 예약을 위한 입력 정보
     * @description 계약 업데이트 예약을 위한 입력 정보
     */
    SchedulePlatformContractBody: {
      /** 반영할 업데이트 내용 */
      update: components['schemas']['UpdatePlatformContractBody'];
      /**
       * 업데이트 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    /**
     * 계약 업데이트 예약 성공 응답
     * @description 계약 업데이트 예약 성공 응답
     */
    SchedulePlatformContractResponse: {
      /** 예약된 계약 정보 */
      scheduledContract: components['schemas']['PlatformContract'];
    };
    /**
     * 할인 분담 정책 업데이트 예약을 위한 입력 정보
     * @description 할인 분담 정책 업데이트 예약을 위한 입력 정보
     */
    SchedulePlatformDiscountSharePolicyBody: {
      /** 반영할 업데이트 내용 */
      update: components['schemas']['UpdatePlatformDiscountSharePolicyBody'];
      /**
       * 업데이트 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    /**
     * 할인 분담 정책 업데이트 예약 성공 응답
     * @description 할인 분담 정책 업데이트 예약 성공 응답
     */
    SchedulePlatformDiscountSharePolicyResponse: {
      /** 예약된 할인 분담 정보 */
      scheduledDiscountSharePolicy: components['schemas']['PlatformDiscountSharePolicy'];
    };
    /**
     * 파트너 업데이트 예약을 위한 입력 정보
     * @description 파트너 업데이트 예약을 위한 입력 정보
     */
    SchedulePlatformPartnerBody: {
      /** 반영할 업데이트 내용 */
      update: components['schemas']['UpdatePlatformPartnerBody'];
      /**
       * 업데이트 적용 시점
       * Format: date-time
       */
      appliedAt: string;
    };
    /**
     * 파트너 업데이트 예약 성공 응답
     * @description 파트너 업데이트 예약 성공 응답
     */
    SchedulePlatformPartnerResponse: {
      /** 예약된 파트너 정보 */
      scheduledPartner: components['schemas']['PlatformPartner'];
    };
    SchedulePlatformPartnersBody: {
      filter?: components['schemas']['PlatformPartnerFilterInput'];
      update: components['schemas']['SchedulePlatformPartnersBodyUpdate'];
      /** Format: date-time */
      appliedAt: string;
    };
    SchedulePlatformPartnersBodyUpdate: {
      name?: string;
      contact?: components['schemas']['SchedulePlatformPartnersBodyUpdateContact'];
      type?: components['schemas']['SchedulePlatformPartnersBodyUpdateType'];
      account?: components['schemas']['SchedulePlatformPartnersBodyUpdateAccount'];
      defaultContractId?: string;
      memo?: string;
      tags?: string[];
    };
    /**
     * 파트너 계좌 업데이트를 위한 입력 정보
     * @description 파트너 계좌 업데이트를 위한 입력 정보
     */
    SchedulePlatformPartnersBodyUpdateAccount: {
      /** 은행 */
      bank: components['schemas']['Bank'];
      /** 정산에 사용할 통화 */
      currency: components['schemas']['Currency'];
      /** 계좌번호 */
      number: string;
      /** 예금주명 */
      holder: string;
    };
    /**
     * 파트너 업데이트를 위한 유형별 추가 정보
     * @description 파트너 업데이트를 위한 유형별 추가 정보
     */
    SchedulePlatformPartnersBodyUpdateContact: {
      /** 담당자 이름 */
      name?: string;
      /** 담당자 휴대폰 번호 */
      phoneNumber?: string;
      /** 담당자 이메일 */
      email?: string;
    };
    /**
     * 파트너 유형별 정보 업데이트를 위한 입력 정보
     * @description 파트너 유형별 정보 업데이트를 위한 입력 정보
     * 파트너 유형별 추가 정보를 수정합니다.
     * 최초 생성된 유형 내에서 세부 정보만 수정할 수 있고 파트너의 유형 자체를 수정할 수는 없습니다.
     */
    SchedulePlatformPartnersBodyUpdateType: {
      /** 사업자 추가 정보 */
      business?: components['schemas']['SchedulePlatformPartnersBodyUpdateTypeBusiness'];
      /** 원천징수대상자 추가 정보 */
      whtPayer?: components['schemas']['SchedulePlatformPartnersBodyUpdateTypeWhtPayer'];
    };
    SchedulePlatformPartnersBodyUpdateTypeBusiness: {
      /** 상호명 */
      companyName?: string;
      /** 사업자등록번호 */
      businessRegistrationNumber?: string;
      /** 대표자 이름 */
      representativeName?: string;
      /** 사업장 주소 */
      companyAddress?: string;
      /** 업태 */
      businessType?: string;
      /** 업종 */
      businessClass?: string;
    };
    SchedulePlatformPartnersBodyUpdateTypeWhtPayer: {
      /** 생년월일 */
      birthdate?: string;
    };
    SchedulePlatformPartnersError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformArchivedPartnersCannotBeScheduledError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerSchedulesAlreadyExistError']
      | components['schemas']['UnauthorizedError'];
    SchedulePlatformPartnersResponse: Record<string, never>;
    /**
     * 결제 예약 완료 상태
     * @description 결제 예약 완료 상태
     */
    ScheduledPaymentSchedule: {
      /** 결제 예약 건 상태 */
      status: string;
      /** 결제 예약 건 아이디 */
      id: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제 건 아이디 */
      paymentId: string;
      /** 빌링키 */
      billingKey: string;
      /** 주문명 */
      orderName: string;
      /** 문화비 지출 여부 */
      isCulturalExpense: boolean;
      /** 에스크로 결제 여부 */
      isEscrow: boolean;
      /** 고객 정보 */
      customer: components['schemas']['Customer'];
      /** 사용자 지정 데이터 */
      customData: string;
      /**
       * 결제 총 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFreeAmount?: number;
      /** 통화 */
      currency: components['schemas']['Currency'];
      /**
       * 할부 개월 수
       * Format: int32
       */
      installmentMonth?: number;
      /** 웹훅 주소 */
      noticeUrls?: string[];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 결제 예정 시점
       * Format: date-time
       */
      timeToPay: string;
    };
    /**
     * (결제, 본인인증 등에) 선택된 채널 정보
     * @description (결제, 본인인증 등에) 선택된 채널 정보
     */
    SelectedChannel: {
      /** 채널 타입 */
      type: components['schemas']['SelectedChannelType'];
      /** 채널 아이디 */
      id?: string;
      /** 채널 키 */
      key?: string;
      /** 채널 명 */
      name?: string;
      /** PG사 */
      pgProvider: components['schemas']['PgProvider'];
      /** PG사 가맹점 식별 아이디 */
      pgMerchantId: string;
    };
    /**
     * 채널 타입
     * @description 채널 타입
     *
     * @enum {string}
     */
    SelectedChannelType: 'LIVE' | 'TEST';
    /**
     * 본인인증 요청을 위한 입력 정보
     * @description 본인인증 요청을 위한 입력 정보
     */
    SendIdentityVerificationBody: {
      /**
       * 상점 아이디
       * @description 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
       */
      storeId?: string;
      /** 채널 키 */
      channelKey: string;
      /** 고객 정보 */
      customer: components['schemas']['SendIdentityVerificationBodyCustomer'];
      /** 사용자 지정 데이터 */
      customData?: string;
      /** PG사별 추가 파라미터 ("PG사별 연동 가이드" 참고) */
      bypass?: Record<string, never>;
      /** 통신사 */
      operator: components['schemas']['IdentityVerificationOperator'];
      /** 본인인증 방식 */
      method: components['schemas']['IdentityVerificationMethod'];
    };
    /**
     * 본인인증 요청을 위한 고객 정보
     * @description 본인인증 요청을 위한 고객 정보
     */
    SendIdentityVerificationBodyCustomer: {
      /** 식별 아이디 */
      id?: string;
      /** 이름 */
      name: string;
      /**
       * 전화번호
       * @description 특수 문자(-) 없이 숫자만 입력합니다.
       */
      phoneNumber: string;
      /**
       * 주민등록번호 앞 7자리
       * @description SMS 방식의 경우 필수로 입력합니다.
       */
      identityNumber?: string;
    };
    SendIdentityVerificationError:
      | components['schemas']['ChannelNotFoundError']
      | components['schemas']['ForbiddenError']
      | components['schemas']['IdentityVerificationAlreadySentError']
      | components['schemas']['IdentityVerificationAlreadyVerifiedError']
      | components['schemas']['IdentityVerificationNotFoundError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PgProviderError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 본인인증 요청 전송 성공 응답
     * @description 본인인증 요청 전송 성공 응답
     */
    SendIdentityVerificationResponse: Record<string, never>;
    /**
     * 분리 형식 주소
     * @description 분리 형식 주소
     * 한 줄 형식 주소와 분리 형식 주소 모두 존재합니다.
     * 한 줄 형식 주소는 분리 형식 주소를 이어 붙인 형태로 생성됩니다.
     */
    SeparatedAddress: {
      type: string;
      /** 주소 (한 줄) */
      oneLine: string;
      /** 상세 주소 1 */
      addressLine1: string;
      /** 상세 주소 2 */
      addressLine2: string;
      /** 시/군/구 */
      city?: string;
      /** 주/도/시 */
      province?: string;
      /** 국가 */
      country?: components['schemas']['Country'];
    };
    /**
     * 분리 형식 주소 입력 정보
     * @description 분리 형식 주소 입력 정보
     */
    SeparatedAddressInput: {
      /** 상세 주소 1 */
      addressLine1: string;
      /** 상세 주소 2 */
      addressLine2: string;
      /** 시/군/구 */
      city?: string;
      /** 주/도/시 */
      province?: string;
      /** 국가 */
      country?: components['schemas']['Country'];
    };
    /**
     * 결제 시작 상태
     * @description 결제 시작 상태
     */
    StartedPaymentSchedule: {
      /** 결제 예약 건 상태 */
      status: string;
      /** 결제 예약 건 아이디 */
      id: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제 건 아이디 */
      paymentId: string;
      /** 빌링키 */
      billingKey: string;
      /** 주문명 */
      orderName: string;
      /** 문화비 지출 여부 */
      isCulturalExpense: boolean;
      /** 에스크로 결제 여부 */
      isEscrow: boolean;
      /** 고객 정보 */
      customer: components['schemas']['Customer'];
      /** 사용자 지정 데이터 */
      customData: string;
      /**
       * 결제 총 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFreeAmount?: number;
      /** 통화 */
      currency: components['schemas']['Currency'];
      /**
       * 할부 개월 수
       * Format: int32
       */
      installmentMonth?: number;
      /** 웹훅 주소 */
      noticeUrls?: string[];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 결제 예정 시점
       * Format: date-time
       */
      timeToPay: string;
      /**
       * 결제 시작 시점
       * Format: date-time
       */
      startedAt: string;
    };
    /**
     * 취소 완료 상태
     * @description 취소 완료 상태
     */
    SucceededPaymentCancellation: {
      /** 결제 취소 내역 상태 */
      status: string;
      /** 취소 내역 아이디 */
      id: string;
      /** PG사 결제 취소 내역 아이디 */
      pgCancellationId?: string;
      /**
       * 취소 총 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 취소 금액 중 면세 금액
       * Format: int64
       */
      taxFreeAmount: number;
      /**
       * 취소 금액 중 부가세액
       * Format: int64
       */
      vatAmount: number;
      /**
       * 적립형 포인트의 환불 금액
       * Format: int64
       */
      easyPayDiscountAmount?: number;
      /** 취소 사유 */
      reason: string;
      /**
       * 취소 시점
       * Format: date-time
       */
      cancelledAt?: string;
      /**
       * 취소 요청 시점
       * Format: date-time
       */
      requestedAt: string;
      /** 취소 영수증 URL */
      receiptUrl?: string;
    };
    /**
     * 결제 성공 상태
     * @description 결제 성공 상태
     */
    SucceededPaymentSchedule: {
      /** 결제 예약 건 상태 */
      status: string;
      /** 결제 예약건 아이디 */
      id: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제 건 아이디 */
      paymentId: string;
      /** 빌링키 */
      billingKey: string;
      /** 주문명 */
      orderName: string;
      /** 문화비 지출 여부 */
      isCulturalExpense: boolean;
      /** 에스크로 결제 여부 */
      isEscrow: boolean;
      /** 고객 정보 */
      customer: components['schemas']['Customer'];
      /** 사용자 지정 데이터 */
      customData: string;
      /**
       * 결제 총 금액
       * Format: int64
       */
      totalAmount: number;
      /**
       * 면세액
       * Format: int64
       */
      taxFreeAmount?: number;
      /** 통화 */
      currency: components['schemas']['Currency'];
      /**
       * 할부 개월 수
       * Format: int32
       */
      installmentMonth?: number;
      /** 웹훅 주소 */
      noticeUrls?: string[];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 결제 예정 시점
       * Format: date-time
       */
      timeToPay: string;
      /**
       * 결제 시작 시점
       * Format: date-time
       */
      startedAt: string;
      /**
       * 결제 완료 시점
       * Format: date-time
       */
      completedAt: string;
    };
    /**
     * 면세 금액 등 하위 항목들의 합이 전체 취소 금액을 초과한 경우
     * @description 면세 금액 등 하위 항목들의 합이 전체 취소 금액을 초과한 경우
     */
    SumOfPartsExceedsCancelAmountError: {
      type: string;
      message?: string;
    };
    /**
     * 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우
     * @description 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우
     */
    SumOfPartsExceedsTotalAmountError: {
      type: string;
      message?: string;
    };
    /**
     * 인증 정보가 올바르지 않은 경우
     * @description 인증 정보가 올바르지 않은 경우
     */
    UnauthorizedError: {
      type: string;
      message?: string;
    };
    UpdatePayoutAllPartnerSettlementsBody: {
      status: components['schemas']['PlatformPayoutPartnerSettlementStatus'];
    };
    UpdatePayoutAllPartnerSettlementsError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPayoutAlreadyCompletedError']
      | components['schemas']['PlatformPayoutCreatorMismatchedError']
      | components['schemas']['PlatformPayoutNotFoundError']
      | components['schemas']['UnauthorizedError'];
    UpdatePayoutAllPartnerSettlementsResponse: {
      payout: components['schemas']['PlatformPayout'];
    };
    /**
     * 추가 수수료 정책 업데이트를 위한 입력 정보
     * @description 추가 수수료 정책 업데이트를 위한 입력 정보
     * 값이 명시하지 않은 필드는 업데이트되지 않습니다.
     */
    UpdatePlatformAdditionalFeePolicyBody: {
      /** 책정 수수료 */
      fee?: components['schemas']['PlatformFeeInput'];
      /** 추가 수수료 정책 이름 */
      name?: string;
      /** 해당 추가 수수료 정책에 대한 메모 */
      memo?: string;
      /** 부가세를 부담할 주체 */
      vatPayer?: components['schemas']['PlatformPayer'];
    };
    UpdatePlatformAdditionalFeePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformAdditionalFeePolicyNotFoundError']
      | components['schemas']['PlatformArchivedAdditionalFeePolicyError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 추가 수수료 정책 업데이트 성공 응답
     * @description 추가 수수료 정책 업데이트 성공 응답
     */
    UpdatePlatformAdditionalFeePolicyResponse: {
      /** 업데이트된 추가 수수료 정책 */
      additionalFeePolicy: components['schemas']['PlatformAdditionalFeePolicy'];
    };
    /**
     * 플랫폼 업데이트를 위한 입력 정보
     * @description 플랫폼 업데이트를 위한 입력 정보
     * 값이 명시되지 않은 필드는 업데이트하지 않습니다.
     */
    UpdatePlatformBody: {
      /** 파트너 정산금액의 소수점 처리 방식 */
      roundType?: components['schemas']['PlatformRoundType'];
      /** 수수료 및 할인 분담 정책 관련 계산식 */
      settlementFormula?: components['schemas']['UpdatePlatformBodySettlementFormula'];
      /** 정산 규칙 */
      settlementRule?: components['schemas']['UpdatePlatformBodySettlementRule'];
    };
    /**
     * 플랫폼 업데이트 시 변경할 계산식 정보
     * @description 플랫폼 업데이트 시 변경할 계산식 정보
     * 값이 명시되지 않은 필드는 업데이트하지 않습니다.
     */
    UpdatePlatformBodySettlementFormula: {
      /** 플랫폼 수수료 계산식 */
      platformFee?: string;
      /** 할인 분담액 계산식 */
      discountShare?: string;
      /** 추가 수수료 계산식 */
      additionalFee?: string;
    };
    /**
     * 플랫폼 업데이트 시 변경할 정산 규칙 정보
     * @description 플랫폼 업데이트 시 변경할 정산 규칙 정보
     * 값이 명시되지 않은 필드는 업데이트하지 않습니다.
     */
    UpdatePlatformBodySettlementRule: {
      /** paymentId, storeId, partnerId가 같은 주문 정산건에 대한 중복 정산 지원 여부 */
      supportsMultipleOrderTransfersPerPartner?: boolean;
      /** 정산일이 정산시작일보다 작거나 같을 경우 공휴일 후 영업일로 정산일 다시 계산 여부 */
      adjustSettlementDateAfterHolidayIfEarlier?: boolean;
    };
    /**
     * 계약 업데이트를 위한 입력 정보. 값이 명시되지 않은 필드는 업데이트되지 않습니다.
     * @description 계약 업데이트를 위한 입력 정보. 값이 명시되지 않은 필드는 업데이트되지 않습니다.
     * 값이 명시되지 않은 필드는 업데이트되지 않습니다.
     */
    UpdatePlatformContractBody: {
      /** 계약 이름 */
      name?: string;
      /** 계약 내부 표기를 위한 메모 */
      memo?: string;
      /** 중개수수료 */
      platformFee?: components['schemas']['PlatformFeeInput'];
      /** 정산 주기 */
      settlementCycle?: components['schemas']['PlatformSettlementCycleInput'];
      /** 중개수수료에 대한 부가세 부담 주체 */
      platformFeeVatPayer?: components['schemas']['PlatformPayer'];
      /** 정산 시 결제금액 부가세 감액 여부 */
      subtractPaymentVatAmount?: boolean;
    };
    UpdatePlatformContractError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformArchivedContractError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 계약 객체 업데이트 성공 응답
     * @description 계약 객체 업데이트 성공 응답
     */
    UpdatePlatformContractResponse: {
      /** 업데이트된 계약 객체 */
      contract: components['schemas']['PlatformContract'];
    };
    /**
     * 할인 분담 정책 업데이트를 위한 입력 정보
     * @description 할인 분담 정책 업데이트를 위한 입력 정보
     * 값이 명시되지 않은 필드는 업데이트하지 않습니다.
     */
    UpdatePlatformDiscountSharePolicyBody: {
      /** 할인 분담 정책 이름 */
      name?: string;
      /**
       * 할인 분담율
       * Format: int32
       * @description 파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 <code>할인금액 * partnerShareRate * 10^5</code> 로 책정합니다.
       */
      partnerShareRate?: number;
      /** 해당 할인 분담에 대한 메모 */
      memo?: string;
    };
    UpdatePlatformDiscountSharePolicyError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformArchivedDiscountSharePolicyError']
      | components['schemas']['PlatformDiscountSharePolicyNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 할인 분담 정책 업데이트 성공 응답
     * @description 할인 분담 정책 업데이트 성공 응답
     */
    UpdatePlatformDiscountSharePolicyResponse: {
      /** 업데이트된 할인 분담 정책 */
      discountSharePolicy: components['schemas']['PlatformDiscountSharePolicy'];
    };
    UpdatePlatformError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformInvalidSettlementFormulaError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 업데이트를 위한 입력 정보
     * @description 파트너 업데이트를 위한 입력 정보
     * 값이 명시되지 않은 필드는 업데이트되지 않습니다.
     */
    UpdatePlatformPartnerBody: {
      /** 파트너 법인명 혹은 이름 */
      name?: string;
      /** 파트너 담당자 연락 정보 */
      contact?: components['schemas']['UpdatePlatformPartnerBodyContact'];
      /** 정산 계좌 */
      account?: components['schemas']['UpdatePlatformPartnerBodyAccount'];
      /** 파트너에 설정된 기본 계약 아이디 */
      defaultContractId?: string;
      /** 파트너에 대한 메모 */
      memo?: string;
      /** 파트너의 태그 리스트 */
      tags?: string[];
      /** 파트너 유형별 정보 */
      type?: components['schemas']['UpdatePlatformPartnerBodyType'];
    };
    /**
     * 파트너 계좌 업데이트를 위한 입력 정보
     * @description 파트너 계좌 업데이트를 위한 입력 정보
     */
    UpdatePlatformPartnerBodyAccount: {
      /** 은행 */
      bank: components['schemas']['Bank'];
      /** 정산에 사용할 통화 */
      currency: components['schemas']['Currency'];
      /** 계좌번호 */
      number: string;
      /** 예금주명 */
      holder: string;
    };
    /**
     * 파트너 담당자 업데이트를 위한 정보
     * @description 파트너 담당자 업데이트를 위한 정보
     */
    UpdatePlatformPartnerBodyContact: {
      /** 담당자 이름 */
      name?: string;
      /** 담당자 휴대폰 번호 */
      phoneNumber?: string;
      /** 담당자 이메일 */
      email?: string;
    };
    /**
     * 파트너 업데이트를 위한 유형별 추가 정보
     * @description 파트너 업데이트를 위한 유형별 추가 정보
     * 파트너 유형별 추가 정보를 수정합니다.
     * 기존과 다른 파트너 유형 정보가 입력된 경우, 파트너의 유형 자체가 변경됩니다.
     */
    UpdatePlatformPartnerBodyType: {
      /** 사업자 추가 정보 */
      business?: components['schemas']['UpdatePlatformPartnerBodyTypeBusiness'];
      /** 원천징수대상자 추가 정보 */
      whtPayer?: components['schemas']['UpdatePlatformPartnerBodyTypeWhtPayer'];
    };
    UpdatePlatformPartnerBodyTypeBusiness: {
      /** 상호명 */
      companyName?: string;
      /** 사업자등록번호 */
      businessRegistrationNumber?: string;
      /** 대표자 이름 */
      representativeName?: string;
      /** 사업장 주소 */
      companyAddress?: string;
      /** 업태 */
      businessType?: string;
      /** 업종 */
      businessClass?: string;
    };
    UpdatePlatformPartnerBodyTypeWhtPayer: {
      /** 생년월일 */
      birthdate?: string;
    };
    UpdatePlatformPartnerError:
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformArchivedPartnerError']
      | components['schemas']['PlatformContractNotFoundError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPartnerNotFoundError']
      | components['schemas']['UnauthorizedError'];
    /**
     * 파트너 업데이트 성공 응답
     * @description 파트너 업데이트 성공 응답
     */
    UpdatePlatformPartnerResponse: {
      /** 업데이트된 파트너 */
      partner: components['schemas']['PlatformPartner'];
    };
    UpdatePlatformPayoutPartnerSettlementBody: {
      status: components['schemas']['PlatformPayoutPartnerSettlementStatus'];
    };
    UpdatePlatformPayoutPartnerSettlementError:
      | components['schemas']['ForbiddenError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['PlatformNotEnabledError']
      | components['schemas']['PlatformPayoutCreatorMismatchedError']
      | components['schemas']['PlatformPayoutNotFoundError']
      | components['schemas']['PlatformPayoutPartnerSettlementAlreadyPaidOutError']
      | components['schemas']['PlatformPayoutPartnerSettlementNotFoundError']
      | components['schemas']['UnauthorizedError'];
    UpdatePlatformPayoutPartnerSettlementResponse: {
      payoutPartnerSettlement: components['schemas']['PlatformPayoutPartnerSettlement'];
      payout: components['schemas']['PlatformPayout'];
    };
    /**
     * 플랫폼 업데이트 결과 정보
     * @description 플랫폼 업데이트 결과 정보
     */
    UpdatePlatformResponse: {
      /** 업데이트된 플랫폼 정보 */
      platform: components['schemas']['Platform'];
    };
    /**
     * 완료된 본인인증 내역
     * @description 완료된 본인인증 내역
     */
    VerifiedIdentityVerification: {
      /** 본인인증 상태 */
      status: string;
      /** 본인인증 내역 아이디 */
      id: string;
      /** 사용된 본인인증 채널 */
      channel?: components['schemas']['SelectedChannel'];
      /** 인증된 고객 정보 */
      verifiedCustomer: components['schemas']['IdentityVerificationVerifiedCustomer'];
      /** 사용자 지정 데이터 */
      customData?: string;
      /**
       * 본인인증 요청 시점
       * Format: date-time
       */
      requestedAt: string;
      /**
       * 업데이트 시점
       * Format: date-time
       */
      updatedAt: string;
      /**
       * 상태 업데이트 시점
       * Format: date-time
       */
      statusChangedAt: string;
      /**
       * 본인인증 완료 시점
       * Format: date-time
       */
      verifiedAt: string;
      /** 본인인증 내역 PG사 아이디 */
      pgTxId: string;
      /** PG사 응답 데이터 */
      pgRawResponse: string;
    };
    /**
     * 가상계좌 발급 완료 상태 건
     * @description 가상계좌 발급 완료 상태 건
     */
    VirtualAccountIssuedPayment: {
      /** 결제 건 상태 */
      status: string;
      /** 결제 건 아이디 */
      id: string;
      /**
       * 결제 건 포트원 채번 아이디
       * @description V1 결제 건의 경우 imp_uid에 해당합니다.
       */
      transactionId: string;
      /** 가맹점 아이디 */
      merchantId: string;
      /** 상점 아이디 */
      storeId: string;
      /** 결제수단 정보 */
      method?: components['schemas']['PaymentMethod'];
      /** 결제 채널 */
      channel: components['schemas']['SelectedChannel'];
      /** 포트원 버전 */
      version: components['schemas']['PortOneVersion'];
      /**
       * 결제 예약 건 아이디
       * @description 결제 예약을 이용한 경우에만 존재
       */
      scheduleId?: string;
      /**
       * 결제 시 사용된 빌링키
       * @description 빌링키 결제인 경우에만 존재
       */
      billingKey?: string;
      /** 웹훅 발송 내역 */
      webhooks?: components['schemas']['PaymentWebhook'][];
      /**
       * 결제 요청 시점
       * Format: date-time
       */
      requestedAt: string;
      /**
       * 업데이트 시점
       * Format: date-time
       */
      updatedAt: string;
      /**
       * 상태 업데이트 시점
       * Format: date-time
       */
      statusChangedAt: string;
      /** 주문명 */
      orderName: string;
      /** 결제 금액 관련 세부 정보 */
      amount: components['schemas']['PaymentAmount'];
      /** 통화 */
      currency: components['schemas']['Currency'];
      /** 구매자 정보 */
      customer: components['schemas']['Customer'];
      /** 프로모션 아이디 */
      promotionId?: string;
      /** 문화비 지출 여부 */
      isCulturalExpense?: boolean;
      /**
       * 에스크로 결제 정보
       * @description 에스크로 결제인 경우 존재합니다.
       */
      escrow?: components['schemas']['PaymentEscrow'];
      /** 상품 정보 */
      products?: components['schemas']['PaymentProduct'][];
      /**
       * 상품 갯수
       * Format: int32
       */
      productCount?: number;
      /** 사용자 지정 데이터 */
      customData?: string;
      /** 국가 코드 */
      country?: components['schemas']['Country'];
    };
    /**
     * 웹훅 내역이 존재하지 않는 경우
     * @description 웹훅 내역이 존재하지 않는 경우
     */
    WebhookNotFoundError: {
      type: string;
      message?: string;
    };
    getB2bContactIdExistenceError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
    requestB2bTaxInvoiceError:
      | components['schemas']['B2bExternalServiceError']
      | components['schemas']['B2bNotEnabledError']
      | components['schemas']['B2bTaxInvoiceNoRecipientDocumentKeyError']
      | components['schemas']['B2bTaxInvoiceNotFoundError']
      | components['schemas']['B2bTaxInvoiceNotRegisteredStatusError']
      | components['schemas']['InvalidRequestError']
      | components['schemas']['UnauthorizedError'];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * API secret 를 사용한 토큰 발급
   *
   * @description API secret 를 사용한 토큰 발급
   * API secret 를 통해 API 인증에 사용할 토큰을 가져옵니다.
   */
  loginViaApiSecret: {
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginViaApiSecretBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 토큰을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['LoginViaApiSecretResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['LoginViaApiSecretError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['LoginViaApiSecretError'];
        };
      };
    };
  };
  /**
   * 토큰 갱신
   *
   * @description 토큰 갱신
   * 리프레시 토큰을 사용해 유효기간이 연장된 새로운 토큰을 재발급합니다.
   */
  refreshToken: {
    requestBody: {
      content: {
        'application/json': components['schemas']['RefreshTokenBody'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RefreshTokenResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['RefreshTokenError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['RefreshTokenError'];
        };
      };
    };
  };
  /**
   * @description 가맹점의 플랫폼 정보를 조회합니다.
   * 요청된 Authorization header 를 통해 자동으로 요청자의 가맹점을 특정합니다.
   */
  getPlatform: {
    responses: {
      /** @description 성공 응답으로 플랫폼 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['Platform'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformError'];
        };
      };
    };
  };
  /**
   * @description 가맹점의 플랫폼 관련 정보를 업데이트합니다.
   * 요청된 Authorization header 를 통해 자동으로 요청자의 가맹점을 특정합니다.
   */
  updatePlatform: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePlatformBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['UpdatePlatformResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformInvalidSettlementFormulaError</code></li>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['UpdatePlatformError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['UpdatePlatformError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['UpdatePlatformError'];
        };
      };
    };
  };
  /** @description 할인 분담 정책 다건 조회 시 필요한 필터 옵션을 조회합니다. */
  getPlatformDiscountSharePolicyFilterOptions: {
    parameters: {
      query?: {
        /**
         * @description 보관 조회 여부
         * true 이면 보관된 할인 분담의 필터 옵션을 조회하고, false 이면 보관되지 않은 할인 분담의 필터 옵션을 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.
         */
        isArchived?: boolean;
      };
    };
    responses: {
      /** @description 성공 응답으로 조회된 할인 분담 정책 필터 옵션을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['PlatformDiscountSharePolicyFilterOptions'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePolicyFilterOptionsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePolicyFilterOptionsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePolicyFilterOptionsError'];
        };
      };
    };
  };
  /** @description 여러 할인 분담을 조회합니다. */
  getPlatformDiscountSharePolicies: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetPlatformDiscountSharePoliciesBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 조회된 파트너 리스트와 페이지 정보가 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePoliciesResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePoliciesError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePoliciesError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePoliciesError'];
        };
      };
    };
  };
  /** @description 새로운 할인 분담을 생성합니다. */
  createPlatformDiscountSharePolicy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePlatformDiscountSharePolicyBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 생성된 할인 분담 정책이 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['CreatePlatformDiscountSharePolicyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CreatePlatformDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CreatePlatformDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CreatePlatformDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformDiscountSharePolicyAlreadyExistsError</code></li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['CreatePlatformDiscountSharePolicyError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 할인 분담을 조회합니다. */
  getPlatformDiscountSharePolicy: {
    parameters: {
      path: {
        /** @description 조회할 할인 분담 정책 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 할인 분담 정책을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['PlatformDiscountSharePolicy'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePolicyError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 할인 분담을 업데이트합니다. */
  updatePlatformDiscountSharePolicy: {
    parameters: {
      path: {
        /** @description 업데이트할 할인 분담 정책 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePlatformDiscountSharePolicyBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 업데이트된 할인 분담 정책을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['UpdatePlatformDiscountSharePolicyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['UpdatePlatformDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['UpdatePlatformDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['UpdatePlatformDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['UpdatePlatformDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformArchivedDiscountSharePolicyError</code>: 보관된 할인 분담 정책을 업데이트하려고 하는 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['UpdatePlatformDiscountSharePolicyError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 할인 분담의 예약 업데이트를 조회합니다. */
  getPlatformDiscountSharePolicySchedule: {
    parameters: {
      path: {
        /** @description 할인 분담 정책 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 할인 분담 정책을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['PlatformDiscountSharePolicy'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetPlatformDiscountSharePolicyScheduleError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 할인 분담에 예약 업데이트를 재설정합니다. */
  rescheduleDiscountSharePolicy: {
    parameters: {
      path: {
        /** @description 할인 분담 정책 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReschedulePlatformDiscountSharePolicyBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 할인 분담 정책을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['ReschedulePlatformDiscountSharePolicyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['RescheduleDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['RescheduleDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['RescheduleDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['RescheduleDiscountSharePolicyError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 할인 분담에 업데이트를 예약합니다. */
  scheduleDiscountSharePolicy: {
    parameters: {
      path: {
        /** @description 할인 분담 정책 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchedulePlatformDiscountSharePolicyBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 할인 분담 정책이 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['SchedulePlatformDiscountSharePolicyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ScheduleDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['ScheduleDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['ScheduleDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['ScheduleDiscountSharePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformDiscountSharePolicyScheduleAlreadyExistsError</code></li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['ScheduleDiscountSharePolicyError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 할인 분담의 예약 업데이트를 취소합니다. */
  cancelPlatformDiscountSharePolicySchedule: {
    parameters: {
      path: {
        /** @description 할인 분담 정책 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['CancelPlatformDiscountSharePolicyScheduleResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CancelPlatformDiscountSharePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CancelPlatformDiscountSharePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CancelPlatformDiscountSharePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CancelPlatformDiscountSharePolicyScheduleError'];
        };
      };
    };
  };
  /** @description 여러 추가 수수료 정책을 조회합니다. */
  getPlatformAdditionalFeePolicies: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetPlatformAdditionalFeePoliciesBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 조회된 추가 수수료 정책 리스트와 페이지 정보를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePoliciesResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePoliciesError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePoliciesError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePoliciesError'];
        };
      };
    };
  };
  /** @description 새로운 추가 수수료 정책을 생성합니다. */
  createPlatformAdditionalFeePolicy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePlatformAdditionalFeePolicyBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['CreatePlatformAdditionalFeePolicyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CreatePlatformAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CreatePlatformAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CreatePlatformAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformAdditionalFeePolicyAlreadyExistsError</code></li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['CreatePlatformAdditionalFeePolicyError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 추가 수수료 정책을 조회합니다. */
  getPlatformAdditionalFeePolicy: {
    parameters: {
      path: {
        /** @description 조회할 추가 수수료 정책 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 추가 수수료 정책을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['PlatformAdditionalFeePolicy'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePolicyError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 추가 수수료 정책을 업데이트합니다. */
  updatePlatformAdditionalFeePolicy: {
    parameters: {
      path: {
        /** @description 업데이트할 추가 수수료 정책 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePlatformAdditionalFeePolicyBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 업데이트된 추가 수수료 정책이 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['UpdatePlatformAdditionalFeePolicyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['UpdatePlatformAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['UpdatePlatformAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['UpdatePlatformAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['UpdatePlatformAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformArchivedAdditionalFeePolicyError</code>: 보관된 추가 수수료 정책을 업데이트하려고 하는 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['UpdatePlatformAdditionalFeePolicyError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 추가 수수료 정책의 예약 업데이트를 조회합니다. */
  getPlatformAdditionalFeePolicySchedule: {
    parameters: {
      path: {
        /** @description 추가 수수료 정책 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 추가 수수료 정책을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['PlatformAdditionalFeePolicy'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetPlatformAdditionalFeePolicyScheduleError'];
        };
      };
    };
  };
  rescheduleAdditionalFeePolicy: {
    parameters: {
      path: {
        /** @description 추가 수수료 정책 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReschedulePlatformAdditionalFeePolicyBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 추가 수수료 정책이 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['ReschedulePlatformAdditionalFeePolicyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['RescheduleAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['RescheduleAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['RescheduleAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['RescheduleAdditionalFeePolicyError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 추가 수수료 정책에 업데이트를 예약합니다. */
  scheduleAdditionalFeePolicy: {
    parameters: {
      path: {
        /** @description 추가 수수료 정책 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchedulePlatformAdditionalFeePolicyBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 추가 수수료 정책을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['SchedulePlatformAdditionalFeePolicyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ScheduleAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['ScheduleAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['ScheduleAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['ScheduleAdditionalFeePolicyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformAdditionalFeePolicyScheduleAlreadyExistsError</code></li>
       * <li><code>PlatformArchivedAdditionalFeePolicyError</code>: 보관된 추가 수수료 정책을 업데이트하려고 하는 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['ScheduleAdditionalFeePolicyError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 추가 수수료 정책의 예약 업데이트를 취소합니다. */
  cancelPlatformAdditionalFeePolicySchedule: {
    parameters: {
      path: {
        /** @description 추가 수수료 정책 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['CancelPlatformAdditionalFeePolicyScheduleResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CancelPlatformAdditionalFeePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CancelPlatformAdditionalFeePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CancelPlatformAdditionalFeePolicyScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CancelPlatformAdditionalFeePolicyScheduleError'];
        };
      };
    };
  };
  /** @description 파트너 다건 조회 시 필요한 필터 옵션을 조회합니다. */
  getPlatformPartnerFilterOptions: {
    parameters: {
      query?: {
        /**
         * @description 보관 조회 여부
         * true 이면 보관된 파트너의 필터 옵션을 조회하고, false 이면 보관되지 않은 파트너의 필터 옵션을 조회합니다. 아무 값도 넘기지 않을 경우 기본값은 false 입니다.
         */
        isArchived?: boolean;
      };
    };
    responses: {
      /** @description 성공 응답으로 조회된 파트너 필터 옵션을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['PlatformPartnerFilterOptions'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnerFilterOptionsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnerFilterOptionsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnerFilterOptionsError'];
        };
      };
    };
  };
  /** @description 여러 파트너를 조회합니다. */
  getPlatformPartners: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetPlatformPartnersBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 조회된 파트너 리스트와 페이지 정보가 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnersResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnersError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnersError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnersError'];
        };
      };
    };
  };
  /** @description 새로운 파트너를 생성합니다. */
  createPlatformPartner: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePlatformPartnerBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 생성된 파트너 객체가 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnerResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformContractNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerIdAlreadyExistsError</code></li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnerError'];
        };
      };
    };
  };
  /** @description 파트너 객체를 조회합니다. */
  getPlatformPartner: {
    parameters: {
      path: {
        /** @description 조회하고 싶은 파트너 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 파트너 객체가 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['PlatformPartner'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnerError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 파트너 정보를 업데이트합니다. */
  updatePlatformPartner: {
    parameters: {
      path: {
        /** @description 업데이트할 파트너 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePlatformPartnerBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 업데이트된 파트너 객체가 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['UpdatePlatformPartnerResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['UpdatePlatformPartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['UpdatePlatformPartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['UpdatePlatformPartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerNotFoundError</code></li>
       * <li><code>PlatformContractNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['UpdatePlatformPartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformArchivedPartnerError</code>: 보관된 파트너를 업데이트하려고 하는 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['UpdatePlatformPartnerError'];
        };
      };
    };
  };
  /** @description 새로운 파트너를 다건 생성합니다. */
  createPlatformPartners: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePlatformPartnersBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnersResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * <li><code>PlatformPartnerIdsDuplicatedError</code></li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnersError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnersError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnersError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformContractsNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnersError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerIdsAlreadyExistError</code></li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['CreatePlatformPartnersError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 파트너의 예약 업데이트를 조회합니다. */
  getPlatformPartnerSchedule: {
    parameters: {
      path: {
        /** @description 파트너 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 파트너 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['PlatformPartner'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnerScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnerScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnerScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetPlatformPartnerScheduleError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 파트너에 예약 업데이트를 재설정합니다. */
  reschedulePartner: {
    parameters: {
      path: {
        /** @description 파트너 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReschedulePlatformPartnerBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 파트너 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['ReschedulePlatformPartnerResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ReschedulePartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['ReschedulePartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['ReschedulePartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerNotFoundError</code></li>
       * <li><code>PlatformContractNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['ReschedulePartnerError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 파트너에 업데이트를 예약합니다. */
  schedulePartner: {
    parameters: {
      path: {
        /** @description 파트너 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchedulePlatformPartnerBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 파트너 객체가 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['SchedulePlatformPartnerResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['SchedulePartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['SchedulePartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['SchedulePartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerNotFoundError</code></li>
       * <li><code>PlatformContractNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['SchedulePartnerError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerScheduleAlreadyExistsError</code></li>
       * <li><code>PlatformArchivedPartnerError</code>: 보관된 파트너를 업데이트하려고 하는 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['SchedulePartnerError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 파트너의 예약 업데이트를 취소합니다. */
  cancelPlatformPartnerSchedule: {
    parameters: {
      path: {
        /** @description 파트너 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['CancelPlatformPartnerScheduleResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CancelPlatformPartnerScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CancelPlatformPartnerScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CancelPlatformPartnerScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CancelPlatformPartnerScheduleError'];
        };
      };
    };
  };
  schedulePlatformPartners: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SchedulePlatformPartnersBody'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchedulePlatformPartnersResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['SchedulePlatformPartnersError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['SchedulePlatformPartnersError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['SchedulePlatformPartnersError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformContractNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['SchedulePlatformPartnersError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerSchedulesAlreadyExistError</code></li>
       * <li><code>PlatformArchivedPartnersCannotBeScheduledError</code>: 보관된 파트너들을 예약 업데이트하려고 하는 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['SchedulePlatformPartnersError'];
        };
      };
    };
  };
  /** @description 여러 계약을 조회합니다. */
  getPlatformContracts: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetPlatformContractsBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 조회된 계약 리스트와 페이지 정보를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['GetPlatformContractsResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformContractsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformContractsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformContractsError'];
        };
      };
    };
  };
  /** @description 새로운 계약을 생성합니다. */
  createPlatformContract: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePlatformContractBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 생성된 계약 객체가 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['CreatePlatformContractResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CreatePlatformContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CreatePlatformContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CreatePlatformContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformContractAlreadyExistsError</code></li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['CreatePlatformContractError'];
        };
      };
    };
  };
  getPlatformContract: {
    parameters: {
      path: {
        /** @description 조회할 계약 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 계약 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['PlatformContract'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformContractNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetPlatformContractError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 계약을 업데이트합니다. */
  updatePlatformContract: {
    parameters: {
      path: {
        /** @description 업데이트할 계약 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePlatformContractBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 업데이트된 계약 객체가 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['UpdatePlatformContractResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['UpdatePlatformContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['UpdatePlatformContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['UpdatePlatformContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformContractNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['UpdatePlatformContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformArchivedContractError</code>: 보관된 계약을 업데이트하려고 하는 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['UpdatePlatformContractError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 계약의 예약 업데이트를 조회합니다. */
  getPlatformContractSchedule: {
    parameters: {
      path: {
        /** @description 계약 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 계약 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['PlatformContract'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformContractScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformContractScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformContractScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformContractNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetPlatformContractScheduleError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 계약에 예약 업데이트를 재설정합니다. */
  rescheduleContract: {
    parameters: {
      path: {
        /** @description 계약 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReschedulePlatformContractBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 계약 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['ReschedulePlatformContractResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['RescheduleContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['RescheduleContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['RescheduleContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformContractNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['RescheduleContractError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 계약에 업데이트를 예약합니다. */
  scheduleContract: {
    parameters: {
      path: {
        /** @description 계약 아이디 */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchedulePlatformContractBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 예약된 계약 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['SchedulePlatformContractResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ScheduleContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['ScheduleContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['ScheduleContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformContractNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['ScheduleContractError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformContractScheduleAlreadyExistsError</code></li>
       * <li><code>PlatformArchivedContractError</code>: 보관된 계약을 업데이트하려고 하는 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['ScheduleContractError'];
        };
      };
    };
  };
  /** @description 주어진 아이디에 대응되는 계약의 예약 업데이트를 취소합니다. */
  cancelPlatformContractSchedule: {
    parameters: {
      path: {
        /** @description 계약 아이디 */
        id: string;
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['CancelPlatformContractScheduleResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CancelPlatformContractScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CancelPlatformContractScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CancelPlatformContractScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformContractNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CancelPlatformContractScheduleError'];
        };
      };
    };
  };
  getPlatformTransfer: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PlatformTransfer'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformTransferNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetPlatformTransferError'];
        };
      };
    };
  };
  deletePlatformTransfer: {
    parameters: {
      path: {
        /** @description 정산건 아이디 */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['DeletePlatformTransferResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformCancelOrderTransfersExistsError</code></li>
       * <li><code>PlatformTransferNonDeletableStatusError</code></li>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['DeletePlatformTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['DeletePlatformTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['DeletePlatformTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformTransferNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['DeletePlatformTransferError'];
        };
      };
    };
  };
  createPlatformOrderTransfer: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePlatformOrderTransferBody'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CreateOrderTransferResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * <li><code>PlatformDiscountExceededOrderAmountError</code></li>
       * <li><code>PlatformProductIdDuplicatedError</code></li>
       * <li><code>PlatformSettlementPaymentAmountExceededPortOnePaymentError</code></li>
       * <li><code>PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError</code></li>
       * <li><code>PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError</code></li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CreatePlatformOrderTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CreatePlatformOrderTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CreatePlatformOrderTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerNotFoundError</code></li>
       * <li><code>PlatformContractNotFoundError</code></li>
       * <li><code>PlatformAdditionalFeePoliciesNotFoundError</code></li>
       * <li><code>PlatformDiscountSharePoliciesNotFoundError</code></li>
       * <li><code>PlatformPaymentNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CreatePlatformOrderTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformTransferAlreadyExistsError</code></li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['CreatePlatformOrderTransferError'];
        };
      };
    };
  };
  createPlatformOrderCancelTransfer: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePlatformOrderCancelTransferBody'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CreateOrderCancelTransferResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * <li><code>PlatformOrderDetailMismatchedError</code></li>
       * <li><code>PlatformDiscountSharePolicyIdDuplicatedError</code></li>
       * <li><code>PlatformCancellableAmountExceededError</code></li>
       * <li><code>PlatformCancellableDiscountAmountExceededError</code></li>
       * <li><code>PlatformProductIdDuplicatedError</code></li>
       * <li><code>PlatformCancellableProductQuantityExceededError</code></li>
       * <li><code>PlatformOrderTransferAlreadyCancelledError</code></li>
       * <li><code>PlatformDiscountCancelExceededOrderCancelAmountError</code></li>
       * <li><code>PlatformCancellationAndPaymentTypeMismatchedError</code></li>
       * <li><code>PlatformSettlementCancelAmountExceededPortOneCancelError</code></li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CreatePlatformOrderCancelTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CreatePlatformOrderCancelTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CreatePlatformOrderCancelTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformTransferNotFoundError</code></li>
       * <li><code>PlatformCancellationNotFoundError</code></li>
       * <li><code>PlatformPaymentNotFoundError</code></li>
       * <li><code>PlatformProductIdNotFoundError</code></li>
       * <li><code>PlatformTransferDiscountSharePolicyNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CreatePlatformOrderCancelTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformTransferAlreadyExistsError</code></li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['CreatePlatformOrderCancelTransferError'];
        };
      };
    };
  };
  createPlatformManualTransfer: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePlatformManualTransferBody'];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CreateManualTransferResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * <li><code>PlatformUnavailableSettlementDateError</code>: 사용할 수 없는 정산일이 요청된 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CreatePlatformManualTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CreatePlatformManualTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CreatePlatformManualTransferError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformPartnerNotFoundError</code></li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CreatePlatformManualTransferError'];
        };
      };
    };
  };
  /**
   * 예금주 조회
   *
   * @description 예금주 조회
   * 계좌의 예금주를 조회합니다.
   */
  getPlatformAccountHolder: {
    parameters: {
      query?: {
        /**
         * @description 생년월일
         * 실명 조회를 위해 추가로 보낼 수 있습니다. birthDate과 businessRegistrationNumber 중 하나만 사용해야 합니다.
         */
        birthDate?: string;
        /**
         * @description 사업자등록번호
         * 실명 조회를 위해 추가로 보낼 수 있습니다. birthDate과 businessRegistrationNumber 중 하나만 사용해야 합니다.
         */
        businessRegistrationNumber?: string;
      };
      path: {
        /** @description 은행 */
        bank: components['schemas']['Bank'];
        /** @description '-'를 제외한 계좌 번호 */
        accountNumber: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 조회된 예금주 명이 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['PlatformAccountHolder'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPlatformAccountHolderError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPlatformAccountHolderError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPlatformAccountHolderError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PlatformExternalApiTemporarilyFailedError</code>: 외부 api의 일시적인 오류</li>
       * <li><code>PlatformExternalApiFailedError</code>: 외부 api 오류</li>
       * </ul>
       */
      503: {
        content: {
          'application/json': components['schemas']['GetPlatformAccountHolderError'];
        };
      };
    };
  };
  /**
   * 본인인증 단건 조회
   *
   * @description 본인인증 단건 조회
   * 주어진 아이디에 대응되는 본인인증 내역을 조회합니다.
   */
  getIdentityVerification: {
    parameters: {
      query?: {
        /**
         * @description 상점 아이디
         * 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         */
        storeId?: string;
      };
      path: {
        /** @description 조회할 본인인증 아이디 */
        identityVerificationId: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 본인 인증 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['IdentityVerification'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>IdentityVerificationNotFoundError</code>: 요청된 본인인증 건이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetIdentityVerificationError'];
        };
      };
    };
  };
  /**
   * 본인인증 요청 전송
   *
   * @description 본인인증 요청 전송
   * SMS 또는 APP 방식을 이용하여 본인인증 요청을 전송합니다.
   */
  sendIdentityVerification: {
    parameters: {
      path: {
        /** @description 본인인증 아이디 */
        identityVerificationId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SendIdentityVerificationBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['SendIdentityVerificationResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['SendIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['SendIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['SendIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>IdentityVerificationNotFoundError</code>: 요청된 본인인증 건이 존재하지 않는 경우</li>
       * <li><code>ChannelNotFoundError</code>: 요청된 채널이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['SendIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>IdentityVerificationAlreadyVerifiedError</code>: 본인인증 건이 이미 인증 완료된 상태인 경우</li>
       * <li><code>IdentityVerificationAlreadySentError</code>: 본인인증 건이 이미 API로 요청된 상태인 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['SendIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['SendIdentityVerificationError'];
        };
      };
    };
  };
  /**
   * 본인인증 확인
   *
   * @description 본인인증 확인
   * 요청된 본인인증에 대한 확인을 진행합니다.
   */
  confirmIdentityVerification: {
    parameters: {
      path: {
        /** @description 본인인증 아이디 */
        identityVerificationId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ConfirmIdentityVerificationBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['ConfirmIdentityVerificationResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ConfirmIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['ConfirmIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['ConfirmIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>IdentityVerificationNotFoundError</code>: 요청된 본인인증 건이 존재하지 않는 경우</li>
       * <li><code>IdentityVerificationNotSentError</code>: 본인인증 건이 API로 요청된 상태가 아닌 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['ConfirmIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>IdentityVerificationAlreadyVerifiedError</code>: 본인인증 건이 이미 인증 완료된 상태인 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['ConfirmIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['ConfirmIdentityVerificationError'];
        };
      };
    };
  };
  /**
   * SMS 본인인증 요청 재전송
   *
   * @description SMS 본인인증 요청 재전송
   * SMS 본인인증 요청을 재전송합니다.
   */
  resendIdentityVerification: {
    parameters: {
      query?: {
        /**
         * @description 상점 아이디
         * 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         */
        storeId?: string;
      };
      path: {
        /** @description 본인인증 아이디 */
        identityVerificationId: string;
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['ResendIdentityVerificationResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ResendIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['ResendIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['ResendIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>IdentityVerificationNotFoundError</code>: 요청된 본인인증 건이 존재하지 않는 경우</li>
       * <li><code>IdentityVerificationNotSentError</code>: 본인인증 건이 API로 요청된 상태가 아닌 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['ResendIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>IdentityVerificationAlreadyVerifiedError</code>: 본인인증 건이 이미 인증 완료된 상태인 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['ResendIdentityVerificationError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['ResendIdentityVerificationError'];
        };
      };
    };
  };
  /**
   * 결제 정보 사전 등록
   *
   * @description 결제 정보 사전 등록
   * 결제 정보를 사전 등록합니다.
   */
  preRegisterPayment: {
    parameters: {
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PreRegisterPaymentBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['PreRegisterPaymentResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['PreRegisterPaymentError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['PreRegisterPaymentError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['PreRegisterPaymentError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>AlreadyPaidError</code>: 결제가 이미 완료된 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['PreRegisterPaymentError'];
        };
      };
    };
  };
  /**
   * 빌링키 단건 조회
   *
   * @description 빌링키 단건 조회
   * 주어진 빌링키에 대응되는 빌링키 정보를 조회합니다.
   */
  getBillingKeyInfo: {
    parameters: {
      query?: {
        /**
         * @description 상점 아이디
         * 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         */
        storeId?: string;
      };
      path: {
        /** @description 조회할 빌링키 */
        billingKey: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 빌링키 정보를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['BillingKeyInfo'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetBillingKeyInfoError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetBillingKeyInfoError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetBillingKeyInfoError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>BillingKeyNotFoundError</code>: 빌링키가 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetBillingKeyInfoError'];
        };
      };
    };
  };
  /**
   * 빌링키 삭제
   *
   * @description 빌링키 삭제
   * 빌링키를 삭제합니다.
   */
  deleteBillingKey: {
    parameters: {
      query?: {
        /**
         * @description 상점 아이디
         * 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         */
        storeId?: string;
      };
      path: {
        /** @description 삭제할 빌링키 */
        billingKey: string;
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['DeleteBillingKeyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['DeleteBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['DeleteBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['DeleteBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>BillingKeyNotIssuedError</code></li>
       * <li><code>BillingKeyNotFoundError</code>: 빌링키가 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['DeleteBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>BillingKeyAlreadyDeletedError</code>: 빌링키가 이미 삭제된 경우</li>
       * <li><code>PaymentScheduleAlreadyExistsError</code>: 결제 예약건이 이미 존재하는 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['DeleteBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['DeleteBillingKeyError'];
        };
      };
    };
  };
  /**
   * 현금 영수증 단건 조회
   *
   * @description 현금 영수증 단건 조회
   * 주어진 결제 아이디에 대응되는 현금 영수증 내역을 조회합니다.
   */
  getCashReceiptByPaymentId: {
    parameters: {
      query?: {
        /**
         * @description 상점 아이디
         * 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         */
        storeId?: string;
      };
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 현금 영수증 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['CashReceipt'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>CashReceiptNotFoundError</code>: 현금영수증이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetCashReceiptError'];
        };
      };
    };
  };
  /**
   * 결제 단건 조회
   *
   * @description 결제 단건 조회
   * 주어진 아이디에 대응되는 결제 건을 조회합니다.
   */
  getPayment: {
    parameters: {
      query?: {
        /** @description 상점 아이디 */
        storeId?: string;
      };
      path: {
        /** @description 조회할 결제 아이디 */
        paymentId: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 결제 건 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['Payment'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPaymentError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPaymentError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPaymentError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetPaymentError'];
        };
      };
    };
  };
  /**
   * 결제 다건 조회(페이지 기반)
   *
   * @description 결제 다건 조회(페이지 기반)
   * 주어진 조건에 맞는 결제 건들을 페이지 기반으로 조회합니다.
   */
  getPayments: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetPaymentsBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 조회된 결제 건 리스트와 페이지 정보가 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['GetPaymentsResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPaymentsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPaymentsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPaymentsError'];
        };
      };
    };
  };
  /**
   * 결제 대용량 다건 조회(커서 기반)
   *
   * @description 결제 대용량 다건 조회(커서 기반)
   * 기간 내 모든 결제 건을 커서 기반으로 조회합니다. 결제 건의 생성일시를 기준으로 주어진 기간 내 존재하는 모든 결제 건이 조회됩니다.
   */
  getAllPaymentsByCursor: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAllPaymentsByCursorBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 조회된 결제 건 리스트와 커서 정보가 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['GetAllPaymentsByCursorResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetAllPaymentsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetAllPaymentsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetAllPaymentsError'];
        };
      };
    };
  };
  /**
   * 결제 예약 단건 조회
   *
   * @description 결제 예약 단건 조회
   * 주어진 아이디에 대응되는 결제 예약 건을 조회합니다.
   */
  getPaymentSchedule: {
    parameters: {
      query?: {
        /**
         * @description 상점 아이디
         * 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         */
        storeId?: string;
      };
      path: {
        /** @description 조회할 결제 예약 건 아이디 */
        paymentScheduleId: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 결제 예약 건 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['PaymentSchedule'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPaymentScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPaymentScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPaymentScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentScheduleNotFoundError</code>: 결제 예약건이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetPaymentScheduleError'];
        };
      };
    };
  };
  /**
   * 결제 예약 다건 조회
   *
   * @description 결제 예약 다건 조회
   * 주어진 조건에 맞는 결제 예약 건들을 조회합니다.
   */
  getPaymentSchedules: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetPaymentSchedulesBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 조회된 예약 결제 건 리스트가 반환됩니다. */
      200: {
        content: {
          'application/json': components['schemas']['GetPaymentSchedulesResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPaymentSchedulesError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPaymentSchedulesError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPaymentSchedulesError'];
        };
      };
    };
  };
  /**
   * 결제 예약 취소
   *
   * @description 결제 예약 취소
   * 결제 예약 건을 취소합니다.
   */
  revokePaymentSchedule: {
    requestBody: {
      content: {
        'application/json': components['schemas']['RevokePaymentScheduleBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['RevokePaymentScheduleResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['RevokePaymentScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['RevokePaymentScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['RevokePaymentScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentScheduleNotFoundError</code>: 결제 예약건이 존재하지 않는 경우</li>
       * <li><code>BillingKeyNotFoundError</code>: 빌링키가 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['RevokePaymentScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentScheduleAlreadyProcessedError</code>: 결제 예약건이 이미 처리된 경우</li>
       * <li><code>PaymentScheduleAlreadyRevokedError</code>: 결제 예약건이 이미 취소된 경우</li>
       * <li><code>BillingKeyAlreadyDeletedError</code>: 빌링키가 이미 삭제된 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['RevokePaymentScheduleError'];
        };
      };
    };
  };
  /**
   * 결제 예약
   *
   * @description 결제 예약
   * 결제를 예약합니다.
   */
  createPaymentSchedule: {
    parameters: {
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePaymentScheduleBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['CreatePaymentScheduleResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CreatePaymentScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CreatePaymentScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CreatePaymentScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>BillingKeyNotFoundError</code>: 빌링키가 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CreatePaymentScheduleError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>AlreadyPaidOrWaitingError</code>: 결제가 이미 완료되었거나 대기중인 경우</li>
       * <li><code>SumOfPartsExceedsTotalAmountError</code>: 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우</li>
       * <li><code>BillingKeyAlreadyDeletedError</code>: 빌링키가 이미 삭제된 경우</li>
       * <li><code>PaymentScheduleAlreadyExistsError</code>: 결제 예약건이 이미 존재하는 경우</li>
       * <li><code>PastPaymentScheduleError</code>: 결제 예약 시점이 과거로 지정된 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['CreatePaymentScheduleError'];
        };
      };
    };
  };
  /**
   * 결제 취소
   *
   * @description 결제 취소
   * 결제 취소를 요청합니다.
   */
  cancelPayment: {
    parameters: {
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelPaymentBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['CancelPaymentResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CancelPaymentError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CancelPaymentError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CancelPaymentError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CancelPaymentError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotPaidError</code>: 결제가 완료되지 않은 경우</li>
       * <li><code>PaymentAlreadyCancelledError</code>: 결제가 이미 취소된 경우</li>
       * <li><code>CancellableAmountConsistencyBrokenError</code>: 취소 가능 잔액 검증에 실패한 경우</li>
       * <li><code>CancelAmountExceedsCancellableAmountError</code>: 결제 취소 금액이 취소 가능 금액을 초과한 경우</li>
       * <li><code>SumOfPartsExceedsCancelAmountError</code>: 면세 금액 등 하위 항목들의 합이 전체 취소 금액을 초과한 경우</li>
       * <li><code>CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError</code>: 취소 면세 금액이 취소 가능한 면세 금액을 초과한 경우</li>
       * <li><code>CancelTaxAmountExceedsCancellableTaxAmountError</code>: 취소 과세 금액이 취소 가능한 과세 금액을 초과한 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['CancelPaymentError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['CancelPaymentError'];
        };
      };
    };
  };
  /**
   * 빌링키 결제
   *
   * @description 빌링키 결제
   * 빌링키로 결제를 진행합니다.
   */
  PayWithBillingKey: {
    parameters: {
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BillingKeyPaymentInput'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['PayWithBillingKeyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['PayWithBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['PayWithBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['PayWithBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>BillingKeyNotFoundError</code>: 빌링키가 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['PayWithBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>AlreadyPaidError</code>: 결제가 이미 완료된 경우</li>
       * <li><code>SumOfPartsExceedsTotalAmountError</code>: 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우</li>
       * <li><code>BillingKeyAlreadyDeletedError</code>: 빌링키가 이미 삭제된 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['PayWithBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['PayWithBillingKeyError'];
        };
      };
    };
  };
  /**
   * 수기 결제
   *
   * @description 수기 결제
   * 수기 결제를 진행합니다.
   */
  PayInstantly: {
    parameters: {
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstantPaymentInput'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['PayInstantlyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['PayInstantlyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['PayInstantlyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['PayInstantlyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ChannelNotFoundError</code>: 요청된 채널이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['PayInstantlyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>AlreadyPaidError</code>: 결제가 이미 완료된 경우</li>
       * <li><code>SumOfPartsExceedsTotalAmountError</code>: 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['PayInstantlyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['PayInstantlyError'];
        };
      };
    };
  };
  /**
   * 빌링키 발급
   *
   * @description 빌링키 발급
   * 빌링키 발급을 요청합니다.
   */
  issueBillingKey: {
    requestBody: {
      content: {
        'application/json': components['schemas']['IssueBillingKeyBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['IssueBillingKeyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['IssueBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['IssueBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['IssueBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ChannelNotFoundError</code>: 요청된 채널이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['IssueBillingKeyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['IssueBillingKeyError'];
        };
      };
    };
  };
  /**
   * 현금 영수증 수동 발급
   *
   * @description 현금 영수증 수동 발급
   * 현금 영수증 발급을 요청합니다.
   */
  issueCashReceipt: {
    requestBody: {
      content: {
        'application/json': components['schemas']['IssueCashReceiptBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['IssueCashReceiptResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['IssueCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['IssueCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['IssueCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ChannelNotFoundError</code>: 요청된 채널이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['IssueCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>CashReceiptAlreadyIssuedError</code>: 현금영수증이 이미 발급된 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['IssueCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['IssueCashReceiptError'];
        };
      };
    };
  };
  /**
   * 현금 영수증 취소
   *
   * @description 현금 영수증 취소
   * 현금 영수증 취소를 요청합니다.
   */
  cancelCashReceiptByPaymentId: {
    parameters: {
      query?: {
        /**
         * @description 상점 아이디
         * 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         */
        storeId?: string;
      };
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['CancelCashReceiptResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CancelCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CancelCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CancelCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>CashReceiptNotIssuedError</code>: 현금영수증이 발급되지 않은 경우</li>
       * <li><code>CashReceiptNotFoundError</code>: 현금영수증이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CancelCashReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['CancelCashReceiptError'];
        };
      };
    };
  };
  /**
   * 가상계좌 말소
   *
   * @description 가상계좌 말소
   * 발급된 가상계좌를 말소합니다.
   */
  closeVirtualAccount: {
    parameters: {
      query?: {
        /**
         * @description 상점 아이디
         * 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
         */
        storeId?: string;
      };
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['CloseVirtualAccountResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CloseVirtualAccountError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CloseVirtualAccountError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CloseVirtualAccountError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CloseVirtualAccountError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotWaitingForDepositError</code>: 결제 건이 입금 대기 상태가 아닌 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['CloseVirtualAccountError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['CloseVirtualAccountError'];
        };
      };
    };
  };
  /**
   * 에스크로 배송 정보 등록
   *
   * @description 에스크로 배송 정보 등록
   * 에스크로 배송 정보를 등록합니다.
   */
  applyEscrowLogistics: {
    parameters: {
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterEscrowLogisticsBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['ApplyEscrowLogisticsResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ApplyEscrowLogisticsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['ApplyEscrowLogisticsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['ApplyEscrowLogisticsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['ApplyEscrowLogisticsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotPaidError</code>: 결제가 완료되지 않은 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['ApplyEscrowLogisticsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['ApplyEscrowLogisticsError'];
        };
      };
    };
  };
  /**
   * 에스크로 배송 정보 수정
   *
   * @description 에스크로 배송 정보 수정
   * 에스크로 배송 정보를 수정합니다.
   */
  modifyEscrowLogistics: {
    parameters: {
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ModifyEscrowLogisticsBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['ModifyEscrowLogisticsResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ModifyEscrowLogisticsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['ModifyEscrowLogisticsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['ModifyEscrowLogisticsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['ModifyEscrowLogisticsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotPaidError</code>: 결제가 완료되지 않은 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['ModifyEscrowLogisticsError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['ModifyEscrowLogisticsError'];
        };
      };
    };
  };
  /**
   * 에스크로 구매 확정
   *
   * @description 에스크로 구매 확정
   * 에스크로 결제를 구매 확정 처리합니다
   */
  confirmEscrow: {
    parameters: {
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ConfirmEscrowBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['ConfirmEscrowResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ConfirmEscrowError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['ConfirmEscrowError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['ConfirmEscrowError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['ConfirmEscrowError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotPaidError</code>: 결제가 완료되지 않은 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['ConfirmEscrowError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['ConfirmEscrowError'];
        };
      };
    };
  };
  /**
   * 웹훅 재발송
   *
   * @description 웹훅 재발송
   * 웹훅을 재발송합니다.
   */
  resendWebhook: {
    parameters: {
      path: {
        /** @description 결제 건 아이디 */
        paymentId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ResendWebhookBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['ResendWebhookResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ResendWebhookError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['ResendWebhookError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['ResendWebhookError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
       * <li><code>WebhookNotFoundError</code>: 웹훅 내역이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['ResendWebhookError'];
        };
      };
    };
  };
  /** @description 가맹점의 결제 현황을 조회합니다. */
  getAnalyticsPaymentChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsPaymentChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 결제 현황을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsPaymentChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetAnalyticsPaymentChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetAnalyticsPaymentChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetAnalyticsPaymentChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 결제 현황 인사이트를 조회합니다. */
  getAnalyticsPaymentChartInsight: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsPaymentChartInsightBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 결제 현황 인사이트를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsPaymentChartInsight'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetAnalyticsPaymentChartInsightError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetAnalyticsPaymentChartInsightError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetAnalyticsPaymentChartInsightError'];
        };
      };
    };
  };
  /** @description 가맹점의 평균 거래액 현황을 조회합니다. */
  getAverageAmountChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsAverageAmountChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 평균 거래액 현황을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsAverageAmountChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetAverageAmountChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetAverageAmountChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetAverageAmountChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 결제수단 현황을 조회합니다. */
  getPaymentMethodChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsPaymentMethodChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 결제수단 현황을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsPaymentMethodChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPaymentMethodChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPaymentMethodChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPaymentMethodChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 결제수단 트렌드를 조회합니다. */
  getPaymentMethodTrendChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsPaymentMethodTrendChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 결제수단 트렌드를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsPaymentMethodTrendChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPaymentMethodTrendChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPaymentMethodTrendChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPaymentMethodTrendChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 카드결제 현황을 조회합니다. */
  getAnalyticsCardChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsCardChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 카드결제 현황을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsCardChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetAnalyticsCardChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetAnalyticsCardChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetAnalyticsCardChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 카드사별 결제 현황을 조회합니다. */
  getAnalyticsCardCompanyChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsCardCompanyChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 카드사별 결제 현황을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsCardCompanyChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetAnalyticsCardCompanyChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetAnalyticsCardCompanyChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetAnalyticsCardCompanyChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 간편결제 현황을 조회합니다. */
  getAnalyticsEasyPayChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsEasyPayChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 간편결제 현황을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsEasyPayChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetAnalyticsEasyPayChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetAnalyticsEasyPayChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetAnalyticsEasyPayChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 간편결제사별 결제 현황을 조회합니다. */
  getAnalyticsEasyPayProviderChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsEasyPayProviderChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 간편결제사별 결제 현황을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsEasyPayProviderChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetAnalyticsEasyPayProviderChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetAnalyticsEasyPayProviderChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetAnalyticsEasyPayProviderChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 결제대행사 현황을 조회합니다. */
  getPgCompanyChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsPgCompanyChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 결제대행사 현황을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsPgCompanyChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPgCompanyChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPgCompanyChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPgCompanyChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 결제대행사별 거래 추이를 조회합니다. */
  getPgCompanyTrendChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsPgCompanyTrendChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 결제대행사별 거래 추이를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsPgCompanyTrendChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPgCompanyTrendChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPgCompanyTrendChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPgCompanyTrendChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 해외 결제 사용 여부를 조회합니다. */
  getAnalyticsOverseasPaymentUsage: {
    responses: {
      /** @description 성공 응답으로 해외 결제 사용 여부을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsOverseasPaymentUsage'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetAnalyticsOverseasPaymentUsageError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetAnalyticsOverseasPaymentUsageError'];
        };
      };
    };
  };
  /** @description 가맹점의 환불율을 조회합니다. */
  getAnalyticsCancellationRate: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsCancellationRateBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 환불율을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsCancellationRate'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetAnalyticsCancellationRateError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetAnalyticsCancellationRateError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetAnalyticsCancellationRateError'];
        };
      };
    };
  };
  /** @description 가맹점의 결제상태 이력 집계를 조회합니다. */
  getPaymentStatusChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsPaymentStatusChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 결제상태 이력 집계 결과를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsPaymentStatusChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 결제수단별 결제전환율을 조회합니다. */
  getPaymentStatusByPaymentMethodChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsPaymentStatusByPaymentMethodChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 결제수단별 결제전환율 조회 결과를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsPaymentStatusByPaymentMethodChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusByPaymentMethodChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusByPaymentMethodChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusByPaymentMethodChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 PG사별 결제전환율을 조회합니다. */
  getPaymentStatusByPgCompanyChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsPaymentStatusByPgCompanyChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 PG사별 결제전환율 조회 결과를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsPaymentStatusByPgCompanyChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusByPgCompanyChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusByPgCompanyChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusByPgCompanyChartError'];
        };
      };
    };
  };
  /** @description 가맹점의 결제환경별 결제전환율을 조회합니다. */
  getPaymentStatusByPaymentClientChart: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAnalyticsPaymentStatusByPaymentClientChartBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 결제환경별 결제전환율 조회 결과를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['AnalyticsPaymentStatusByPaymentClientChart'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusByPaymentClientChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusByPaymentClientChartError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetPaymentStatusByPaymentClientChartError'];
        };
      };
    };
  };
  /**
   * 연동 사업자 조회
   *
   * @description 연동 사업자 조회
   * 포트원 B2B 서비스에 연동된 사업자를 조회합니다.
   */
  getB2bMemberCompany: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
      path: {
        /** @description 사업자등록번호 */
        brn: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 사업자 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bMemberCompany'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetB2bMemberCompanyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetB2bMemberCompanyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetB2bMemberCompanyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bMemberCompanyNotFoundError</code>: 연동 사업자가 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetB2bMemberCompanyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['GetB2bMemberCompanyError'];
        };
      };
    };
  };
  /**
   * 사업자 연동
   *
   * @description 사업자 연동
   * 포트원 B2B 서비스에 사업자를 연동합니다.
   */
  registerB2bMemberCompany: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterB2bMemberCompanyBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['RegisterB2bMemberCompanyResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['RegisterB2bMemberCompanyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['RegisterB2bMemberCompanyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['RegisterB2bMemberCompanyError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['RegisterB2bMemberCompanyError'];
        };
      };
    };
  };
  /**
   * 담당자 조회
   *
   * @description 담당자 조회
   * 연동 사업자에 등록된 담당자를 조회합니다.
   */
  getB2bMemberCompanyContact: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
      path: {
        /** @description 사업자등록번호 */
        brn: string;
        /** @description 담당자 ID */
        contactId: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 담당자 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bCompanyContact'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetB2bMemberCompanyContactError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetB2bMemberCompanyContactError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetB2bMemberCompanyContactError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bMemberCompanyNotFoundError</code>: 연동 사업자가 존재하지 않는 경우</li>
       * <li><code>B2bContactNotFoundError</code>: 담당자가 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetB2bMemberCompanyContactError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['GetB2bMemberCompanyContactError'];
        };
      };
    };
  };
  /**
   * 사업자 인증서 등록 URL 조회
   *
   * @description 사업자 인증서 등록 URL 조회
   * 연동 사업자의 인증서를 등록하기 위한 URL을 조회합니다.
   */
  getB2bCertificateRegistrationUrl: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
      path: {
        /** @description 사업자등록번호 */
        brn: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 URL을 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['GetB2bCertificateRegistrationUrlResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetB2bCertificateRegistrationUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetB2bCertificateRegistrationUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetB2bCertificateRegistrationUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bMemberCompanyNotFoundError</code>: 연동 사업자가 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetB2bCertificateRegistrationUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['GetB2bCertificateRegistrationUrlError'];
        };
      };
    };
  };
  /**
   * 인증서 조회
   *
   * @description 인증서 조회
   * 연동 사업자의 인증서를 조회합니다.
   */
  getB2bCertificate: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
      path: {
        /** @description 사업자등록번호 */
        brn: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 인증서 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bCertificate'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetB2bCertificateError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetB2bCertificateError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetB2bCertificateError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bMemberCompanyNotFoundError</code>: 연동 사업자가 존재하지 않는 경우</li>
       * <li><code>B2bCertificateUnregisteredError</code>: 인증서가 등록되어 있지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetB2bCertificateError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['GetB2bCertificateError'];
        };
      };
    };
  };
  /**
   * 담당자 ID 존재 여부 확인
   *
   * @description 담당자 ID 존재 여부 확인
   * 담당자 ID가 이미 사용중인지 확인합니다.
   */
  getB2bContactIdExistence: {
    parameters: {
      query: {
        /** @description 담당자 ID */
        contactId: string;
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
    };
    responses: {
      /** @description 성공 응답입니다. */
      200: {
        content: {
          'application/json': components['schemas']['GetB2bContactIdExistenceResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['getB2bContactIdExistenceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['getB2bContactIdExistenceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['getB2bContactIdExistenceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['getB2bContactIdExistenceError'];
        };
      };
    };
  };
  /**
   * 예금주 조회
   *
   * @description 예금주 조회
   * 원하는 계좌의 예금주를 조회합니다.
   */
  getB2bBankAccountHolder: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
      path: {
        /** @description 은행 */
        bank: components['schemas']['Bank'];
        /** @description '-'를 제외한 계좌 번호 */
        accountNumber: string;
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['GetB2bBankAccountHolderResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetB2bAccountHolderError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetB2bAccountHolderError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetB2bAccountHolderError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bBankAccountNotFoundError</code>: 계좌가 존재하지 않는 경우</li>
       * <li><code>B2bForeignExchangeAccountError</code>: 계좌 정보 조회가 불가능한 외화 계좌인 경우</li>
       * <li><code>B2bSuspendedAccountError</code>: 정지 계좌인 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetB2bAccountHolderError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['GetB2bAccountHolderError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bRegularMaintenanceTimeError</code>: 금융기관 시스템이 정기 점검 중인 경우</li>
       * <li><code>B2bFinancialSystemFailureError</code>: 금융기관 장애</li>
       * <li><code>B2bFinancialSystemUnderMaintenanceError</code>: 금융기관 시스템이 점검 중인 경우</li>
       * <li><code>B2bFinancialSystemCommunicationError</code>: 금융기관과의 통신에 실패한 경우</li>
       * </ul>
       */
      503: {
        content: {
          'application/json': components['schemas']['GetB2bAccountHolderError'];
        };
      };
    };
  };
  /**
   * 사업자 상태 조회
   *
   * @description 사업자 상태 조회
   * 원하는 사업자의 상태를 조회합니다. 포트원 B2B 서비스에 연동 및 등록되지 않은 사업자도 조회 가능합니다.
   */
  getB2bCompanyState: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
      path: {
        /** @description 사업자등록번호 */
        brn: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 사업자 상태 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bCompanyState'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetB2bCompanyStateError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetB2bCompanyStateError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetB2bCompanyStateError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bCompanyNotFoundError</code>: 사업자가 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetB2bCompanyStateError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['GetB2bCompanyStateError'];
        };
      };
    };
  };
  /**
   * 세금계산서 역발행 요청
   *
   * @description 세금계산서 역발행 요청
   * 공급자에게 세금계산서 역발행을 요청합니다.
   */
  requestB2bTaxInvoiceReverseIssuance: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestB2bTaxInvoiceReverseIssuanceRequestBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 세금계산서를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bTaxInvoice'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['RequestB2bTaxInvoiceReverseIssuanceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['RequestB2bTaxInvoiceReverseIssuanceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['RequestB2bTaxInvoiceReverseIssuanceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bSupplierNotFoundError</code>: 공급자가 존재하지 않은 경우</li>
       * <li><code>B2bRecipientNotFoundError</code>: 공급받는자가 존재하지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['RequestB2bTaxInvoiceReverseIssuanceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['RequestB2bTaxInvoiceReverseIssuanceError'];
        };
      };
    };
  };
  /**
   * 세금 계산서 조회
   *
   * @description 세금 계산서 조회
   * 등록된 세금 계산서를 공급자 혹은 공급받는자 문서번호로 조회합니다.
   */
  getB2bTaxInvoice: {
    parameters: {
      query: {
        /** @description 사업자등록번호 */
        brn: string;
        /**
         * @description 문서 번호 유형
         * path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.
         */
        documentKeyType?: components['schemas']['B2bTaxInvoiceDocumentKeyType'];
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
      path: {
        /** @description 세금계산서 문서 번호 */
        documentKey: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 세금계산서를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bTaxInvoice'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoiceError'];
        };
      };
    };
  };
  /**
   * 세금계산서 삭제
   *
   * @description 세금계산서 삭제
   * 세금계산서를 삭제합니다.
   */
  deleteB2bTaxInvoice: {
    parameters: {
      query: {
        /** @description 사업자등록번호 */
        brn: string;
        /**
         * @description 문서 번호 유형
         * path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.
         */
        documentKeyType?: components['schemas']['B2bTaxInvoiceDocumentKeyType'];
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
      path: {
        /** @description 세금계산서 문서 번호 */
        documentKey: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * <li><code>B2bTaxInvoiceNonDeletableStatusError</code>: 세금계산서가 삭제 가능한 상태가 아닌 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['DeleteB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['DeleteB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['DeleteB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['DeleteB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['DeleteB2bTaxInvoiceError'];
        };
      };
    };
  };
  /**
   * 세금계산서 발행
   *
   * @description 세금계산서 발행
   * 역발행의 경우 역발행요청(REQUESTED) 상태, 정발행의 경우 임시저장(REGISTERED) 상태의 세금계산서를 발행합니다.
   */
  issueB2bTaxInvoice: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['IssueB2bTaxInvoiceRequestBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 세금계산서를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bTaxInvoice'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * <li><code>B2bTaxInvoiceNotRequestedStatusError</code>: 세금계산서가 역발행 대기 상태가 아닌 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['IssueB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['IssueB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['IssueB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['IssueB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['IssueB2bTaxInvoiceError'];
        };
      };
    };
  };
  /**
   * 세금계산서 역발행 요청 취소
   *
   * @description 세금계산서 역발행 요청 취소
   * 공급받는자가 공급자에게 세금계산서 역발행 요청한 것을 취소합니다.
   */
  cancelB2bTaxInvoiceRequest: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelB2bTaxInvoiceRequestBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 세금계산서를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bTaxInvoice'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * <li><code>B2bTaxInvoiceNotRequestedStatusError</code>: 세금계산서가 역발행 대기 상태가 아닌 경우</li>
       * <li><code>B2bTaxInvoiceNoRecipientDocumentKeyError</code>: 세금계산서에 공급받는자 문서 번호가 기입되지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CancelB2bTaxInvoiceRequestError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CancelB2bTaxInvoiceRequestError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CancelB2bTaxInvoiceRequestError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['CancelB2bTaxInvoiceRequestError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['CancelB2bTaxInvoiceRequestError'];
        };
      };
    };
  };
  /**
   * 세금계산서 역발행 취소
   *
   * @description 세금계산서 역발행 취소
   * 공급자가 발행 완료한 세금계산서를 국세청 전송 전 취소합니다.
   */
  cancelB2bTaxInvoiceIssuance: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelB2bTaxInvoiceIssuanceBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 세금계산서를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bTaxInvoice'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * <li><code>B2bTaxInvoiceNotIssuedStatusError</code>: 세금계산서가 발행된(ISSUED) 상태가 아닌 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['CancelB2bTaxInvoiceIssuanceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['CancelB2bTaxInvoiceIssuanceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['CancelB2bTaxInvoiceIssuanceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['CancelB2bTaxInvoiceIssuanceError'];
        };
      };
    };
  };
  /**
   * 세금계산서 역발행 요청 거부
   *
   * @description 세금계산서 역발행 요청 거부
   * 공급자가 공급받는자로부터 요청받은 세금계산서 역발행 건을 거부합니다.
   */
  refuseB2bTaxInvoiceRequest: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RefuseB2bTaxInvoiceRequestBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 세금계산서를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bTaxInvoice'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * <li><code>B2bTaxInvoiceNotRequestedStatusError</code>: 세금계산서가 역발행 대기 상태가 아닌 경우</li>
       * <li><code>B2bTaxInvoiceNoSupplierDocumentKeyError</code>: 세금계산서에 공급자 문서 번호가 기입되지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['RefuseB2bTaxInvoiceRequestError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['RefuseB2bTaxInvoiceRequestError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['RefuseB2bTaxInvoiceRequestError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['RefuseB2bTaxInvoiceRequestError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['RefuseB2bTaxInvoiceRequestError'];
        };
      };
    };
  };
  /**
   * 세금 계산서 다건조회
   *
   * @description 세금 계산서 다건조회
   * 조회 기간 내 등록된 세금 계산서를 다건 조회합니다.
   */
  getB2bTaxInvoices: {
    parameters: {
      query: {
        /** @description 사업자등록번호 */
        brn: string;
        /**
         * @description 페이지 번호
         * 0부터 시작하는 페이지 번호. 기본 값은 0.
         */
        pageNumber?: number;
        /**
         * @description 페이지 크기
         * 각 페이지 당 포함할 객체 수. 기본 값은 500이며 최대 1000까지 요청가능합니다.
         */
        pageSize?: number;
        /** @description 조회 시작일 */
        from: string;
        /** @description 조회 종료일 */
        until: string;
        /** @description 조회 기간 기준 */
        dateType: components['schemas']['B2bSearchDateType'];
        /**
         * @description 문서 번호 유형
         * path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.
         */
        documentKeyType?: components['schemas']['B2bTaxInvoiceDocumentKeyType'];
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicesResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicesError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicesError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicesError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicesError'];
        };
      };
    };
  };
  /**
   * 세금 계산서 팝업 URL 조회
   *
   * @description 세금 계산서 팝업 URL 조회
   * 등록된 세금 계산서 팝업 URL을 공급자 혹은 공급받는자 문서번호로 조회합니다.
   */
  getB2bTaxInvoicePopupUrl: {
    parameters: {
      query: {
        /** @description 사업자등록번호 */
        brn: string;
        /**
         * @description 문서 번호 유형
         * path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.
         */
        documentKeyType?: components['schemas']['B2bTaxInvoiceDocumentKeyType'];
        /**
         * @description 메뉴 포함 여부
         * 팝업 URL에 메뉴 레이아웃을 포함 여부를 결정합니다. 기본 값은 true입니다.
         */
        includeMenu?: boolean;
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
      path: {
        /** @description 세금계산서 문서 번호 */
        documentKey: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePopupUrlResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePopupUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePopupUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePopupUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePopupUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePopupUrlError'];
        };
      };
    };
  };
  /**
   * 세금 계산서 프린트 URL 조회
   *
   * @description 세금 계산서 프린트 URL 조회
   * 등록된 세금 계산서 프린트 URL을 공급자 혹은 공급받는자 문서번호로 조회합니다.
   */
  getB2bTaxInvoicePrintUrl: {
    parameters: {
      query: {
        /** @description 사업자등록번호 */
        brn: string;
        /**
         * @description 문서 번호 유형
         * path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.
         */
        documentKeyType?: components['schemas']['B2bTaxInvoiceDocumentKeyType'];
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
      path: {
        /** @description 세금계산서 문서 번호 */
        documentKey: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePrintUrlResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePrintUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePrintUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePrintUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePrintUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePrintUrlError'];
        };
      };
    };
  };
  /**
   * 세금 계산서 PDF 다운로드 URL 조회
   *
   * @description 세금 계산서 PDF 다운로드 URL 조회
   * 등록된 세금 계산서 PDF 다운로드 URL을 공급자 혹은 공급받는자 문서번호로 조회합니다.
   */
  getB2bTaxInvoicePdfDownloadUrl: {
    parameters: {
      query: {
        /** @description 사업자등록번호 */
        brn: string;
        /**
         * @description 문서 번호 유형
         * path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.
         */
        documentKeyType?: components['schemas']['B2bTaxInvoiceDocumentKeyType'];
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
      path: {
        /** @description 세금계산서 문서 번호 */
        documentKey: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePdfDownloadUrlResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePdfDownloadUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePdfDownloadUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePdfDownloadUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePdfDownloadUrlError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['GetB2bTaxInvoicePdfDownloadUrlError'];
        };
      };
    };
  };
  /**
   * 세금계산서 임시 저장
   *
   * @description 세금계산서 임시 저장
   * 세금계산서 임시 저장을 요청합니다.
   */
  requestB2bTaxInvoiceRegister: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestB2bTaxInvoiceRegisterBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 세금계산서를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bTaxInvoice'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['RequestB2bTaxInvoiceRegisterError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['RequestB2bTaxInvoiceRegisterError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['RequestB2bTaxInvoiceRegisterError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bSupplierNotFoundError</code>: 공급자가 존재하지 않은 경우</li>
       * <li><code>B2bRecipientNotFoundError</code>: 공급받는자가 존재하지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['RequestB2bTaxInvoiceRegisterError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['RequestB2bTaxInvoiceRegisterError'];
        };
      };
    };
  };
  /**
   * 세금계산서 역발행 요청
   *
   * @description 세금계산서 역발행 요청
   * 임시저장(REGISTERED) 상태의 역발행 세금계산서를 공급자에게 발행 요청합니다.
   */
  requestB2bTaxInvoice: {
    parameters: {
      query?: {
        /**
         * @description 테스트 모드 여부
         * true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.
         */
        test?: boolean;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestB2bTaxInvoiceRequestBody'];
      };
    };
    responses: {
      /** @description 성공 응답으로 세금계산서를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['B2bTaxInvoice'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * <li><code>B2bTaxInvoiceNotRegisteredStatusError</code>: 세금계산서가 임시저장 상태가 아닌 경우</li>
       * <li><code>B2bTaxInvoiceNoRecipientDocumentKeyError</code>: 세금계산서에 공급받는자 문서 번호가 기입되지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['requestB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['requestB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['requestB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['requestB2bTaxInvoiceError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['requestB2bTaxInvoiceError'];
        };
      };
    };
  };
  /**
   * 카카오페이 주문 조회 API
   *
   * @description 카카오페이 주문 조회 API
   * 주어진 아이디에 대응되는 카카오페이 주문 건을 조회합니다.
   * 해당 API 사용이 필요한 경우 포트원 기술지원팀으로 문의 주시길 바랍니다.
   */
  GetKakaopayPaymentOrder: {
    parameters: {
      query: {
        /** @description 카카오페이 주문 번호 (tid) */
        pgTxId: string;
        /** @description 채널키 */
        channelKey: string;
      };
    };
    responses: {
      /** @description 성공 응답으로 카카오페이 주문 조회 응답 객체를 반환합니다. */
      200: {
        content: {
          'application/json': components['schemas']['GetKakaopayPaymentOrderResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['GetKakaopayPaymentOrderError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['GetKakaopayPaymentOrderError'];
        };
      };
    };
  };
  /**
   * 영수증 내 하위 상점 거래 등록 API
   *
   * @description 영수증 내 하위 상점 거래 등록 API
   * 결제 내역 매출전표에 하위 상점의 거래를 등록할 수 있는 API입니다.
   * 지원되는 PG사:
   * KG이니시스(이용 전 콘솔 -&gt; 결제연동 탭에서 INIApi Key 등록 필요)
   */
  registerStoreReceipt: {
    parameters: {
      path: {
        /** @description 등록할 하위 상점 결제 건 아이디 */
        paymentId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterStoreReceiptBody'];
      };
    };
    responses: {
      /** @description 성공 응답 */
      200: {
        content: {
          'application/json': components['schemas']['RegisterStoreReceiptResponse'];
        };
      };
      /**
       * @description <ul>
       * <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
       * </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['RegisterStoreReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
       * </ul>
       */
      401: {
        content: {
          'application/json': components['schemas']['RegisterStoreReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
       * </ul>
       */
      403: {
        content: {
          'application/json': components['schemas']['RegisterStoreReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
       * </ul>
       */
      404: {
        content: {
          'application/json': components['schemas']['RegisterStoreReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PaymentNotPaidError</code>: 결제가 완료되지 않은 경우</li>
       * </ul>
       */
      409: {
        content: {
          'application/json': components['schemas']['RegisterStoreReceiptError'];
        };
      };
      /**
       * @description <ul>
       * <li><code>PgProviderError</code>: PG사에서 오류가 발생한 경우</li>
       * </ul>
       */
      502: {
        content: {
          'application/json': components['schemas']['RegisterStoreReceiptError'];
        };
      };
    };
  };
}
